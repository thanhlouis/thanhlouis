(window.webpackJsonp = window.webpackJsonp || []).push([["61a46"], {
    GjsP: function(t, e, i) {
        /*! hy v 2411271811 */
        t.exports = function(t) {
            var e = {};
            function i(s) {
                if (e[s])
                    return e[s].exports;
                var a = e[s] = {
                    i: s,
                    l: !1,
                    exports: {}
                };
                return t[s].call(a.exports, a, a.exports, i),
                a.l = !0,
                a.exports
            }
            return i.m = t,
            i.c = e,
            i.d = function(t, e, s) {
                i.o(t, e) || Object.defineProperty(t, e, {
                    enumerable: !0,
                    get: s
                })
            }
            ,
            i.r = function(t) {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                    value: "Module"
                }),
                Object.defineProperty(t, "__esModule", {
                    value: !0
                })
            }
            ,
            i.t = function(t, e) {
                if (1 & e && (t = i(t)),
                8 & e)
                    return t;
                if (4 & e && "object" == typeof t && t && t.__esModule)
                    return t;
                var s = Object.create(null);
                if (i.r(s),
                Object.defineProperty(s, "default", {
                    enumerable: !0,
                    value: t
                }),
                2 & e && "string" != typeof t)
                    for (var a in t)
                        i.d(s, a, function(e) {
                            return t[e]
                        }
                        .bind(null, a));
                return s
            }
            ,
            i.n = function(t) {
                var e = t && t.__esModule ? function() {
                    return t.default
                }
                : function() {
                    return t
                }
                ;
                return i.d(e, "a", e),
                e
            }
            ,
            i.o = function(t, e) {
                return Object.prototype.hasOwnProperty.call(t, e)
            }
            ,
            i.p = "",
            i(i.s = 117)
        }([function(t, e) {
            var i = t.exports = {
                version: "2.6.11"
            };
            "number" == typeof __e && (__e = i)
        }
        , function(t, e, i) {
            var s = i(4)
              , a = i(0)
              , r = i(11)
              , n = i(13)
              , o = i(15)
              , u = function(t, e, i) {
                var h, l, c, d = t & u.F, f = t & u.G, p = t & u.S, m = t & u.P, y = t & u.B, v = t & u.W, _ = f ? a : a[e] || (a[e] = {}), g = _.prototype, S = f ? s : p ? s[e] : (s[e] || {}).prototype;
                for (h in f && (i = e),
                i)
                    (l = !d && S && void 0 !== S[h]) && o(_, h) || (c = l ? S[h] : i[h],
                    _[h] = f && "function" != typeof S[h] ? i[h] : y && l ? r(c, s) : v && S[h] == c ? function(t) {
                        var e = function(e, i, s) {
                            if (this instanceof t) {
                                switch (arguments.length) {
                                case 0:
                                    return new t;
                                case 1:
                                    return new t(e);
                                case 2:
                                    return new t(e,i)
                                }
                                return new t(e,i,s)
                            }
                            return t.apply(this, arguments)
                        };
                        return e.prototype = t.prototype,
                        e
                    }(c) : m && "function" == typeof c ? r(Function.call, c) : c,
                    m && ((_.virtual || (_.virtual = {}))[h] = c,
                    t & u.R && g && !g[h] && n(g, h, c)))
            };
            u.F = 1,
            u.G = 2,
            u.S = 4,
            u.P = 8,
            u.B = 16,
            u.W = 32,
            u.U = 64,
            u.R = 128,
            t.exports = u
        }
        , function(t, e, i) {
            "use strict";
            e.__esModule = !0,
            e.default = function(t, e) {
                if (!(t instanceof e))
                    throw new TypeError("Cannot call a class as a function")
            }
        }
        , function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s, a = (s = i(73)) && s.__esModule ? s : {
                default: s
            };
            e.default = function() {
                function t(t, e) {
                    for (var i = 0; i < e.length; i++) {
                        var s = e[i];
                        s.enumerable = s.enumerable || !1,
                        s.configurable = !0,
                        "value"in s && (s.writable = !0),
                        (0,
                        a.default)(t, s.key, s)
                    }
                }
                return function(e, i, s) {
                    return i && t(e.prototype, i),
                    s && t(e, s),
                    e
                }
            }()
        }
        , function(t, e) {
            var i = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
            "number" == typeof __g && (__g = i)
        }
        , function(t, e) {
            t.exports = function(t) {
                return "object" == typeof t ? null !== t : "function" == typeof t
            }
        }
        , function(t, e, i) {
            var s = i(58)("wks")
              , a = i(43)
              , r = i(4).Symbol
              , n = "function" == typeof r;
            (t.exports = function(t) {
                return s[t] || (s[t] = n && r[t] || (n ? r : a)("Symbol." + t))
            }
            ).store = s
        }
        , function(t, e, i) {
            t.exports = !i(14)((function() {
                return 7 != Object.defineProperty({}, "a", {
                    get: function() {
                        return 7
                    }
                }).a
            }
            ))
        }
        , function(t, e, i) {
            var s = i(5);
            t.exports = function(t) {
                if (!s(t))
                    throw TypeError(t + " is not an object!");
                return t
            }
        }
        , function(t, e, i) {
            var s = i(8)
              , a = i(77)
              , r = i(52)
              , n = Object.defineProperty;
            e.f = i(7) ? Object.defineProperty : function(t, e, i) {
                if (s(t),
                e = r(e, !0),
                s(i),
                a)
                    try {
                        return n(t, e, i)
                    } catch (t) {}
                if ("get"in i || "set"in i)
                    throw TypeError("Accessors not supported!");
                return "value"in i && (t[e] = i.value),
                t
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(178),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            var s = i(18);
            t.exports = function(t, e, i) {
                if (s(t),
                void 0 === e)
                    return t;
                switch (i) {
                case 1:
                    return function(i) {
                        return t.call(e, i)
                    }
                    ;
                case 2:
                    return function(i, s) {
                        return t.call(e, i, s)
                    }
                    ;
                case 3:
                    return function(i, s, a) {
                        return t.call(e, i, s, a)
                    }
                }
                return function() {
                    return t.apply(e, arguments)
                }
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s, a = (s = i(38)) && s.__esModule ? s : {
                default: s
            }, r = 99;
            function n(t, e) {
                var i = t.toString().length
                  , s = Math.max(0, e - i)
                  , a = "";
                if (s > 0)
                    for (var r = 0; r < s; r++)
                        a += "0";
                return a + t
            }
            function o() {
                var t = new Date;
                return t.getFullYear() + "-" + n(t.getMonth() + 1, 2) + "-" + n(t.getDate(), 2) + " " + n(t.getHours(), 2) + ":" + n(t.getMinutes(), 2) + ":" + n(t.getSeconds(), 2) + "." + n(t.getMilliseconds(), 3) + " "
            }
            var u = {
                _data: [],
                _length: 0,
                debug: function() {
                    var t = o()
                      , e = Array.prototype.slice.call(arguments);
                    e[0] = t + e[0],
                    r <= -1 && console.log.apply(console, e)
                },
                log: function(t) {
                    var e = o()
                      , i = Array.prototype.slice.call(arguments);
                    i[0] = e + i[0],
                    r <= 0 && console.log.apply(console, i),
                    u.record(i, "log")
                },
                info: function(t) {
                    var e = o()
                      , i = Array.prototype.slice.call(arguments);
                    i[0] = e + i[0],
                    r <= 1 && console.info.apply(console, i),
                    u.record(i, "info")
                },
                warn: function(t) {
                    var e = o()
                      , i = Array.prototype.slice.call(arguments);
                    i[0] = e + i[0],
                    r <= 2 && console.warn.apply(console, i),
                    u.record(i, "warn")
                },
                error: function(t) {
                    var e = o()
                      , i = Array.prototype.slice.call(arguments);
                    i[0] = e + i[0],
                    r <= 3 && console.error.apply(console, i),
                    u.record(i, "error")
                },
                group: function(t) {
                    var e = o()
                      , i = Array.prototype.slice.call(arguments);
                    i[0] = e + i[0],
                    r <= 1 && (console.groupCollapsed || console.group || console.log).apply(console, i),
                    u.record(i, "group")
                },
                groupEnd: function() {
                    console.groupEnd && console.groupEnd.apply(console)
                },
                setLevel: function(t) {
                    t != r && (console.log(o() + " set log level from " + r + " to " + t),
                    r = t)
                },
                getLevel: function() {
                    return r
                },
                record: function(t, e) {
                    1100 === u._length && (u._data.splice(0, 100),
                    u._length = 1e3);
                    var i = 0
                      , s = (t.shift() || "").toString();
                    for (s = s.replace(/\%c/gi, (function(t, e) {
                        return i++,
                        ""
                    }
                    )); i-- && t.length; )
                        t.shift();
                    for (var r = 0, n = t.length; r < n; r++) {
                        var o = t[r];
                        "object" == (void 0 === o ? "undefined" : (0,
                        a.default)(o)) && (t[r] = "")
                    }
                    t.unshift(s);
                    var h = t.join(" ");
                    u._length++,
                    u._data.push("[" + e + "]" + h)
                },
                getLog: function() {
                    return u._data
                }
            };
            e.default = u
        }
        , function(t, e, i) {
            var s = i(9)
              , a = i(29);
            t.exports = i(7) ? function(t, e, i) {
                return s.f(t, e, a(1, i))
            }
            : function(t, e, i) {
                return t[e] = i,
                t
            }
        }
        , function(t, e) {
            t.exports = function(t) {
                try {
                    return !!t()
                } catch (t) {
                    return !0
                }
            }
        }
        , function(t, e) {
            var i = {}.hasOwnProperty;
            t.exports = function(t, e) {
                return i.call(t, e)
            }
        }
        , function(t, e, i) {
            var s = i(56)
              , a = i(54);
            t.exports = function(t) {
                return s(a(t))
            }
        }
        , function(t, e, i) {
            "use strict";
            (function(t) {
                var s, a, r, n, o = P(i(70)), u = P(i(202)), h = P(i(205)), l = P(i(208)), c = P(i(28)), d = P(i(66)), f = P(i(102)), p = P(i(105)), m = P(i(10)), y = P(i(101)), v = P(i(71)), _ = P(i(108)), g = P(i(72)), S = P(i(73)), T = P(i(38));
                function P(t) {
                    return t && t.__esModule ? t : {
                        default: t
                    }
                }
                n = function() {
                    return function(t) {
                        var e = {};
                        function i(s) {
                            if (e[s])
                                return e[s].exports;
                            var a = e[s] = {
                                i: s,
                                l: !1,
                                exports: {}
                            };
                            return t[s].call(a.exports, a, a.exports, i),
                            a.l = !0,
                            a.exports
                        }
                        return i.m = t,
                        i.c = e,
                        i.d = function(t, e, s) {
                            i.o(t, e) || (0,
                            S.default)(t, e, {
                                enumerable: !0,
                                get: s
                            })
                        }
                        ,
                        i.r = function(t) {
                            void 0 !== g.default && _.default && (0,
                            S.default)(t, _.default, {
                                value: "Module"
                            }),
                            Object.defineProperty(t, "__esModule", {
                                value: !0
                            })
                        }
                        ,
                        i.t = function(t, e) {
                            if (1 & e && (t = i(t)),
                            8 & e)
                                return t;
                            if (4 & e && "object" == (void 0 === t ? "undefined" : (0,
                            T.default)(t)) && t && t.__esModule)
                                return t;
                            var s = (0,
                            v.default)(null);
                            if (i.r(s),
                            Object.defineProperty(s, "default", {
                                enumerable: !0,
                                value: t
                            }),
                            2 & e && "string" != typeof t)
                                for (var a in t)
                                    i.d(s, a, function(e) {
                                        return t[e]
                                    }
                                    .bind(null, a));
                            return s
                        }
                        ,
                        i.n = function(t) {
                            var e = t && t.__esModule ? function() {
                                return t.default
                            }
                            : function() {
                                return t
                            }
                            ;
                            return i.d(e, "a", e),
                            e
                        }
                        ,
                        i.o = function(t, e) {
                            return Object.prototype.hasOwnProperty.call(t, e)
                        }
                        ,
                        i.p = "",
                        i(i.s = 53)
                    }([function(t, e) {
                        var i = t.exports = {
                            version: "2.6.12"
                        };
                        "number" == typeof __e && (__e = i)
                    }
                    , function(t, e, i) {
                        e.__esModule = !0,
                        e.default = function(t, e) {
                            if (!(t instanceof e))
                                throw new TypeError("Cannot call a class as a function")
                        }
                    }
                    , function(t, e) {
                        var i = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
                        "number" == typeof __g && (__g = i)
                    }
                    , function(t, e) {
                        var i = {}.hasOwnProperty;
                        t.exports = function(t, e) {
                            return i.call(t, e)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(2)
                          , a = i(0)
                          , r = i(36)
                          , n = i(8)
                          , o = i(3)
                          , u = function t(e, i, u) {
                            var h, l, c, d = e & t.F, f = e & t.G, p = e & t.S, m = e & t.P, y = e & t.B, v = e & t.W, _ = f ? a : a[i] || (a[i] = {}), g = _.prototype, S = f ? s : p ? s[i] : (s[i] || {}).prototype;
                            for (h in f && (u = i),
                            u)
                                (l = !d && S && void 0 !== S[h]) && o(_, h) || (c = l ? S[h] : u[h],
                                _[h] = f && "function" != typeof S[h] ? u[h] : y && l ? r(c, s) : v && S[h] == c ? function(t) {
                                    var e = function(e, i, s) {
                                        if (this instanceof t) {
                                            switch (arguments.length) {
                                            case 0:
                                                return new t;
                                            case 1:
                                                return new t(e);
                                            case 2:
                                                return new t(e,i)
                                            }
                                            return new t(e,i,s)
                                        }
                                        return t.apply(this, arguments)
                                    };
                                    return e.prototype = t.prototype,
                                    e
                                }(c) : m && "function" == typeof c ? r(Function.call, c) : c,
                                m && ((_.virtual || (_.virtual = {}))[h] = c,
                                e & t.R && g && !g[h] && n(g, h, c)))
                        };
                        u.F = 1,
                        u.G = 2,
                        u.S = 4,
                        u.P = 8,
                        u.B = 16,
                        u.W = 32,
                        u.U = 64,
                        u.R = 128,
                        t.exports = u
                    }
                    , function(t, e, i) {
                        var s = i(12)
                          , a = i(37)
                          , r = i(23)
                          , n = S.default;
                        e.f = i(6) ? S.default : function(t, e, i) {
                            if (s(t),
                            e = r(e, !0),
                            s(i),
                            a)
                                try {
                                    return n(t, e, i)
                                } catch (t) {}
                            if ("get"in i || "set"in i)
                                throw TypeError("Accessors not supported!");
                            return "value"in i && (t[e] = i.value),
                            t
                        }
                    }
                    , function(t, e, i) {
                        t.exports = !i(13)((function() {
                            return 7 != Object.defineProperty({}, "a", {
                                get: function() {
                                    return 7
                                }
                            }).a
                        }
                        ))
                    }
                    , function(t, e, i) {
                        e.__esModule = !0;
                        var s, a = (s = i(60)) && s.__esModule ? s : {
                            default: s
                        };
                        e.default = function() {
                            function t(t, e) {
                                for (var i = 0; i < e.length; i++) {
                                    var s = e[i];
                                    s.enumerable = s.enumerable || !1,
                                    s.configurable = !0,
                                    "value"in s && (s.writable = !0),
                                    (0,
                                    a.default)(t, s.key, s)
                                }
                            }
                            return function(e, i, s) {
                                return i && t(e.prototype, i),
                                s && t(e, s),
                                e
                            }
                        }()
                    }
                    , function(t, e, i) {
                        var s = i(5)
                          , a = i(18);
                        t.exports = i(6) ? function(t, e, i) {
                            return s.f(t, e, a(1, i))
                        }
                        : function(t, e, i) {
                            return t[e] = i,
                            t
                        }
                    }
                    , function(t, e) {
                        t.exports = function(t) {
                            return "object" == (void 0 === t ? "undefined" : (0,
                            T.default)(t)) ? null !== t : "function" == typeof t
                        }
                    }
                    , function(t, e, i) {
                        var s = i(70)
                          , a = i(20);
                        t.exports = function(t) {
                            return s(a(t))
                        }
                    }
                    , function(t, e, i) {
                        var s = i(22)("wks")
                          , a = i(17)
                          , r = i(2).Symbol
                          , n = "function" == typeof r;
                        (t.exports = function(t) {
                            return s[t] || (s[t] = n && r[t] || (n ? r : a)("Symbol." + t))
                        }
                        ).store = s
                    }
                    , function(t, e, i) {
                        var s = i(9);
                        t.exports = function(t) {
                            if (!s(t))
                                throw TypeError(t + " is not an object!");
                            return t
                        }
                    }
                    , function(t, e) {
                        t.exports = function(t) {
                            try {
                                return !!t()
                            } catch (t) {
                                return !0
                            }
                        }
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                        e.default = {
                            logger: null,
                            Signal: null,
                            Timer: null,
                            init: function(t) {
                                this.logger = t.logger,
                                this.Signal = t.Signal,
                                this.Timer = t.Timer
                            }
                        }
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = {}
                          , a = {
                            setTaf: function(t) {
                                return s = t
                            }
                        };
                        e.default = a,
                        a.EMediaNetType = {
                            ENET_WIFI: 0,
                            ENET_MOB: 1,
                            ENET_DISCONNECT: 2,
                            ENET_2G: 3,
                            ENET_3G: 4,
                            ENET_4G: 5,
                            ENET_UNKNOWN: 127
                        },
                        a.MediaUserId = function() {
                            this.lUid = 0,
                            this.sGuid = "",
                            this.sToken = "",
                            this.sUA = "",
                            this.sCookie = "",
                            this.iAppid = 0,
                            this.sStrUid = "",
                            this.sUAppId = "",
                            this.iNetType = 127
                        }
                        ,
                        a.MediaUserId.prototype._clone = function() {
                            return new a.MediaUserId
                        }
                        ,
                        a.MediaUserId.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaUserId.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaUserId.prototype.writeTo = function(t) {
                            t.writeInt64(0, this.lUid),
                            t.writeString(1, this.sGuid),
                            t.writeString(2, this.sToken),
                            t.writeString(3, this.sUA),
                            t.writeString(4, this.sCookie),
                            t.writeInt32(6, this.iAppid),
                            t.writeString(8, this.sStrUid),
                            t.writeString(9, this.sUAppId),
                            t.writeInt32(10, this.iNetType)
                        }
                        ,
                        a.MediaUserId.prototype.readFrom = function(t) {
                            this.lUid = t.readInt64(0, !1, this.lUid),
                            this.sGuid = t.readString(1, !1, this.sGuid),
                            this.sToken = t.readString(2, !1, this.sToken),
                            this.sUA = t.readString(3, !1, this.sUA),
                            this.sCookie = t.readString(4, !1, this.sCookie),
                            this.iAppid = t.readInt32(6, !1, this.iAppid),
                            this.sStrUid = t.readString(8, !1, this.sStrUid),
                            this.sUAppId = t.readString(9, !1, this.sUAppId),
                            this.iNetType = t.readInt32(10, !1, this.iNetType)
                        }
                        ,
                        a.LoginVerifyReq = function() {
                            this.tId = new a.MediaUserId,
                            this.iCookieDeadTime = 0
                        }
                        ,
                        a.LoginVerifyReq.prototype._clone = function() {
                            return new a.LoginVerifyReq
                        }
                        ,
                        a.LoginVerifyReq.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.LoginVerifyReq.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.LoginVerifyReq.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tId),
                            t.writeInt32(1, this.iCookieDeadTime)
                        }
                        ,
                        a.LoginVerifyReq.prototype.readFrom = function(t) {
                            this.tId = t.readStruct(0, !1, this.tId),
                            this.iCookieDeadTime = t.readInt32(1, !1, this.iCookieDeadTime)
                        }
                        ,
                        a.LoginVerifyRsp = function() {
                            this.iResCode = 0,
                            this.lUid = 0,
                            this.sCookie = "",
                            this.sUid = "",
                            this.iAppId = 0
                        }
                        ,
                        a.LoginVerifyRsp.prototype._clone = function() {
                            return new a.LoginVerifyRsp
                        }
                        ,
                        a.LoginVerifyRsp.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.LoginVerifyRsp.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.LoginVerifyRsp.prototype.writeTo = function(t) {
                            t.writeInt32(0, this.iResCode),
                            t.writeInt64(1, this.lUid),
                            t.writeString(2, this.sCookie),
                            t.writeString(3, this.sUid),
                            t.writeInt32(4, this.iAppId)
                        }
                        ,
                        a.LoginVerifyRsp.prototype.readFrom = function(t) {
                            this.iResCode = t.readInt32(0, !1, this.iResCode),
                            this.lUid = t.readInt64(1, !1, this.lUid),
                            this.sCookie = t.readString(2, !1, this.sCookie),
                            this.sUid = t.readString(3, !1, this.sUid),
                            this.iAppId = t.readInt32(4, !1, this.iAppId)
                        }
                        ,
                        a.RefreshCookieReq = function() {
                            this.tId = new a.MediaUserId,
                            this.iCookieDeadTime = 0
                        }
                        ,
                        a.RefreshCookieReq.prototype._clone = function() {
                            return new a.RefreshCookieReq
                        }
                        ,
                        a.RefreshCookieReq.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.RefreshCookieReq.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.RefreshCookieReq.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tId),
                            t.writeInt32(1, this.iCookieDeadTime)
                        }
                        ,
                        a.RefreshCookieReq.prototype.readFrom = function(t) {
                            this.tId = t.readStruct(0, !1, this.tId),
                            this.iCookieDeadTime = t.readInt32(1, !1, this.iCookieDeadTime)
                        }
                        ,
                        a.RefreshCookieRsp = function() {
                            this.iResCode = 0,
                            this.sCookie = ""
                        }
                        ,
                        a.RefreshCookieRsp.prototype._clone = function() {
                            return new a.RefreshCookieRsp
                        }
                        ,
                        a.RefreshCookieRsp.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.RefreshCookieRsp.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.RefreshCookieRsp.prototype.writeTo = function(t) {
                            t.writeInt32(0, this.iResCode),
                            t.writeString(1, this.sCookie)
                        }
                        ,
                        a.RefreshCookieRsp.prototype.readFrom = function(t) {
                            this.iResCode = t.readInt32(0, !1, this.iResCode),
                            this.sCookie = t.readString(1, !1, this.sCookie)
                        }
                        ,
                        a.MediaStreamInfo = function() {
                            this.sCdnName = "",
                            this.sStreamName = "",
                            this.sFlvUrl = "",
                            this.sFlvSuffix = "",
                            this.sHlsUrl = "",
                            this.sHlsSuffix = "",
                            this.iLineIndex = 0,
                            this.vFlvIPList = new s.Vector(new s.STRING),
                            this.iIsP2PSupport = 0,
                            this.sP2pUrl = "",
                            this.sP2pSuffix = "",
                            this.lFreeFlag = 0,
                            this.iIsHEVCSupport = 0,
                            this.vP2pIPList = new s.Vector(new s.STRING),
                            this.iPCPriorityRate = 0,
                            this.iWebPriorityRate = 0,
                            this.iMobilePriorityRate = 0,
                            this.sAdditionalParam = "",
                            this.mMediaStreamFormatInfo = new s.Map(new s.STRING,new a.MediaStreamFormatInfo)
                        }
                        ,
                        a.MediaStreamInfo.prototype._clone = function() {
                            return new a.MediaStreamInfo
                        }
                        ,
                        a.MediaStreamInfo.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaStreamInfo.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaStreamInfo.prototype.writeTo = function(t) {
                            t.writeString(0, this.sCdnName),
                            t.writeString(1, this.sStreamName),
                            t.writeString(2, this.sFlvUrl),
                            t.writeString(3, this.sFlvSuffix),
                            t.writeString(4, this.sHlsUrl),
                            t.writeString(5, this.sHlsSuffix),
                            t.writeInt32(6, this.iLineIndex),
                            t.writeVector(7, this.vFlvIPList),
                            t.writeInt32(8, this.iIsP2PSupport),
                            t.writeString(9, this.sP2pUrl),
                            t.writeString(10, this.sP2pSuffix),
                            t.writeInt64(11, this.lFreeFlag),
                            t.writeInt32(12, this.iIsHEVCSupport),
                            t.writeVector(13, this.vP2pIPList),
                            t.writeInt32(14, this.iPCPriorityRate),
                            t.writeInt32(15, this.iWebPriorityRate),
                            t.writeInt32(16, this.iMobilePriorityRate),
                            t.writeString(17, this.sAdditionalParam),
                            t.writeMap(18, this.mMediaStreamFormatInfo)
                        }
                        ,
                        a.MediaStreamInfo.prototype.readFrom = function(t) {
                            this.sCdnName = t.readString(0, !1, this.sCdnName),
                            this.sStreamName = t.readString(1, !1, this.sStreamName),
                            this.sFlvUrl = t.readString(2, !1, this.sFlvUrl),
                            this.sFlvSuffix = t.readString(3, !1, this.sFlvSuffix),
                            this.sHlsUrl = t.readString(4, !1, this.sHlsUrl),
                            this.sHlsSuffix = t.readString(5, !1, this.sHlsSuffix),
                            this.iLineIndex = t.readInt32(6, !1, this.iLineIndex),
                            this.vFlvIPList = t.readVector(7, !1, this.vFlvIPList),
                            this.iIsP2PSupport = t.readInt32(8, !1, this.iIsP2PSupport),
                            this.sP2pUrl = t.readString(9, !1, this.sP2pUrl),
                            this.sP2pSuffix = t.readString(10, !1, this.sP2pSuffix),
                            this.lFreeFlag = t.readInt64(11, !1, this.lFreeFlag),
                            this.iIsHEVCSupport = t.readInt32(12, !1, this.iIsHEVCSupport),
                            this.vP2pIPList = t.readVector(13, !1, this.vP2pIPList),
                            this.iPCPriorityRate = t.readInt32(14, !1, this.iPCPriorityRate),
                            this.iWebPriorityRate = t.readInt32(15, !1, this.iWebPriorityRate),
                            this.iMobilePriorityRate = t.readInt32(16, !1, this.iMobilePriorityRate),
                            this.sAdditionalParam = t.readString(17, !1, this.sAdditionalParam),
                            this.mMediaStreamFormatInfo = t.readMap(18, !1, this.mMediaStreamFormatInfo)
                        }
                        ,
                        a.QuitMediaGroupReq = function() {
                            this.tId = new a.MediaUserId,
                            this.vGroupId = new s.Vector(new s.STRING),
                            this.iGroupType = 0,
                            this.sRoomId = ""
                        }
                        ,
                        a.QuitMediaGroupReq.prototype._clone = function() {
                            return new a.QuitMediaGroupReq
                        }
                        ,
                        a.QuitMediaGroupReq.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.QuitMediaGroupReq.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.QuitMediaGroupReq.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tId),
                            t.writeVector(1, this.vGroupId),
                            t.writeInt32(2, this.iGroupType),
                            t.writeString(3, this.sRoomId)
                        }
                        ,
                        a.QuitMediaGroupReq.prototype.readFrom = function(t) {
                            this.tId = t.readStruct(0, !1, this.tId),
                            this.vGroupId = t.readVector(1, !1, this.vGroupId),
                            this.iGroupType = t.readInt32(2, !1, this.iGroupType),
                            this.sRoomId = t.readString(3, !1, this.sRoomId)
                        }
                        ,
                        a.QuitMediaGroupRsp = function() {
                            this.iCode = 0,
                            this.sMsg = "",
                            this.vGroupId = new s.Vector(new s.STRING),
                            this.iGroupType = 0,
                            this.sRoomId = ""
                        }
                        ,
                        a.QuitMediaGroupRsp.prototype._clone = function() {
                            return new a.QuitMediaGroupRsp
                        }
                        ,
                        a.QuitMediaGroupRsp.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.QuitMediaGroupRsp.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.QuitMediaGroupRsp.prototype.writeTo = function(t) {
                            t.writeInt32(0, this.iCode),
                            t.writeString(1, this.sMsg),
                            t.writeVector(2, this.vGroupId),
                            t.writeInt32(3, this.iGroupType),
                            t.writeString(4, this.sRoomId)
                        }
                        ,
                        a.QuitMediaGroupRsp.prototype.readFrom = function(t) {
                            this.iCode = t.readInt32(0, !1, this.iCode),
                            this.sMsg = t.readString(1, !1, this.sMsg),
                            this.vGroupId = t.readVector(2, !1, this.vGroupId),
                            this.iGroupType = t.readInt32(3, !1, this.iGroupType),
                            this.sRoomId = t.readString(4, !1, this.sRoomId)
                        }
                        ,
                        a.GetStreamInfoByRoomReq = function() {
                            this.tId = new a.MediaUserId,
                            this.sRoomId = "",
                            this.iMediaPackType = 0,
                            this.iLoopTime = 0,
                            this.iType = 0,
                            this.sArea = "",
                            this.mBusiParams = new s.Map(new s.STRING,new s.STRING),
                            this.iVGroupType = 0
                        }
                        ,
                        a.GetStreamInfoByRoomReq.prototype._clone = function() {
                            return new a.GetStreamInfoByRoomReq
                        }
                        ,
                        a.GetStreamInfoByRoomReq.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetStreamInfoByRoomReq.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetStreamInfoByRoomReq.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tId),
                            t.writeString(1, this.sRoomId),
                            t.writeInt32(2, this.iMediaPackType),
                            t.writeInt32(3, this.iLoopTime),
                            t.writeInt32(4, this.iType),
                            t.writeString(5, this.sArea),
                            t.writeMap(6, this.mBusiParams),
                            t.writeInt32(7, this.iVGroupType)
                        }
                        ,
                        a.GetStreamInfoByRoomReq.prototype.readFrom = function(t) {
                            this.tId = t.readStruct(0, !1, this.tId),
                            this.sRoomId = t.readString(1, !1, this.sRoomId),
                            this.iMediaPackType = t.readInt32(2, !1, this.iMediaPackType),
                            this.iLoopTime = t.readInt32(3, !1, this.iLoopTime),
                            this.iType = t.readInt32(4, !1, this.iType),
                            this.sArea = t.readString(5, !1, this.sArea),
                            this.mBusiParams = t.readMap(6, !1, this.mBusiParams),
                            this.iVGroupType = t.readInt32(7, !1, this.iVGroupType)
                        }
                        ,
                        a.GetStreamInfoByRoomRsp = function() {
                            this.tStreamInfoPack = new a.MediaStreamInfoPack,
                            this.sRoomId = "",
                            this.sRoomGroupId = "",
                            this.lModifyTime = 0,
                            this.tABInfo = new a.McABTestInfo,
                            this.lLiveId = 0,
                            this.lAnchorUid = 0
                        }
                        ,
                        a.GetStreamInfoByRoomRsp.prototype._clone = function() {
                            return new a.GetStreamInfoByRoomRsp
                        }
                        ,
                        a.GetStreamInfoByRoomRsp.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetStreamInfoByRoomRsp.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetStreamInfoByRoomRsp.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tStreamInfoPack),
                            t.writeString(1, this.sRoomId),
                            t.writeString(2, this.sRoomGroupId),
                            t.writeInt64(3, this.lModifyTime),
                            t.writeStruct(4, this.tABInfo),
                            t.writeInt64(5, this.lLiveId),
                            t.writeInt64(6, this.lAnchorUid)
                        }
                        ,
                        a.GetStreamInfoByRoomRsp.prototype.readFrom = function(t) {
                            this.tStreamInfoPack = t.readStruct(0, !1, this.tStreamInfoPack),
                            this.sRoomId = t.readString(1, !1, this.sRoomId),
                            this.sRoomGroupId = t.readString(2, !1, this.sRoomGroupId),
                            this.lModifyTime = t.readInt64(3, !1, this.lModifyTime),
                            this.tABInfo = t.readStruct(4, !1, this.tABInfo),
                            this.lLiveId = t.readInt64(5, !1, this.lLiveId),
                            this.lAnchorUid = t.readInt64(6, !1, this.lAnchorUid)
                        }
                        ,
                        a.MediaStreamInfoPack = function() {
                            this.mMediaStreamInfoPack = new s.Map(new s.STRING,new a.MediaStreamNameInfoPack)
                        }
                        ,
                        a.MediaStreamInfoPack.prototype._clone = function() {
                            return new a.MediaStreamInfoPack
                        }
                        ,
                        a.MediaStreamInfoPack.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaStreamInfoPack.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaStreamInfoPack.prototype.writeTo = function(t) {
                            t.writeMap(0, this.mMediaStreamInfoPack)
                        }
                        ,
                        a.MediaStreamInfoPack.prototype.readFrom = function(t) {
                            this.mMediaStreamInfoPack = t.readMap(0, !1, this.mMediaStreamInfoPack)
                        }
                        ,
                        a.MediaStreamNameInfoPack = function() {
                            this.vMediaStreamInfo = new s.Vector(new a.MediaStreamInfo),
                            this.vStreamGearInfo = new s.Vector(new a.StreamGearInfo),
                            this.sStreamGroupId = "",
                            this.lLiveCompatibleFlag = 0,
                            this.sAntiCode = "",
                            this.lStreamId = 0,
                            this.lUid = 0,
                            this.iStreamProperty = 0,
                            this.iBitRate = 0,
                            this.iStreamType = 0,
                            this.iPcDefaultBitRate = 0,
                            this.iWebDefaultBitRate = 0,
                            this.iMobileDefaultBitRate = 0,
                            this.sStreamBusiProperty = "",
                            this.sAdditionalParam = "",
                            this.iStreamCategory = 0,
                            this.iAppId = 0,
                            this.lNotifySeq = 0
                        }
                        ,
                        a.MediaStreamNameInfoPack.prototype._clone = function() {
                            return new a.MediaStreamNameInfoPack
                        }
                        ,
                        a.MediaStreamNameInfoPack.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaStreamNameInfoPack.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaStreamNameInfoPack.prototype.writeTo = function(t) {
                            t.writeVector(0, this.vMediaStreamInfo),
                            t.writeVector(1, this.vStreamGearInfo),
                            t.writeString(2, this.sStreamGroupId),
                            t.writeInt64(3, this.lLiveCompatibleFlag),
                            t.writeString(4, this.sAntiCode),
                            t.writeInt64(5, this.lStreamId),
                            t.writeInt64(6, this.lUid),
                            t.writeInt32(7, this.iStreamProperty),
                            t.writeInt32(8, this.iBitRate),
                            t.writeInt32(9, this.iStreamType),
                            t.writeInt32(10, this.iPcDefaultBitRate),
                            t.writeInt32(11, this.iWebDefaultBitRate),
                            t.writeInt32(12, this.iMobileDefaultBitRate),
                            t.writeString(13, this.sStreamBusiProperty),
                            t.writeString(14, this.sAdditionalParam),
                            t.writeInt32(15, this.iStreamCategory),
                            t.writeInt32(16, this.iAppId),
                            t.writeInt64(17, this.lNotifySeq)
                        }
                        ,
                        a.MediaStreamNameInfoPack.prototype.readFrom = function(t) {
                            this.vMediaStreamInfo = t.readVector(0, !1, this.vMediaStreamInfo),
                            this.vStreamGearInfo = t.readVector(1, !1, this.vStreamGearInfo),
                            this.sStreamGroupId = t.readString(2, !1, this.sStreamGroupId),
                            this.lLiveCompatibleFlag = t.readInt64(3, !1, this.lLiveCompatibleFlag),
                            this.sAntiCode = t.readString(4, !1, this.sAntiCode),
                            this.lStreamId = t.readInt64(5, !1, this.lStreamId),
                            this.lUid = t.readInt64(6, !1, this.lUid),
                            this.iStreamProperty = t.readInt32(7, !1, this.iStreamProperty),
                            this.iBitRate = t.readInt32(8, !1, this.iBitRate),
                            this.iStreamType = t.readInt32(9, !1, this.iStreamType),
                            this.iPcDefaultBitRate = t.readInt32(10, !1, this.iPcDefaultBitRate),
                            this.iWebDefaultBitRate = t.readInt32(11, !1, this.iWebDefaultBitRate),
                            this.iMobileDefaultBitRate = t.readInt32(12, !1, this.iMobileDefaultBitRate),
                            this.sStreamBusiProperty = t.readString(13, !1, this.sStreamBusiProperty),
                            this.sAdditionalParam = t.readString(14, !1, this.sAdditionalParam),
                            this.iStreamCategory = t.readInt32(15, !1, this.iStreamCategory),
                            this.iAppId = t.readInt32(16, !1, this.iAppId),
                            this.lNotifySeq = t.readInt64(17, !1, this.lNotifySeq)
                        }
                        ,
                        a.StreamGearInfo = function() {
                            this.sDisplayName = "",
                            this.iBitRate = 0,
                            this.iCodecType = 0,
                            this.iHEVCBitRate = -1,
                            this.tResolution = new a.MediaResolution,
                            this.sAdditionalParam = "",
                            this.mSupportFormat = new s.Map(new s.STRING,new s.INT64),
                            this.sBusiGearIndex = ""
                        }
                        ,
                        a.StreamGearInfo.prototype._clone = function() {
                            return new a.StreamGearInfo
                        }
                        ,
                        a.StreamGearInfo.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.StreamGearInfo.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.StreamGearInfo.prototype.writeTo = function(t) {
                            t.writeString(0, this.sDisplayName),
                            t.writeInt32(1, this.iBitRate),
                            t.writeInt32(2, this.iCodecType),
                            t.writeInt32(3, this.iHEVCBitRate),
                            t.writeStruct(4, this.tResolution),
                            t.writeString(5, this.sAdditionalParam),
                            t.writeMap(6, this.mSupportFormat),
                            t.writeString(7, this.sBusiGearIndex)
                        }
                        ,
                        a.StreamGearInfo.prototype.readFrom = function(t) {
                            this.sDisplayName = t.readString(0, !1, this.sDisplayName),
                            this.iBitRate = t.readInt32(1, !1, this.iBitRate),
                            this.iCodecType = t.readInt32(2, !1, this.iCodecType),
                            this.iHEVCBitRate = t.readInt32(3, !1, this.iHEVCBitRate),
                            this.tResolution = t.readStruct(4, !1, this.tResolution),
                            this.sAdditionalParam = t.readString(5, !1, this.sAdditionalParam),
                            this.mSupportFormat = t.readMap(6, !1, this.mSupportFormat),
                            this.sBusiGearIndex = t.readString(7, !1, this.sBusiGearIndex)
                        }
                        ,
                        a.MediaResolution = function() {
                            this.iWidth = 0,
                            this.iHeight = 0
                        }
                        ,
                        a.MediaResolution.prototype._clone = function() {
                            return new a.MediaResolution
                        }
                        ,
                        a.MediaResolution.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaResolution.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaResolution.prototype.writeTo = function(t) {
                            t.writeInt32(0, this.iWidth),
                            t.writeInt32(1, this.iHeight)
                        }
                        ,
                        a.MediaResolution.prototype.readFrom = function(t) {
                            this.iWidth = t.readInt32(0, !1, this.iWidth),
                            this.iHeight = t.readInt32(1, !1, this.iHeight)
                        }
                        ,
                        a.EMediaStreamType = {
                            EMST_UNKNOWN: -1,
                            EMST_WS_RTMP: 1,
                            EMST_AL_RTMP: 3,
                            EMST_HUYA_UDP: 5,
                            EMST_TX_RTMP: 6,
                            EMST_JS_RTMP: 8,
                            EMST_HUYA_RTMP: 15,
                            EMST_HW_RTMP: 16,
                            EMST_BD_RTMP: 17,
                            EMST_WS2_RTMP: 18,
                            EMST_SW_UDP: 20,
                            EMST_ZG_UDP: 21,
                            EMST_HWVR_RTMP: 22
                        },
                        a.EMediaStreamProperty = {
                            EOriginalStream: 1,
                            EMixStream: 2,
                            ECommStream: 3
                        },
                        a.McABTestInfo = function() {
                            this.mConfig = new s.Map(new s.STRING,new s.STRING),
                            this.sOexp = ""
                        }
                        ,
                        a.McABTestInfo.prototype._clone = function() {
                            return new a.McABTestInfo
                        }
                        ,
                        a.McABTestInfo.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.McABTestInfo.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.McABTestInfo.prototype.writeTo = function(t) {
                            t.writeMap(0, this.mConfig),
                            t.writeString(1, this.sOexp)
                        }
                        ,
                        a.McABTestInfo.prototype.readFrom = function(t) {
                            this.mConfig = t.readMap(0, !1, this.mConfig),
                            this.sOexp = t.readString(1, !1, this.sOexp)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeReq = function() {
                            this.tId = new a.MediaUserId,
                            this.sRoomId = "",
                            this.mpVariable = new s.Map(new s.STRING,new s.STRING),
                            this.iMediaPackType = -1,
                            this.mBusiParams = new s.Map(new s.STRING,new s.STRING),
                            this.iLoopTime = 0
                        }
                        ,
                        a.GetStreamInfoByRoomFakeReq.prototype._clone = function() {
                            return new a.GetStreamInfoByRoomFakeReq
                        }
                        ,
                        a.GetStreamInfoByRoomFakeReq.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeReq.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeReq.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tId),
                            t.writeString(1, this.sRoomId),
                            t.writeMap(2, this.mpVariable),
                            t.writeInt32(3, this.iMediaPackType),
                            t.writeMap(4, this.mBusiParams),
                            t.writeInt32(5, this.iLoopTime)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeReq.prototype.readFrom = function(t) {
                            this.tId = t.readStruct(0, !1, this.tId),
                            this.sRoomId = t.readString(1, !1, this.sRoomId),
                            this.mpVariable = t.readMap(2, !1, this.mpVariable),
                            this.iMediaPackType = t.readInt32(3, !1, this.iMediaPackType),
                            this.mBusiParams = t.readMap(4, !1, this.mBusiParams),
                            this.iLoopTime = t.readInt32(5, !1, this.iLoopTime)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeRsp = function() {
                            this.tStreamInfoPack = new a.MediaStreamInfoPack,
                            this.mpConfig = new s.Map(new s.STRING,new s.STRING),
                            this.sRoomId = "",
                            this.lAnchorUid = 0
                        }
                        ,
                        a.GetStreamInfoByRoomFakeRsp.prototype._clone = function() {
                            return new a.GetStreamInfoByRoomFakeRsp
                        }
                        ,
                        a.GetStreamInfoByRoomFakeRsp.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeRsp.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeRsp.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tStreamInfoPack),
                            t.writeMap(1, this.mpConfig),
                            t.writeString(2, this.sRoomId),
                            t.writeInt64(3, this.lAnchorUid)
                        }
                        ,
                        a.GetStreamInfoByRoomFakeRsp.prototype.readFrom = function(t) {
                            this.tStreamInfoPack = t.readStruct(0, !1, this.tStreamInfoPack),
                            this.mpConfig = t.readMap(1, !1, this.mpConfig),
                            this.sRoomId = t.readString(2, !1, this.sRoomId),
                            this.lAnchorUid = t.readInt64(3, !1, this.lAnchorUid)
                        }
                        ,
                        a.MediaStreamFormatInfo = function() {
                            this.sFormatName = "",
                            this.sUrl = "",
                            this.sSuffix = "",
                            this.vIPList = new s.Vector(new s.STRING),
                            this.iIsSupport = 0,
                            this.iRate = 0,
                            this.sAdditionalParam = "",
                            this.lFormatPropertyFlag = 0
                        }
                        ,
                        a.MediaStreamFormatInfo.prototype._clone = function() {
                            return new a.MediaStreamFormatInfo
                        }
                        ,
                        a.MediaStreamFormatInfo.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaStreamFormatInfo.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaStreamFormatInfo.prototype.writeTo = function(t) {
                            t.writeString(0, this.sFormatName),
                            t.writeString(1, this.sUrl),
                            t.writeString(2, this.sSuffix),
                            t.writeVector(3, this.vIPList),
                            t.writeInt32(4, this.iIsSupport),
                            t.writeInt32(5, this.iRate),
                            t.writeString(6, this.sAdditionalParam),
                            t.writeInt64(7, this.lFormatPropertyFlag)
                        }
                        ,
                        a.MediaStreamFormatInfo.prototype.readFrom = function(t) {
                            this.sFormatName = t.readString(0, !1, this.sFormatName),
                            this.sUrl = t.readString(1, !1, this.sUrl),
                            this.sSuffix = t.readString(2, !1, this.sSuffix),
                            this.vIPList = t.readVector(3, !1, this.vIPList),
                            this.iIsSupport = t.readInt32(4, !1, this.iIsSupport),
                            this.iRate = t.readInt32(5, !1, this.iRate),
                            this.sAdditionalParam = t.readString(6, !1, this.sAdditionalParam),
                            this.lFormatPropertyFlag = t.readInt64(7, !1, this.lFormatPropertyFlag)
                        }
                        ,
                        a.StreamChangeNotice = function() {
                            this.tStreamPack = new a.MediaStreamInfoPack,
                            this.sRoomId = "",
                            this.lNotifySeq = 0
                        }
                        ,
                        a.StreamChangeNotice.prototype._clone = function() {
                            return new a.StreamChangeNotice
                        }
                        ,
                        a.StreamChangeNotice.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.StreamChangeNotice.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.StreamChangeNotice.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tStreamPack),
                            t.writeString(1, this.sRoomId),
                            t.writeInt64(2, this.lNotifySeq)
                        }
                        ,
                        a.StreamChangeNotice.prototype.readFrom = function(t) {
                            this.tStreamPack = t.readStruct(0, !1, this.tStreamPack),
                            this.sRoomId = t.readString(1, !1, this.sRoomId),
                            this.lNotifySeq = t.readInt64(2, !1, this.lNotifySeq)
                        }
                        ,
                        a.RoomStreamChangeNotic = function() {
                            this.sRoomId = "",
                            this.sSeq = "",
                            this.iDelay = 0
                        }
                        ,
                        a.RoomStreamChangeNotic.prototype._clone = function() {
                            return new a.RoomStreamChangeNotic
                        }
                        ,
                        a.RoomStreamChangeNotic.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.RoomStreamChangeNotic.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.RoomStreamChangeNotic.prototype.writeTo = function(t) {
                            t.writeString(0, this.sRoomId),
                            t.writeString(1, this.sSeq),
                            t.writeInt32(2, this.iDelay)
                        }
                        ,
                        a.RoomStreamChangeNotic.prototype.readFrom = function(t) {
                            this.sRoomId = t.readString(0, !1, this.sRoomId),
                            this.sSeq = t.readString(1, !1, this.sSeq),
                            this.iDelay = t.readInt32(2, !1, this.iDelay)
                        }
                        ,
                        a.MediaChangeUpStreamNotic = function() {
                            this.iStreamtype = 0,
                            this.sUpUrl = "",
                            this.vIps = new s.Vector(new s.STRING)
                        }
                        ,
                        a.MediaChangeUpStreamNotic.prototype._clone = function() {
                            return new a.MediaChangeUpStreamNotic
                        }
                        ,
                        a.MediaChangeUpStreamNotic.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaChangeUpStreamNotic.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaChangeUpStreamNotic.prototype.writeTo = function(t) {
                            t.writeInt32(0, this.iStreamtype),
                            t.writeString(1, this.sUpUrl),
                            t.writeVector(2, this.vIps)
                        }
                        ,
                        a.MediaChangeUpStreamNotic.prototype.readFrom = function(t) {
                            this.iStreamtype = t.readInt32(0, !1, this.iStreamtype),
                            this.sUpUrl = t.readString(1, !1, this.sUpUrl),
                            this.vIps = t.readVector(2, !1, this.vIps)
                        }
                        ,
                        a.MediaStopStreamNotice = function() {
                            this.iAppId = 0,
                            this.lSequence = 0,
                            this.sStreamName = "",
                            this.sReason = "",
                            this.iReason = 0,
                            this.iFlag = 0
                        }
                        ,
                        a.MediaStopStreamNotice.prototype._clone = function() {
                            return new a.MediaStopStreamNotice
                        }
                        ,
                        a.MediaStopStreamNotice.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.MediaStopStreamNotice.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.MediaStopStreamNotice.prototype.writeTo = function(t) {
                            t.writeInt32(0, this.iAppId),
                            t.writeInt64(1, this.lSequence),
                            t.writeString(2, this.sStreamName),
                            t.writeString(3, this.sReason),
                            t.writeInt32(4, this.iReason),
                            t.writeInt32(5, this.iFlag)
                        }
                        ,
                        a.MediaStopStreamNotice.prototype.readFrom = function(t) {
                            this.iAppId = t.readInt32(0, !1, this.iAppId),
                            this.lSequence = t.readInt64(1, !1, this.lSequence),
                            this.sStreamName = t.readString(2, !1, this.sStreamName),
                            this.sReason = t.readString(3, !1, this.sReason),
                            this.iReason = t.readInt32(4, !1, this.iReason),
                            this.iFlag = t.readInt32(5, !1, this.iFlag)
                        }
                        ,
                        a.GetMediaConfigReq = function() {
                            this.tId = new a.MediaUserId,
                            this.mpVariable = new s.Map(new s.STRING,new s.STRING)
                        }
                        ,
                        a.GetMediaConfigReq.prototype._clone = function() {
                            return new a.GetMediaConfigReq
                        }
                        ,
                        a.GetMediaConfigReq.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetMediaConfigReq.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetMediaConfigReq.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tId),
                            t.writeMap(1, this.mpVariable)
                        }
                        ,
                        a.GetMediaConfigReq.prototype.readFrom = function(t) {
                            this.tId = t.readStruct(0, !1, this.tId),
                            this.mpVariable = t.readMap(1, !1, this.mpVariable)
                        }
                        ,
                        a.GetMediaConfigRsp = function() {
                            this.mpConfig = new s.Map(new s.STRING,new s.STRING)
                        }
                        ,
                        a.GetMediaConfigRsp.prototype._clone = function() {
                            return new a.GetMediaConfigRsp
                        }
                        ,
                        a.GetMediaConfigRsp.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetMediaConfigRsp.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetMediaConfigRsp.prototype.writeTo = function(t) {
                            t.writeMap(0, this.mpConfig)
                        }
                        ,
                        a.GetMediaConfigRsp.prototype.readFrom = function(t) {
                            this.mpConfig = t.readMap(0, !1, this.mpConfig)
                        }
                        ,
                        a.GetAntiCodeForStreamReq = function() {
                            this.tId = new a.MediaUserId,
                            this.sStreamName = ""
                        }
                        ,
                        a.GetAntiCodeForStreamReq.prototype._clone = function() {
                            return new a.GetAntiCodeForStreamReq
                        }
                        ,
                        a.GetAntiCodeForStreamReq.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetAntiCodeForStreamReq.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetAntiCodeForStreamReq.prototype.writeTo = function(t) {
                            t.writeStruct(0, this.tId),
                            t.writeString(1, this.sStreamName)
                        }
                        ,
                        a.GetAntiCodeForStreamReq.prototype.readFrom = function(t) {
                            this.tId = t.readStruct(0, !1, this.tId),
                            this.sStreamName = t.readString(1, !1, this.sStreamName)
                        }
                        ,
                        a.GetAntiCodeForStreamRsp = function() {
                            this.sAntiCode = "",
                            this.sStreamName = ""
                        }
                        ,
                        a.GetAntiCodeForStreamRsp.prototype._clone = function() {
                            return new a.GetAntiCodeForStreamRsp
                        }
                        ,
                        a.GetAntiCodeForStreamRsp.prototype._write = function(t, e, i) {
                            t.writeStruct(e, i)
                        }
                        ,
                        a.GetAntiCodeForStreamRsp.prototype._read = function(t, e, i) {
                            return t.readStruct(e, !0, i)
                        }
                        ,
                        a.GetAntiCodeForStreamRsp.prototype.writeTo = function(t) {
                            t.writeString(0, this.sAntiCode),
                            t.writeString(1, this.sStreamName)
                        }
                        ,
                        a.GetAntiCodeForStreamRsp.prototype.readFrom = function(t) {
                            this.sAntiCode = t.readString(0, !1, this.sAntiCode),
                            this.sStreamName = t.readString(1, !1, this.sStreamName)
                        }
                    }
                    , function(t, e) {
                        t.exports = !0
                    }
                    , function(t, e) {
                        var i = 0
                          , s = Math.random();
                        t.exports = function(t) {
                            return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++i + s).toString(36))
                        }
                    }
                    , function(t, e) {
                        t.exports = function(t, e) {
                            return {
                                enumerable: !(1 & t),
                                configurable: !(2 & t),
                                writable: !(4 & t),
                                value: e
                            }
                        }
                    }
                    , function(t, e, i) {
                        var s = i(20);
                        t.exports = function(t) {
                            return Object(s(t))
                        }
                    }
                    , function(t, e) {
                        t.exports = function(t) {
                            if (null == t)
                                throw TypeError("Can't call method on  " + t);
                            return t
                        }
                    }
                    , function(t, e, i) {
                        var s = i(22)("keys")
                          , a = i(17);
                        t.exports = function(t) {
                            return s[t] || (s[t] = a(t))
                        }
                    }
                    , function(t, e, i) {
                        var s = i(0)
                          , a = i(2)
                          , r = a["__core-js_shared__"] || (a["__core-js_shared__"] = {});
                        (t.exports = function(t, e) {
                            return r[t] || (r[t] = void 0 !== e ? e : {})
                        }
                        )("versions", []).push({
                            version: s.version,
                            mode: i(16) ? "pure" : "global",
                            copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
                        })
                    }
                    , function(t, e, i) {
                        var s = i(9);
                        t.exports = function(t, e) {
                            if (!s(t))
                                return t;
                            var i, a;
                            if (e && "function" == typeof (i = t.toString) && !s(a = i.call(t)))
                                return a;
                            if ("function" == typeof (i = t.valueOf) && !s(a = i.call(t)))
                                return a;
                            if (!e && "function" == typeof (i = t.toString) && !s(a = i.call(t)))
                                return a;
                            throw TypeError("Can't convert object to primitive value")
                        }
                    }
                    , function(t, e) {
                        var i = Math.ceil
                          , s = Math.floor;
                        t.exports = function(t) {
                            return isNaN(t = +t) ? 0 : (t > 0 ? s : i)(t)
                        }
                    }
                    , function(t, e) {
                        t.exports = {}
                    }
                    , function(t, e, i) {
                        var s = i(12)
                          , a = i(69)
                          , r = i(28)
                          , n = i(21)("IE_PROTO")
                          , o = function() {}
                          , u = function() {
                            var t, e = i(38)("iframe"), s = r.length;
                            for (e.style.display = "none",
                            i(74).appendChild(e),
                            e.src = "javascript:",
                            (t = e.contentWindow.document).open(),
                            t.write("<script>document.F=Object<\/script>"),
                            t.close(),
                            u = t.F; s--; )
                                delete u.prototype[r[s]];
                            return u()
                        };
                        t.exports = v.default || function(t, e) {
                            var i;
                            return null !== t ? (o.prototype = s(t),
                            i = new o,
                            o.prototype = null,
                            i[n] = t) : i = u(),
                            void 0 === e ? i : a(i, e)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(42)
                          , a = i(28);
                        t.exports = y.default || function(t) {
                            return s(t, a)
                        }
                    }
                    , function(t, e) {
                        t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
                    }
                    , function(t, e, i) {
                        var s = i(5).f
                          , a = i(3)
                          , r = i(11)("toStringTag");
                        t.exports = function(t, e, i) {
                            t && !a(t = i ? t : t.prototype, r) && s(t, r, {
                                configurable: !0,
                                value: e
                            })
                        }
                    }
                    , function(t, e, i) {
                        e.f = i(11)
                    }
                    , function(t, e, i) {
                        var s = i(2)
                          , a = i(0)
                          , r = i(16)
                          , n = i(30)
                          , o = i(5).f;
                        t.exports = function(t) {
                            var e = a.Symbol || (a.Symbol = r ? {} : s.Symbol || {});
                            "_" == t.charAt(0) || t in e || o(e, t, {
                                value: n.f(t)
                            })
                        }
                    }
                    , function(t, e) {
                        e.f = {}.propertyIsEnumerable
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = y(i(34))
                          , a = y(i(55))
                          , r = y(i(1))
                          , n = y(i(7))
                          , o = y(i(63))
                          , u = y(i(89))
                          , h = y(i(15))
                          , l = y(i(14))
                          , c = y(i(97))
                          , d = y(i(47))
                          , f = y(i(48))
                          , p = y(i(49))
                          , m = y(i(50));
                        function y(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var v = {
                            "web_magics-audi_test": 173,
                            "web_magics-audi": 174
                        }
                          , _ = new (function(t) {
                            function e() {
                                (0,
                                r.default)(this, e);
                                var t = (0,
                                o.default)(this, (e.__proto__ || (0,
                                a.default)(e)).call(this));
                                return t.isLogin = !1,
                                t.config = null,
                                t.appId = 0,
                                t.sHuYaUA = "media_" + m.default[2] + "&2405131120&sea",
                                t.mediaUid = Math.floor(1e5 * Math.random() + 999999999),
                                t.sUid = "",
                                t.sToken = "",
                                t.sCookie = "",
                                t.deviceId = "",
                                t.bAnonymous = 0,
                                t.netType = t.getNetType(),
                                t.mediaUserId = new h.default.MediaUserId,
                                t._refreshCookieReq = new h.default.RefreshCookieReq,
                                t._refreshCookieTs = 0,
                                t._onLoginMediaBind = t._onLoginMedia.bind(t),
                                t._onRefreshCookieBind = t._onRefreshCookie.bind(t),
                                t._onGetMediaCofigBind = t._onGetMediaCofig.bind(t),
                                t.Events = {
                                    LOGIN_SUC: "LOGIN_SUC",
                                    ON_GET_CONFIG: "ON_GET_CONFIG"
                                },
                                t.PlayerClass = null,
                                t.anonymousuid = 0,
                                t
                            }
                            return (0,
                            u.default)(e, t),
                            (0,
                            n.default)(e, [{
                                key: "isSupported",
                                value: function() {
                                    return 1 != Number(localStorage._closeMse) && window.HYPlayer && window.HYPlayer.isSupported()
                                }
                            }, {
                                key: "getMediaUserId",
                                value: function() {
                                    return this.mediaUserId.lUid = 0 == this.mediaUid ? this.anonymousuid : this.mediaUid,
                                    this.mediaUserId.sGuid = this.deviceId,
                                    this.mediaUserId.sToken = this.sToken,
                                    this.mediaUserId.sUA = this.sHuYaUA,
                                    this.mediaUserId.sCookie = this.sCookie,
                                    this.mediaUserId.iAppid = this.appId,
                                    this.mediaUserId.bAnonymous = this.bAnonymous,
                                    this.mediaUserId.sStrUid = this.sUid,
                                    this.mediaUserId.sUAppId = this.appId,
                                    this.mediaUserId.iNetType = this.netType,
                                    this.mediaUserId
                                }
                            }, {
                                key: "setAppId",
                                value: function(t) {
                                    v.hasOwnProperty(t) ? this.appId = v[t] : this.appId = Number(t) || 81
                                }
                            }, {
                                key: "setProperties",
                                value: function(t) {
                                    t.hasOwnProperty("deviceId") && (this.deviceId = t.deviceId)
                                }
                            }, {
                                key: "createPlayer",
                                value: function(t) {
                                    return new this.PlayerClass(t)
                                }
                            }, {
                                key: "loginMedia",
                                value: function(t) {
                                    t.hasOwnProperty("sToken") && (this.sToken = t.sToken),
                                    t.hasOwnProperty("uid") && (this.mediaUid = t.uid,
                                    this.sUid = t.uid),
                                    this.isLogin || this._loginMedia()
                                }
                            }, {
                                key: "_loginMedia",
                                value: function() {
                                    var t = new h.default.LoginVerifyReq;
                                    t.tId = this.getMediaUserId(),
                                    l.default.logger.log("Main._loginMedia", t.tId.lUid, t.tId.sGuid, t),
                                    l.default.Signal.sendWup(d.default.MEDIAUISEA, d.default.LOGIN_VERIFY, t, this._onLoginMediaBind)
                                }
                            }, {
                                key: "_onLoginMedia",
                                value: function(t) {
                                    l.default.logger.log("Main._onLoginMedia", t.iResCode),
                                    0 === t.iResCode && (this.isLogin = !0,
                                    this.sCookie = t.sCookie,
                                    l.default.Timer.add(this._refreshCookie, this, 1e3),
                                    this._getMediaConfig(),
                                    this.trigger(this.Events.LOGIN_SUC))
                                }
                            }, {
                                key: "_getMediaConfig",
                                value: function() {
                                    var t = new h.default.GetMediaConfigReq;
                                    t.tId = this.getMediaUserId(),
                                    l.default.Signal.sendWup(d.default.MEDIAUISEA, d.default.GET_MEDIA_CONFIG, t, this._onGetMediaCofigBind)
                                }
                            }, {
                                key: "_onGetMediaCofig",
                                value: function(t) {
                                    var e = t.mpConfig.value;
                                    if (1 == localStorage._closeCfgH265 && e && e.hasOwnProperty("nimoConfig")) {
                                        var i = JSON.parse(e.nimoConfig);
                                        i.isConfigSupportH265 = 0,
                                        e.nimoConfig = (0,
                                        s.default)(i)
                                    }
                                    if (this.config = e,
                                    e && e.hasOwnProperty("nimoConfig"))
                                        try {
                                            var a = JSON.parse(e.nimoConfig);
                                            p.default.setConfig(a),
                                            f.default.setConfig(a)
                                        } catch (t) {
                                            l.default.logger.log("get config error")
                                        }
                                    this.trigger(this.Events.ON_GET_CONFIG)
                                }
                            }, {
                                key: "_refreshCookie",
                                value: function(t, e) {
                                    this.isLogin && (0 === this._refreshCookieTs ? this._refreshCookieTs = t : t - this._refreshCookieTs > 6e4 && (this._refreshCookieTs = t,
                                    this._refreshCookieReq.tId = this.getMediaUserId(),
                                    l.default.Signal.sendWup(d.default.MEDIAUISEA, d.default.REFRESH_COOKIE, this._refreshCookieReq, this._onRefreshCookieBind)))
                                }
                            }, {
                                key: "_onRefreshCookie",
                                value: function(t) {
                                    this.sCookie = t.sCookie
                                }
                            }, {
                                key: "getNetType",
                                value: function() {
                                    var t = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
                                    if (t)
                                        if (t.effectiveType) {
                                            if ("4g" === t.effectiveType)
                                                return h.default.EMediaNetType.ENET_4G;
                                            if ("3g" === t.effectiveType)
                                                return h.default.EMediaNetType.ENET_3G;
                                            if ("2g" === t.effectiveType || "slow-2g" === t.effectiveType)
                                                return h.default.EMediaNetType.ENET_2G
                                        } else if (t.type && "wifi" === t.type)
                                            return h.default.EMediaNetType.ENET_WIFI;
                                    return h.default.EMediaNetType.ENET_UNKNOWN
                                }
                            }]),
                            e
                        }(c.default));
                        e.default = _
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(54),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        var s = i(3)
                          , a = i(19)
                          , r = i(21)("IE_PROTO")
                          , n = Object.prototype;
                        t.exports = m.default || function(t) {
                            return t = a(t),
                            s(t, r) ? t[r] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? n : null
                        }
                    }
                    , function(t, e, i) {
                        var s = i(59);
                        t.exports = function(t, e, i) {
                            if (s(t),
                            void 0 === e)
                                return t;
                            switch (i) {
                            case 1:
                                return function(i) {
                                    return t.call(e, i)
                                }
                                ;
                            case 2:
                                return function(i, s) {
                                    return t.call(e, i, s)
                                }
                                ;
                            case 3:
                                return function(i, s, a) {
                                    return t.call(e, i, s, a)
                                }
                            }
                            return function() {
                                return t.apply(e, arguments)
                            }
                        }
                    }
                    , function(t, e, i) {
                        t.exports = !i(6) && !i(13)((function() {
                            return 7 != Object.defineProperty(i(38)("div"), "a", {
                                get: function() {
                                    return 7
                                }
                            }).a
                        }
                        ))
                    }
                    , function(t, e, i) {
                        var s = i(9)
                          , a = i(2).document
                          , r = s(a) && s(a.createElement);
                        t.exports = function(t) {
                            return r ? a.createElement(t) : {}
                        }
                    }
                    , function(t, e, i) {
                        e.__esModule = !0;
                        var s = n(i(64))
                          , a = n(i(79))
                          , r = "function" == typeof a.default && "symbol" == (0,
                        T.default)(s.default) ? function(t) {
                            return void 0 === t ? "undefined" : (0,
                            T.default)(t)
                        }
                        : function(t) {
                            return t && "function" == typeof a.default && t.constructor === a.default && t !== a.default.prototype ? "symbol" : void 0 === t ? "undefined" : (0,
                            T.default)(t)
                        }
                        ;
                        function n(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        e.default = "function" == typeof a.default && "symbol" === r(s.default) ? function(t) {
                            return void 0 === t ? "undefined" : r(t)
                        }
                        : function(t) {
                            return t && "function" == typeof a.default && t.constructor === a.default && t !== a.default.prototype ? "symbol" : void 0 === t ? "undefined" : r(t)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(16)
                          , a = i(4)
                          , r = i(41)
                          , n = i(8)
                          , o = i(25)
                          , u = i(68)
                          , h = i(29)
                          , l = i(35)
                          , c = i(11)("iterator")
                          , d = !([].keys && "next"in [].keys())
                          , f = function() {
                            return this
                        };
                        t.exports = function(t, e, i, p, m, y, v) {
                            u(i, e, p);
                            var _, g, S, T = function(t) {
                                if (!d && t in I)
                                    return I[t];
                                switch (t) {
                                case "keys":
                                case "values":
                                    return function() {
                                        return new i(this,t)
                                    }
                                }
                                return function() {
                                    return new i(this,t)
                                }
                            }, P = e + " Iterator", k = "values" == m, E = !1, I = t.prototype, b = I[c] || I["@@iterator"] || m && I[m], C = b || T(m), w = m ? k ? T("entries") : C : void 0, A = "Array" == e && I.entries || b;
                            if (A && (S = l(A.call(new t))) !== Object.prototype && S.next && (h(S, P, !0),
                            s || "function" == typeof S[c] || n(S, c, f)),
                            k && b && "values" !== b.name && (E = !0,
                            C = function() {
                                return b.call(this)
                            }
                            ),
                            s && !v || !d && !E && I[c] || n(I, c, C),
                            o[e] = C,
                            o[P] = f,
                            m)
                                if (_ = {
                                    values: k ? C : T("values"),
                                    keys: y ? C : T("keys"),
                                    entries: w
                                },
                                v)
                                    for (g in _)
                                        g in I || r(I, g, _[g]);
                                else
                                    a(a.P + a.F * (d || E), e, _);
                            return _
                        }
                    }
                    , function(t, e, i) {
                        t.exports = i(8)
                    }
                    , function(t, e, i) {
                        var s = i(3)
                          , a = i(10)
                          , r = i(71)(!1)
                          , n = i(21)("IE_PROTO");
                        t.exports = function(t, e) {
                            var i, o = a(t), u = 0, h = [];
                            for (i in o)
                                i != n && s(o, i) && h.push(i);
                            for (; e.length > u; )
                                s(o, i = e[u++]) && (~r(h, i) || h.push(i));
                            return h
                        }
                    }
                    , function(t, e) {
                        var i = {}.toString;
                        t.exports = function(t) {
                            return i.call(t).slice(8, -1)
                        }
                    }
                    , function(t, e) {
                        e.f = p.default
                    }
                    , function(t, e, i) {
                        var s = i(42)
                          , a = i(28).concat("length", "prototype");
                        e.f = f.default || function(t) {
                            return s(t, a)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(32)
                          , a = i(18)
                          , r = i(10)
                          , n = i(23)
                          , o = i(3)
                          , u = i(37)
                          , h = d.default;
                        e.f = i(6) ? h : function(t, e) {
                            if (t = r(t),
                            e = n(e, !0),
                            u)
                                try {
                                    return h(t, e)
                                } catch (t) {}
                            if (o(t, e))
                                return a(!s.f.call(t, e), t[e])
                        }
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s, a = (s = i(1)) && s.__esModule ? s : {
                            default: s
                        }, r = function t() {
                            (0,
                            a.default)(this, t)
                        };
                        r.MEDIAUISEA = "mediauisea",
                        r.GET_MEDIA_CONFIG = "getMediaConfig",
                        r.GET_INFO_FROM_VGM = "getInfoFromVGM",
                        r.CHECK_ID_BY_STR = "checkIdByStr",
                        r.LOGIN_VERIFY = "loginVerify",
                        r.REFRESH_COOKIE = "refreshCookie",
                        r.JOIN_GROUP = "joinGroup",
                        r.QUIT_GROUP = "quitGroup",
                        r.GET_STREAM_INFO_BY_ROOM = "getStreamInfoByRoom",
                        r.GET_STREAM_INFO_BY_STREAMNAME = "getStreamInfoByStreamName",
                        r.GET_STREAM_INFO_BY_ROOM_FAKE = "getStreamInfoByRoomFake",
                        e.default = r
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = n(i(34))
                          , a = n(i(1))
                          , r = n(i(7));
                        function n(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var o = "ctrlConfig"
                          , u = new (function() {
                            function t() {
                                (0,
                                a.default)(this, t),
                                this._localKey = "_" + o,
                                this._config = {},
                                this._initLocalConfig(),
                                this.CTRL_KEY = {
                                    SWITCH_PLAY: "switchPlay",
                                    SWITCH_LEVEL: "switchLevel",
                                    ANTICODE: "anticode",
                                    OPEN_SDK_STREAM: "openSdkStream"
                                }
                            }
                            return (0,
                            r.default)(t, [{
                                key: "_initLocalConfig",
                                value: function() {
                                    localStorage.hasOwnProperty(this._localKey) ? this._config = JSON.parse(localStorage.getItem(this._localKey)) : this._config = {}
                                }
                            }, {
                                key: "setConfig",
                                value: function(t) {
                                    t && t.hasOwnProperty(o) ? (this._config = t[o],
                                    localStorage.setItem(this._localKey, (0,
                                    s.default)(this._config))) : (this._config = {},
                                    localStorage.removeItem(this._localKey))
                                }
                            }, {
                                key: "isOpen",
                                value: function(t, e) {
                                    if (this._config.hasOwnProperty(e)) {
                                        var i = this._config[e];
                                        return "all" === i || -1 !== i.indexOf(t + "")
                                    }
                                    return !1
                                }
                            }]),
                            t
                        }());
                        e.default = u
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = r(i(1))
                          , a = r(i(7));
                        function r(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var n = new (function() {
                            function t() {
                                (0,
                                s.default)(this, t),
                                this.bitrates = {
                                    6e3: "_veryhigh",
                                    2500: "_high",
                                    1e3: "_mid",
                                    500: "_low",
                                    250: "_verylow",
                                    0: ""
                                }
                            }
                            return (0,
                            a.default)(t, [{
                                key: "setConfig",
                                value: function(t) {
                                    t && t.hasOwnProperty("testRooms") ? localStorage._testRooms = t.testRooms : localStorage.removeItem("_testRooms")
                                }
                            }, {
                                key: "isTest",
                                value: function(t) {
                                    var e = localStorage._testRooms;
                                    return e && -1 !== e.indexOf(t.toString())
                                }
                            }, {
                                key: "getStreamName",
                                value: function(t, e, i) {
                                    return i && (t += this.bitrates[e]),
                                    t
                                }
                            }]),
                            t
                        }());
                        e.default = n
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                        e.default = {
                            1: "web",
                            2: "wap",
                            web: 1,
                            wap: 2
                        }
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                        e.default = {
                            p2p: "video/p2p",
                            flv: "video/flv",
                            mp4: "video/mp4",
                            hls: "video/hls",
                            playback: "video/playback",
                            f_p2p: "p2p",
                            f_flv: "flv",
                            f_hls: "hls",
                            f_mp4: "mp4",
                            isLivingFormat: function(t) {
                                return t === this.f_p2p || t === this.f_flv || t === this.f_hls
                            }
                        }
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s, a = (s = i(1)) && s.__esModule ? s : {
                            default: s
                        }, r = function t() {
                            (0,
                            a.default)(this, t)
                        };
                        r.VIDEO_ERROR = "VIDEO_ERROR",
                        r.VIDEO_FRAME_LOADED = "VIDEO_FRAME_LOADED",
                        r.VIDEO_PLAY = "VIDEO_PLAY",
                        r.VIDEO_REAL_PLAY = "VIDEO_REAL_PLAY",
                        r.VIDEO_STOP = "VIDEO_STOP",
                        r.VIDEO_PAUSE = "VIDEO_PAUSE",
                        r.VIDEO_WAITING = "VIDEO_WAITING",
                        r.VIDEO_SEEK = "VIDEO_SEEK",
                        r.VIDEO_ENDED = "VIDEO_ENDED",
                        r.ANCHOR_STOP = "ANCHOR_STOP",
                        r.PLAY_STATUS = "PLAY_STATUS",
                        r.PLAY_DOWNLINK_INFO = "PLAY_DOWNLINK_INFO",
                        r.PLAY_TIME = "PLAY_TIME",
                        r.LINK_TIMEOUT = "LINK_TIMEOUT",
                        r.LOAD_DATA_TIMEOUT = "LOAD_DATA_TIMEOUT",
                        r.LINK_UNAVAILABLE = "LINK_UNAVAILABLE",
                        r.NO_DATA_RECEIVED = "NO_DATA_RECEIVED",
                        r.VIDEO_CLOSE = "VIDEO_CLOSE",
                        r.METADATA = "METADATA",
                        r.VIDEO_FRAME_JITTERBUFFER = "VIDEO_FRAME_JITTERBUFFER",
                        r.AUTO_PLAY_ERR = "AUTO_PLAY_ERR",
                        r.PLAY_TIMEOUT = "PLAY_TIMEOUT",
                        r.SEEK_TIMEOUT = "SEEK_TIMEOUT",
                        r.MEDIA_STREAMSTOP_NOTICE = "MEDIA_STREAMSTOP_NOTICE",
                        r.ROOM_STREAM_CHANGE = "ROOM_STREAM_CHANGE",
                        r.ROOM_NO_STREAM = "ROOM_NO_STREAM",
                        r.SWITCH_DONE = "SWITCH_DONE",
                        r.UPDATE_INTERSITY = "UPDATE_INTERSITY",
                        r.MEDIA_STREAM_UPDATE = "MEDIA_STREAM_UPDATE",
                        r.MEDIA_STREAM_INFO_ERROR = "MEDIA_STREAM_INFO_ERROR",
                        r.NEED_UPDATE_M3U8 = "NEED_UPDATE_M3U8",
                        r.PLAYBACK_M3U8_UPDATED = "PLAYBACK_M3U8_UPDATED",
                        r.SEI_INFO = "SEI_INFO",
                        r.AUTO_BITRATE_CHANGED = "AUTO_BITRATE_CHANGED",
                        r.BROWSER_PAUSE = "BROWSER_PAUSE",
                        e.default = r
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = f(i(15))
                          , a = f(i(33))
                          , r = f(i(48))
                          , n = f(i(49))
                          , o = f(i(98))
                          , u = f(i(14))
                          , h = f(i(99))
                          , l = f(i(103))
                          , c = f(i(52))
                          , d = f(i(51));
                        function f(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        e.default = {
                            initPrivate: function(t) {
                                u.default.init(t)
                            },
                            MainImpl: a.default,
                            ConfigCtrl: r.default,
                            StreamUrl: n.default,
                            HUYA: s.default,
                            TafMx: o.default,
                            LivingInfo: h.default,
                            Room: l.default,
                            PlayerEvents: c.default,
                            MediaType: d.default
                        }
                    }
                    , function(t, e, i) {
                        var s = i(0)
                          , a = s.JSON || (s.JSON = {
                            stringify: c.default
                        });
                        t.exports = function(t) {
                            return a.stringify.apply(a, arguments)
                        }
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(56),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        i(57),
                        t.exports = i(0).Object.getPrototypeOf
                    }
                    , function(t, e, i) {
                        var s = i(19)
                          , a = i(35);
                        i(58)("getPrototypeOf", (function() {
                            return function(t) {
                                return a(s(t))
                            }
                        }
                        ))
                    }
                    , function(t, e, i) {
                        var s = i(4)
                          , a = i(0)
                          , r = i(13);
                        t.exports = function(t, e) {
                            var i = (a.Object || {})[t] || Object[t]
                              , n = {};
                            n[t] = e(i),
                            s(s.S + s.F * r((function() {
                                i(1)
                            }
                            )), "Object", n)
                        }
                    }
                    , function(t, e) {
                        t.exports = function(t) {
                            if ("function" != typeof t)
                                throw TypeError(t + " is not a function!");
                            return t
                        }
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(61),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        i(62);
                        var s = i(0).Object;
                        t.exports = function(t, e, i) {
                            return s.defineProperty(t, e, i)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(4);
                        s(s.S + s.F * !i(6), "Object", {
                            defineProperty: i(5).f
                        })
                    }
                    , function(t, e, i) {
                        e.__esModule = !0;
                        var s, a = (s = i(39)) && s.__esModule ? s : {
                            default: s
                        };
                        e.default = function(t, e) {
                            if (!t)
                                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                            return !e || "object" !== (void 0 === e ? "undefined" : (0,
                            a.default)(e)) && "function" != typeof e ? t : e
                        }
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(65),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        i(66),
                        i(75),
                        t.exports = i(30).f("iterator")
                    }
                    , function(t, e, i) {
                        var s = i(67)(!0);
                        i(40)(String, "String", (function(t) {
                            this._t = String(t),
                            this._i = 0
                        }
                        ), (function() {
                            var t, e = this._t, i = this._i;
                            return i >= e.length ? {
                                value: void 0,
                                done: !0
                            } : (t = s(e, i),
                            this._i += t.length,
                            {
                                value: t,
                                done: !1
                            })
                        }
                        ))
                    }
                    , function(t, e, i) {
                        var s = i(24)
                          , a = i(20);
                        t.exports = function(t) {
                            return function(e, i) {
                                var r, n, o = String(a(e)), u = s(i), h = o.length;
                                return u < 0 || u >= h ? t ? "" : void 0 : (r = o.charCodeAt(u)) < 55296 || r > 56319 || u + 1 === h || (n = o.charCodeAt(u + 1)) < 56320 || n > 57343 ? t ? o.charAt(u) : r : t ? o.slice(u, u + 2) : n - 56320 + (r - 55296 << 10) + 65536
                            }
                        }
                    }
                    , function(t, e, i) {
                        var s = i(26)
                          , a = i(18)
                          , r = i(29)
                          , n = {};
                        i(8)(n, i(11)("iterator"), (function() {
                            return this
                        }
                        )),
                        t.exports = function(t, e, i) {
                            t.prototype = s(n, {
                                next: a(1, i)
                            }),
                            r(t, e + " Iterator")
                        }
                    }
                    , function(t, e, i) {
                        var s = i(5)
                          , a = i(12)
                          , r = i(27);
                        t.exports = i(6) ? l.default : function(t, e) {
                            a(t);
                            for (var i, n = r(e), o = n.length, u = 0; o > u; )
                                s.f(t, i = n[u++], e[i]);
                            return t
                        }
                    }
                    , function(t, e, i) {
                        var s = i(43);
                        t.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t) {
                            return "String" == s(t) ? t.split("") : Object(t)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(10)
                          , a = i(72)
                          , r = i(73);
                        t.exports = function(t) {
                            return function(e, i, n) {
                                var o, u = s(e), h = a(u.length), l = r(n, h);
                                if (t && i != i) {
                                    for (; h > l; )
                                        if ((o = u[l++]) != o)
                                            return !0
                                } else
                                    for (; h > l; l++)
                                        if ((t || l in u) && u[l] === i)
                                            return t || l || 0;
                                return !t && -1
                            }
                        }
                    }
                    , function(t, e, i) {
                        var s = i(24)
                          , a = Math.min;
                        t.exports = function(t) {
                            return t > 0 ? a(s(t), 9007199254740991) : 0
                        }
                    }
                    , function(t, e, i) {
                        var s = i(24)
                          , a = Math.max
                          , r = Math.min;
                        t.exports = function(t, e) {
                            return (t = s(t)) < 0 ? a(t + e, 0) : r(t, e)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(2).document;
                        t.exports = s && s.documentElement
                    }
                    , function(t, e, i) {
                        i(76);
                        for (var s = i(2), a = i(8), r = i(25), n = i(11)("toStringTag"), o = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), u = 0; u < o.length; u++) {
                            var h = o[u]
                              , l = s[h]
                              , c = l && l.prototype;
                            c && !c[n] && a(c, n, h),
                            r[h] = r.Array
                        }
                    }
                    , function(t, e, i) {
                        var s = i(77)
                          , a = i(78)
                          , r = i(25)
                          , n = i(10);
                        t.exports = i(40)(Array, "Array", (function(t, e) {
                            this._t = n(t),
                            this._i = 0,
                            this._k = e
                        }
                        ), (function() {
                            var t = this._t
                              , e = this._k
                              , i = this._i++;
                            return !t || i >= t.length ? (this._t = void 0,
                            a(1)) : a(0, "keys" == e ? i : "values" == e ? t[i] : [i, t[i]])
                        }
                        ), "values"),
                        r.Arguments = r.Array,
                        s("keys"),
                        s("values"),
                        s("entries")
                    }
                    , function(t, e) {
                        t.exports = function() {}
                    }
                    , function(t, e) {
                        t.exports = function(t, e) {
                            return {
                                value: e,
                                done: !!t
                            }
                        }
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(80),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        i(81),
                        i(86),
                        i(87),
                        i(88),
                        t.exports = i(0).Symbol
                    }
                    , function(t, e, i) {
                        var s = i(2)
                          , a = i(3)
                          , r = i(6)
                          , n = i(4)
                          , o = i(41)
                          , u = i(82).KEY
                          , h = i(13)
                          , l = i(22)
                          , c = i(29)
                          , d = i(17)
                          , f = i(11)
                          , p = i(30)
                          , m = i(31)
                          , y = i(83)
                          , v = i(84)
                          , _ = i(12)
                          , g = i(9)
                          , S = i(19)
                          , P = i(10)
                          , k = i(23)
                          , E = i(18)
                          , I = i(26)
                          , b = i(85)
                          , C = i(46)
                          , w = i(44)
                          , A = i(5)
                          , R = i(27)
                          , L = C.f
                          , B = A.f
                          , D = b.f
                          , O = s.Symbol
                          , M = s.JSON
                          , F = M && M.stringify
                          , U = f("_hidden")
                          , N = f("toPrimitive")
                          , x = {}.propertyIsEnumerable
                          , V = l("symbol-registry")
                          , H = l("symbols")
                          , G = l("op-symbols")
                          , j = Object.prototype
                          , Y = "function" == typeof O && !!w.f
                          , W = s.QObject
                          , q = !W || !W.prototype || !W.prototype.findChild
                          , K = r && h((function() {
                            return 7 != I(B({}, "a", {
                                get: function() {
                                    return B(this, "a", {
                                        value: 7
                                    }).a
                                }
                            })).a
                        }
                        )) ? function(t, e, i) {
                            var s = L(j, e);
                            s && delete j[e],
                            B(t, e, i),
                            s && t !== j && B(j, e, s)
                        }
                        : B
                          , z = function(t) {
                            var e = H[t] = I(O.prototype);
                            return e._k = t,
                            e
                        }
                          , X = Y && "symbol" == (0,
                        T.default)(O.iterator) ? function(t) {
                            return "symbol" == (void 0 === t ? "undefined" : (0,
                            T.default)(t))
                        }
                        : function(t) {
                            return t instanceof O
                        }
                          , J = function t(e, i, s) {
                            return e === j && t(G, i, s),
                            _(e),
                            i = k(i, !0),
                            _(s),
                            a(H, i) ? (s.enumerable ? (a(e, U) && e[U][i] && (e[U][i] = !1),
                            s = I(s, {
                                enumerable: E(0, !1)
                            })) : (a(e, U) || B(e, U, E(1, {})),
                            e[U][i] = !0),
                            K(e, i, s)) : B(e, i, s)
                        }
                          , Q = function(t, e) {
                            _(t);
                            for (var i, s = y(e = P(e)), a = 0, r = s.length; r > a; )
                                J(t, i = s[a++], e[i]);
                            return t
                        }
                          , Z = function(t) {
                            var e = x.call(this, t = k(t, !0));
                            return !(this === j && a(H, t) && !a(G, t)) && (!(e || !a(this, t) || !a(H, t) || a(this, U) && this[U][t]) || e)
                        }
                          , $ = function(t, e) {
                            if (t = P(t),
                            e = k(e, !0),
                            t !== j || !a(H, e) || a(G, e)) {
                                var i = L(t, e);
                                return !i || !a(H, e) || a(t, U) && t[U][e] || (i.enumerable = !0),
                                i
                            }
                        }
                          , tt = function(t) {
                            for (var e, i = D(P(t)), s = [], r = 0; i.length > r; )
                                a(H, e = i[r++]) || e == U || e == u || s.push(e);
                            return s
                        }
                          , et = function(t) {
                            for (var e, i = t === j, s = D(i ? G : P(t)), r = [], n = 0; s.length > n; )
                                !a(H, e = s[n++]) || i && !a(j, e) || r.push(H[e]);
                            return r
                        };
                        Y || (o((O = function() {
                            if (this instanceof O)
                                throw TypeError("Symbol is not a constructor!");
                            var t = d(arguments.length > 0 ? arguments[0] : void 0)
                              , e = function e(i) {
                                this === j && e.call(G, i),
                                a(this, U) && a(this[U], t) && (this[U][t] = !1),
                                K(this, t, E(1, i))
                            };
                            return r && q && K(j, t, {
                                configurable: !0,
                                set: e
                            }),
                            z(t)
                        }
                        ).prototype, "toString", (function() {
                            return this._k
                        }
                        )),
                        C.f = $,
                        A.f = J,
                        i(45).f = b.f = tt,
                        i(32).f = Z,
                        w.f = et,
                        r && !i(16) && o(j, "propertyIsEnumerable", Z, !0),
                        p.f = function(t) {
                            return z(f(t))
                        }
                        ),
                        n(n.G + n.W + n.F * !Y, {
                            Symbol: O
                        });
                        for (var it = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), st = 0; it.length > st; )
                            f(it[st++]);
                        for (var at = R(f.store), rt = 0; at.length > rt; )
                            m(at[rt++]);
                        n(n.S + n.F * !Y, "Symbol", {
                            for: function(t) {
                                return a(V, t += "") ? V[t] : V[t] = O(t)
                            },
                            keyFor: function(t) {
                                if (!X(t))
                                    throw TypeError(t + " is not a symbol!");
                                for (var e in V)
                                    if (V[e] === t)
                                        return e
                            },
                            useSetter: function() {
                                q = !0
                            },
                            useSimple: function() {
                                q = !1
                            }
                        }),
                        n(n.S + n.F * !Y, "Object", {
                            create: function(t, e) {
                                return void 0 === e ? I(t) : Q(I(t), e)
                            },
                            defineProperty: J,
                            defineProperties: Q,
                            getOwnPropertyDescriptor: $,
                            getOwnPropertyNames: tt,
                            getOwnPropertySymbols: et
                        });
                        var nt = h((function() {
                            w.f(1)
                        }
                        ));
                        n(n.S + n.F * nt, "Object", {
                            getOwnPropertySymbols: function(t) {
                                return w.f(S(t))
                            }
                        }),
                        M && n(n.S + n.F * (!Y || h((function() {
                            var t = O();
                            return "[null]" != F([t]) || "{}" != F({
                                a: t
                            }) || "{}" != F(Object(t))
                        }
                        ))), "JSON", {
                            stringify: function(t) {
                                for (var e, i, s = [t], a = 1; arguments.length > a; )
                                    s.push(arguments[a++]);
                                if (i = e = s[1],
                                (g(e) || void 0 !== t) && !X(t))
                                    return v(e) || (e = function(t, e) {
                                        if ("function" == typeof i && (e = i.call(this, t, e)),
                                        !X(e))
                                            return e
                                    }
                                    ),
                                    s[1] = e,
                                    F.apply(M, s)
                            }
                        }),
                        O.prototype[N] || i(8)(O.prototype, N, O.prototype.valueOf),
                        c(O, "Symbol"),
                        c(Math, "Math", !0),
                        c(s.JSON, "JSON", !0)
                    }
                    , function(t, e, i) {
                        var s = i(17)("meta")
                          , a = i(9)
                          , r = i(3)
                          , n = i(5).f
                          , o = 0
                          , l = h.default || function() {
                            return !0
                        }
                          , c = !i(13)((function() {
                            return l((0,
                            u.default)({}))
                        }
                        ))
                          , d = function(t) {
                            n(t, s, {
                                value: {
                                    i: "O" + ++o,
                                    w: {}
                                }
                            })
                        }
                          , f = t.exports = {
                            KEY: s,
                            NEED: !1,
                            fastKey: function(t, e) {
                                if (!a(t))
                                    return "symbol" == (void 0 === t ? "undefined" : (0,
                                    T.default)(t)) ? t : ("string" == typeof t ? "S" : "P") + t;
                                if (!r(t, s)) {
                                    if (!l(t))
                                        return "F";
                                    if (!e)
                                        return "E";
                                    d(t)
                                }
                                return t[s].i
                            },
                            getWeak: function(t, e) {
                                if (!r(t, s)) {
                                    if (!l(t))
                                        return !0;
                                    if (!e)
                                        return !1;
                                    d(t)
                                }
                                return t[s].w
                            },
                            onFreeze: function(t) {
                                return c && f.NEED && l(t) && !r(t, s) && d(t),
                                t
                            }
                        }
                    }
                    , function(t, e, i) {
                        var s = i(27)
                          , a = i(44)
                          , r = i(32);
                        t.exports = function(t) {
                            var e = s(t)
                              , i = a.f;
                            if (i)
                                for (var n, o = i(t), u = r.f, h = 0; o.length > h; )
                                    u.call(t, n = o[h++]) && e.push(n);
                            return e
                        }
                    }
                    , function(t, e, i) {
                        var s = i(43);
                        t.exports = Array.isArray || function(t) {
                            return "Array" == s(t)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(10)
                          , a = i(45).f
                          , r = {}.toString
                          , n = "object" == ("undefined" == typeof window ? "undefined" : (0,
                        T.default)(window)) && window && f.default ? (0,
                        f.default)(window) : [];
                        t.exports.f = function(t) {
                            return n && "[object Window]" == r.call(t) ? function(t) {
                                try {
                                    return a(t)
                                } catch (t) {
                                    return n.slice()
                                }
                            }(t) : a(s(t))
                        }
                    }
                    , function(t, e) {}
                    , function(t, e, i) {
                        i(31)("asyncIterator")
                    }
                    , function(t, e, i) {
                        i(31)("observable")
                    }
                    , function(t, e, i) {
                        e.__esModule = !0;
                        var s = n(i(90))
                          , a = n(i(94))
                          , r = n(i(39));
                        function n(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        e.default = function(t, e) {
                            if ("function" != typeof e && null !== e)
                                throw new TypeError("Super expression must either be null or a function, not " + (void 0 === e ? "undefined" : (0,
                                r.default)(e)));
                            t.prototype = (0,
                            a.default)(e && e.prototype, {
                                constructor: {
                                    value: t,
                                    enumerable: !1,
                                    writable: !0,
                                    configurable: !0
                                }
                            }),
                            e && (s.default ? (0,
                            s.default)(t, e) : t.__proto__ = e)
                        }
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(91),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        i(92),
                        t.exports = i(0).Object.setPrototypeOf
                    }
                    , function(t, e, i) {
                        var s = i(4);
                        s(s.S, "Object", {
                            setPrototypeOf: i(93).set
                        })
                    }
                    , function(t, e, i) {
                        var s = i(9)
                          , a = i(12)
                          , r = function(t, e) {
                            if (a(t),
                            !s(e) && null !== e)
                                throw TypeError(e + ": can't set as prototype!")
                        };
                        t.exports = {
                            set: o.default || ("__proto__"in {} ? function(t, e, s) {
                                try {
                                    (s = i(36)(Function.call, i(46).f(Object.prototype, "__proto__").set, 2))(t, []),
                                    e = !(t instanceof Array)
                                } catch (t) {
                                    e = !0
                                }
                                return function(t, i) {
                                    return r(t, i),
                                    e ? t.__proto__ = i : s(t, i),
                                    t
                                }
                            }({}, !1) : void 0),
                            check: r
                        }
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(95),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        i(96);
                        var s = i(0).Object;
                        t.exports = function(t, e) {
                            return s.create(t, e)
                        }
                    }
                    , function(t, e, i) {
                        var s = i(4);
                        s(s.S, "Object", {
                            create: i(26)
                        })
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = r(i(1))
                          , a = r(i(7));
                        function r(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var n = function() {
                            function t() {
                                (0,
                                s.default)(this, t),
                                this.listeners = {}
                            }
                            return (0,
                            a.default)(t, [{
                                key: "has",
                                value: function(t, e, i) {
                                    var s = this.listeners[t];
                                    if (!s)
                                        return !1;
                                    for (var a = 0, r = s.length; a < r; a++) {
                                        var n = s[a];
                                        if (n.callback == e && n.thisObj == i)
                                            return !0
                                    }
                                    return !1
                                }
                            }, {
                                key: "on",
                                value: function(t, e, i, s) {
                                    var a = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                                    if (!this.has(t, e, i)) {
                                        var r = this.listeners[t] || [];
                                        r.push({
                                            once: a,
                                            priority: s || 0,
                                            callback: e,
                                            thisObj: i,
                                            bindCallback: i && e ? e.bind(i) : e
                                        }),
                                        r.sort((function(t, e) {
                                            return e.priority - t.priority
                                        }
                                        )),
                                        this.listeners[t] = r
                                    }
                                }
                            }, {
                                key: "once",
                                value: function(t, e, i, s) {
                                    this.on(t, e, i, s, !0)
                                }
                            }, {
                                key: "off",
                                value: function(t, e, i) {
                                    var s = this.listeners[t];
                                    if (s)
                                        for (var a = s.length - 1; a >= 0; a--) {
                                            var r = s[a];
                                            if (r.callback == e && r.thisObj == i)
                                                return void s.splice(a, 1)
                                        }
                                }
                            }, {
                                key: "clear",
                                value: function() {
                                    this.listeners = {}
                                }
                            }, {
                                key: "trigger",
                                value: function(t, e, i) {
                                    var s = this.listeners[t];
                                    if (s) {
                                        s.forEach((function(t) {
                                            var s = t.bindCallback;
                                            "function" == typeof s && s(e, i)
                                        }
                                        ));
                                        for (var a = s.length - 1; a >= 0; a--)
                                            s[a].once && s.splice(a, 1)
                                    }
                                }
                            }]),
                            t
                        }();
                        e.default = n
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s, a = (s = i(15)) && s.__esModule ? s : {
                            default: s
                        }, r = {};
                        r.UriMapping = {
                            1e5: a.default.StreamChangeNotice,
                            100102: a.default.MediaStopStreamNotice,
                            100200: a.default.MediaChangeUpStreamNotic,
                            100300: a.default.RoomStreamChangeNotic
                        },
                        r.WupMapping = {
                            loginVerify: a.default.LoginVerifyRsp,
                            refreshCookie: a.default.RefreshCookieRsp,
                            getMediaConfig: a.default.GetMediaConfigRsp,
                            quitGroup: a.default.QuitMediaGroupRsp,
                            getAntiCodeForStream: a.default.GetAntiCodeForStreamRsp,
                            getStreamInfoByRoom: a.default.GetStreamInfoByRoomRsp,
                            getStreamInfoByRoomFake: a.default.GetStreamInfoByRoomFakeRsp
                        },
                        r.NoLog = {
                            loginVerify: 1,
                            refreshCookie: 1,
                            getMediaConfig: 1,
                            getInfoFromVGM: 1,
                            getStreamInfoByRoomFake: 1
                        },
                        e.default = r
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = h(i(100))
                          , a = h(i(1))
                          , r = h(i(7))
                          , n = h(i(50))
                          , o = h(i(51))
                          , u = h(i(14));
                        function h(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var l = function() {
                            function t() {
                                (0,
                                a.default)(this, t)
                            }
                            return (0,
                            r.default)(t, [{
                                key: "setParams",
                                value: function(t, e) {
                                    this.pid = Number(t) || 0,
                                    this.gearIndexList = e
                                }
                            }, {
                                key: "setLivingInfo",
                                value: function(e) {
                                    var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1
                                      , s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1
                                      , a = arguments[3]
                                      , r = []
                                      , n = a.line || -1
                                      , o = a.mediaFormat || "";
                                    for (var u in e.streams) {
                                        var h = e.streams[u]
                                          , l = h.iBitRate
                                          , c = []
                                          , d = 0
                                          , f = 0
                                          , p = -1
                                          , m = []
                                          , y = h.vMediaStreamInfo
                                          , v = h.vStreamGearInfo;
                                        f = -1 == i ? h.iWebDefaultBitRate : i;
                                        for (var _ = 0; _ < y.length; _++) {
                                            var g = y[_];
                                            if (g.iWebPriorityRate < 0)
                                                m.push(_);
                                            else {
                                                var S = g.iLineIndex;
                                                d += g.iWebPriorityRate,
                                                c.push({
                                                    line: S,
                                                    rate: g.iWebPriorityRate
                                                }),
                                                n == S && (p = S)
                                            }
                                        }
                                        for (var T = m.length - 1; T >= 0; T--) {
                                            var P = m[T];
                                            y.splice(P, 1)
                                        }
                                        if (0 == y.length)
                                            break;
                                        if (1 === y.length || 0 === d)
                                            p = y[0].iLineIndex;
                                        else if (-1 === p)
                                            for (var k = 0, E = Math.random(), I = 0, b = c.length; I < b; I++) {
                                                var C = c[I];
                                                if (E <= (k += C.rate / d)) {
                                                    p = C.line;
                                                    break
                                                }
                                            }
                                        f = this.checkDefalutBitRate(v, f, s);
                                        for (var w = null, A = 0; A < y.length; A++)
                                            if (y[A].iLineIndex == p) {
                                                w = t.getMediaStreamFormat(y[A].mMediaStreamFormatInfo.value, o, !0);
                                                break
                                            }
                                        var R = {
                                            streamName: u,
                                            vMediaStreamInfo: y,
                                            chooseLine: p,
                                            vStreamGearInfo: v,
                                            defaultBitRate: f,
                                            iBitRate: l,
                                            playFormat: w,
                                            sAdditionalParam: h.sAdditionalParam,
                                            sAntiCode: h.sAntiCode
                                        };
                                        r.push(R)
                                    }
                                    return r
                                }
                            }, {
                                key: "checkDefalutBitRate",
                                value: function(t, e, i) {
                                    var s = this.getByGearIndex(t, i);
                                    return -1 === s && (s = this.getByBitrate(t, e)),
                                    s
                                }
                            }, {
                                key: "getByBitrate",
                                value: function(t, e) {
                                    for (var i = t.length > 0 ? -1 : 0, a = e, r = 0, n = s.default, o = 0; o < t.length; o++) {
                                        var u = t[o].iBitRate;
                                        if (0 === a) {
                                            if (0 === u) {
                                                i = u;
                                                break
                                            }
                                        } else if (u > 0 && u <= a) {
                                            i = u;
                                            break
                                        }
                                        r = Math.max(r, u),
                                        n = Math.min(n, u)
                                    }
                                    return -1 === i && (i = 0 === a ? r : n),
                                    i
                                }
                            }, {
                                key: "getByGearIndex",
                                value: function(t, e) {
                                    if (!this.gearIndexList || 0 === this.gearIndexList.length)
                                        return -1;
                                    if (-1 === (e = Number(e)))
                                        return -1;
                                    var i = this.gearIndexList.indexOf(e);
                                    if (-1 === i)
                                        return -1;
                                    var s = this._getByGearIndex(t, e);
                                    if (-1 === s)
                                        for (var a = this.gearIndexList.length, r = 0; r < a; r++) {
                                            var n = i - r
                                              , o = i + r;
                                            if (o < a && (s = this._getByGearIndex(t, this.gearIndexList[o])),
                                            -1 === s && n > 0 && (s = this._getByGearIndex(t, this.gearIndexList[n])),
                                            -1 !== s)
                                                break
                                        }
                                    return s
                                }
                            }, {
                                key: "_getByGearIndex",
                                value: function(t, e) {
                                    for (var i = 0; i < t.length; i++)
                                        if (Number(t[i].sBusiGearIndex) === e)
                                            return Number(t[i].iBitRate);
                                    return -1
                                }
                            }, {
                                key: "setLiveRoomBinData",
                                value: function(t) {
                                    try {
                                        for (var e = new ArrayBuffer(t.length / 2), i = new Uint8Array(e), s = 0, a = t.length / 2; s < a; s++) {
                                            var r = parseInt(t[2 * s] + t[2 * s + 1] + "", 16);
                                            i[s] = r
                                        }
                                        return u.default.Signal.rspDecode(i.buffer, "HUYA.GetStreamInfoByRoomRsp")
                                    } catch (t) {
                                        u.default.logger.warn("LivingInfo.setLiveRoomBinData", t.message)
                                    }
                                    return null
                                }
                            }], [{
                                key: "reSelectFormat",
                                value: function(e, i) {
                                    for (var s = 0; s < e.vMediaStreamInfo.length; s++) {
                                        var a = e.vMediaStreamInfo[s];
                                        if (a.iLineIndex == e.chooseLine) {
                                            e.playFormat = t.getMediaStreamFormat(a.mMediaStreamFormatInfo.value, null, i);
                                            break
                                        }
                                    }
                                }
                            }, {
                                key: "getMediaStreamFormat",
                                value: function(e, i, s) {
                                    var a = [];
                                    for (var r in e)
                                        if (o.default.isLivingFormat(r)) {
                                            if (i && i === r)
                                                return e[r];
                                            a.push(e[r])
                                        }
                                    return 2 === n.default.wap ? t.getMediaStreamFormatWap(a) : t.getMediaStreamFormatNew(a, s)
                                }
                            }, {
                                key: "getMediaStreamFormatOld",
                                value: function(t) {
                                    var e = t.length
                                      , i = 0
                                      , s = 0;
                                    for (i = 0; i < e; i++)
                                        s += t[i].iRate;
                                    var a = Math.random() * s
                                      , r = 0
                                      , n = null;
                                    for (i = 0; i < e; i++) {
                                        if (r < a && a <= t[i].iRate + r) {
                                            n = t[i];
                                            break
                                        }
                                        r += t[i].iRate
                                    }
                                    return null === n && e > 0 && (n = t[0]),
                                    n
                                }
                            }, {
                                key: "getMediaStreamFormatNew",
                                value: function(t, e) {
                                    var i = null
                                      , s = null
                                      , a = null;
                                    return t.forEach((function(t) {
                                        t.sFormatName === o.default.f_p2p && e ? i = t : t.sFormatName === o.default.f_flv ? s = t : t.sFormatName === o.default.f_hls && (a = t)
                                    }
                                    )),
                                    i || s || a
                                }
                            }, {
                                key: "getMediaStreamFormatWap",
                                value: function(t) {
                                    var e = null;
                                    return t.forEach((function(t) {
                                        t.sFormatName === o.default.f_flv || t.sFormatName === o.default.f_hls && (e = t)
                                    }
                                    )),
                                    e
                                }
                            }]),
                            t
                        }();
                        e.default = l
                    }
                    , function(t, e, i) {
                        t.exports = {
                            default: i(101),
                            __esModule: !0
                        }
                    }
                    , function(t, e, i) {
                        i(102),
                        t.exports = 9007199254740991
                    }
                    , function(t, e, i) {
                        var s = i(4);
                        s(s.S, "Number", {
                            MAX_SAFE_INTEGER: 9007199254740991
                        })
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = d(i(1))
                          , a = d(i(7))
                          , r = d(i(14))
                          , n = d(i(33))
                          , o = d(i(15))
                          , u = d(i(47))
                          , h = d(i(104))
                          , l = d(i(105))
                          , c = d(i(52));
                        function d(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var f = function() {
                            function t(e) {
                                (0,
                                s.default)(this, t),
                                this._player = e,
                                this.enableLowLatency = !1,
                                this.roomId = 0,
                                this.pid = 0,
                                this.myid = 0,
                                this.gameid = 0,
                                this.videoBoxid = "",
                                this.place = "",
                                this.getStreamSuc = !1,
                                this.needSeek = !1,
                                this.hasStream = !1,
                                this.busiState = 0,
                                this.httpState = 0,
                                this.signalState = 0,
                                this._onGetStreamInfoByRoomBind = this._onGetStreamInfoByRoom.bind(this),
                                this._onGetStreamInfoByRoomFakeBind = this._onGetStreamInfoByRoomFake.bind(this)
                            }
                            return (0,
                            a.default)(t, [{
                                key: "destroy",
                                value: function() {
                                    n.default.off(n.default.Events.LOGIN_SUC, this._onLoginSuc, this),
                                    n.default.off(n.default.Events.ON_GET_CONFIG, this._checkConfig, this),
                                    r.default.Signal.off(l.default.kMediaPackTypeRoomStreamChangeNotice, this._roomStreamChangeNotice, this)
                                }
                            }, {
                                key: "_checkConfig",
                                value: function() {
                                    n.default.config ? (n.default.off(n.default.Events.ON_GET_CONFIG, this._checkConfig, this),
                                    this._player.setConfig(n.default.config)) : n.default.on(n.default.Events.ON_GET_CONFIG, this._checkConfig, this)
                                }
                            }, {
                                key: "update",
                                value: function(t) {
                                    this.enableLowLatency = t.enableLowLatency,
                                    this.roomId = t.roomId,
                                    this.pid = t.pid,
                                    this.videoBoxid = t.id,
                                    this.place = t.place
                                }
                            }, {
                                key: "_roomStreamChangeNotice",
                                value: function(t) {
                                    r.default.logger.log("HYChannel.roomStreamChangeNotice roomId=" + t.sRoomId + "  delay=" + t.iDelay),
                                    t.sRoomId === this.roomId + "" && r.default.Timer.once(this._onUpdateRoomStreamInfoTime, this, t.iDelay + 1e3)
                                }
                            }, {
                                key: "_onUpdateRoomStreamInfoTime",
                                value: function() {
                                    this.join(l.default.kMediaPackTypeRoomStreamChangeNotice)
                                }
                            }, {
                                key: "quit",
                                value: function(t) {
                                    var e = new o.default.QuitMediaGroupReq;
                                    e.tId = n.default.getMediaUserId(),
                                    e.vGroupId.value = [t + ""],
                                    r.default.Signal.sendWup(u.default.MEDIAUISEA, u.default.QUIT_GROUP, e),
                                    r.default.Signal.off(l.default.kMediaPackTypeRoomStreamChangeNotice, this._roomStreamChangeNotice, this)
                                }
                            }, {
                                key: "join",
                                value: function() {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0
                                      , e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                                    r.default.logger.log("Room.join mediaPackType", t, "loadInfoImmediately", e),
                                    r.default.Signal.on(l.default.kMediaPackTypeRoomStreamChangeNotice, this._roomStreamChangeNotice, this),
                                    n.default.isLogin ? this._getStreamInfoByRoom(t) : (e && this._getStreamInfoByRoomFake(),
                                    n.default.on(n.default.Events.LOGIN_SUC, this._onLoginSuc, this))
                                }
                            }, {
                                key: "_onLoginSuc",
                                value: function() {
                                    this._getStreamInfoByRoom(-1)
                                }
                            }, {
                                key: "onGetStreamByBusi",
                                value: function(t) {
                                    r.default.logger.log("Room.onGetStreamByBusi", t),
                                    this.setStreamState(1, 1),
                                    this._updateMediaStream(t.tStreamInfoPack, 1, t.lAnchorUid)
                                }
                            }, {
                                key: "_getStreamInfoByRoom",
                                value: function(t) {
                                    this.handleReqFrom(3);
                                    var e = new o.default.GetStreamInfoByRoomReq;
                                    e.tId = n.default.getMediaUserId(),
                                    e.sRoomId = this.roomId + "",
                                    e.iMediaPackType = t || -1,
                                    r.default.logger.log("Room._getStreamInfoByRoom", e.tId.lUid, e.sRoomId, e.iMediaPackType, e),
                                    r.default.Signal.sendWup(u.default.MEDIAUISEA, u.default.GET_STREAM_INFO_BY_ROOM, e, this._onGetStreamInfoByRoomBind)
                                }
                            }, {
                                key: "_onGetStreamInfoByRoom",
                                value: function(t) {
                                    r.default.logger.log("Room._onGetStreamInfoByRoom", t, t.sRoomId, this.roomId),
                                    "" === t.sRoomId && 0 !== this.roomId ? this._getStreamInfoByRoomFake() : (this.setStreamState(1, 3),
                                    this._updateMediaStream(t.tStreamInfoPack, 3, t.lAnchorUid))
                                }
                            }, {
                                key: "_getStreamInfoByRoomFake",
                                value: function() {
                                    this.handleReqFrom(2),
                                    this.getStreamSuc = !1,
                                    r.default.Timer.once(this._onGetStreamInfoByRoomFakeFailed, this, 2e3);
                                    var t = new o.default.GetStreamInfoByRoomFakeReq;
                                    t.tId = n.default.getMediaUserId(),
                                    t.sRoomId = this.roomId + "",
                                    r.default.logger.log("Room._getStreamInfoByRoomFake", t.tId.lUid, t.sRoomId, t),
                                    r.default.Signal.sendWupHttp(u.default.MEDIAUISEA, u.default.GET_STREAM_INFO_BY_ROOM_FAKE, t, this._onGetStreamInfoByRoomFakeBind)
                                }
                            }, {
                                key: "_onGetStreamInfoByRoomFake",
                                value: function(t) {
                                    r.default.logger.log("Room._onGetStreamInfoByRoomFake", t, t.sdkcode, t.sRoomId, this.roomId);
                                    var e = Number(t.sRoomId);
                                    0 !== e && e === Number(this.roomId) && (r.default.Timer.remove(this._onGetStreamInfoByRoomFakeFailed, this),
                                    0 === t.sdkcode ? (this.getStreamSuc = !0,
                                    this.setStreamState(1, 2),
                                    this._updateMediaStream(t.tStreamInfoPack, 2, t.lAnchorUid)) : this._onGetStreamInfoByRoomFakeFailed())
                                }
                            }, {
                                key: "_onGetStreamInfoByRoomFakeFailed",
                                value: function() {
                                    r.default.logger.log("Room._onGetStreamInfoByRoomFakeFailed"),
                                    this._player.onUpdateStreamInfoFail()
                                }
                            }, {
                                key: "_updateMediaStream",
                                value: function(t, e, i) {
                                    var s = this;
                                    0 != this.pid ? i = this.pid : i || (i = 0);
                                    var a = t.mMediaStreamInfoPack.value
                                      , n = {
                                        streams: {}
                                    };
                                    n.vproto = t.mMediaStreamInfoPack.vproto;
                                    var u = 0
                                      , l = !1;
                                    for (var d in a) {
                                        var f = a[d];
                                        if (!(f.iStreamType === o.default.EMediaStreamType.EMST_HUYA_UDP && f.iStreamProperty === o.default.EMediaStreamProperty.EOriginalStream || 0 != i && f.lUid != i)) {
                                            l = !0;
                                            for (var p = [], m = f.vMediaStreamInfo.value, y = 0; y < m.length; y++) {
                                                var v = m[y];
                                                v.iLineIndex < 1 || 4 === v.iLineIndex || 0 !== v.mMediaStreamFormatInfo.size() && p.push(v)
                                            }
                                            if (p.length > 0) {
                                                p.sort((function(t, e) {
                                                    return t.iLineIndex - e.iLineIndex
                                                }
                                                ));
                                                var _ = new h.default;
                                                _.streamName = d,
                                                _.lLiveCompatibleFlag = f.lLiveCompatibleFlag,
                                                _.lStreamId = f.lStreamId,
                                                _.sAntiCode = f.sAntiCode,
                                                _.iWebDefaultBitRate = f.iWebDefaultBitRate,
                                                _.vStreamGearInfo = f.vStreamGearInfo.value,
                                                _.vMediaStreamInfo = p,
                                                _.iStreamProperty = f.iStreamProperty,
                                                _.iBitRate = f.iBitRate,
                                                _.iStreamType = f.iStreamType,
                                                _.sAdditionalParam = f.sAdditionalParam,
                                                _.lUid = f.lUid,
                                                n.streams[d] = _,
                                                _.vStreamGearInfo.forEach((function(t) {
                                                    "auto" == t.sDisplayName && (s._player.hasAutoBitrate = !0)
                                                }
                                                )),
                                                _.vStreamGearInfo.sort((function(t, e) {
                                                    return 0 == t.iBitRate ? -1 : 0 == e.iBitRate ? 1 : e.iBitRate - t.iBitRate
                                                }
                                                ))
                                            }
                                            u = f.iBitRate
                                        }
                                    }
                                    this.hasStream || (this.hasStream = l),
                                    l ? (r.default.logger.log("Room._updateMediaStream", n),
                                    this.setStreamState(2, e),
                                    this._player.onUpdateStreamInfo({
                                        liveStreams: n,
                                        from: e,
                                        broadcastBitrate: u
                                    }),
                                    this.handleReqSuccessFrom(e)) : (this.setStreamState(3, e),
                                    r.default.logger.warn("Room._updateMediaStream has no streams"),
                                    this._player.trigger(c.default.ROOM_NO_STREAM),
                                    this._player && this._player.reportNoStream && this._player.reportNoStream(e))
                                }
                            }, {
                                key: "setStreamState",
                                value: function(t, e) {
                                    1 === e ? this.busiState = t : 2 === e ? this.httpState = t : 3 === e && (this.signalState = t)
                                }
                            }, {
                                key: "handleReqFrom",
                                value: function(t) {
                                    2 !== t && 3 !== t || this._player && this._player.reportSdkStream && this._player.reportSdkStream(0, t)
                                }
                            }, {
                                key: "handleReqSuccessFrom",
                                value: function(t) {
                                    2 !== t && 3 !== t || this._player && this._player.reportSdkStream && this._player.reportSdkStream(1, t)
                                }
                            }]),
                            t
                        }();
                        e.default = f
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        });
                        var s = n(i(1))
                          , a = n(i(7))
                          , r = n(i(14));
                        function n(t) {
                            return t && t.__esModule ? t : {
                                default: t
                            }
                        }
                        var o = function() {
                            function t() {
                                (0,
                                s.default)(this, t),
                                this.streamName = "",
                                this.lLiveCompatibleFlag = 0,
                                this.lStreamId = 0,
                                this.sAntiCode = "",
                                this.vStreamGearInfo = null,
                                this.vMediaStreamInfo = null,
                                this.lUid = 0
                            }
                            return (0,
                            a.default)(t, [{
                                key: "getLineInfo",
                                value: function(t) {
                                    var e = this.vMediaStreamInfo;
                                    if (e) {
                                        for (var i = 0; i < e.length; i++) {
                                            var s = e[i];
                                            if (s.iLineIndex == Number(t))
                                                return s
                                        }
                                        return null
                                    }
                                    r.default.logger.warn("StreamInfo.getLineInfo streamInfo=null")
                                }
                            }]),
                            t
                        }();
                        e.default = o
                    }
                    , function(t, e, i) {
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        }),
                        e.default = {
                            kMediaPackTypeStreamChangeNotice: 1e5,
                            kMediaPackTypeMediaStopStream: 100102,
                            kMediaPackTypeMediaChgUpStream: 100200,
                            kMediaPackTypeRoomStreamChangeNotice: 100300
                        }
                    }
                    ]).default
                }
                ,
                "object" == (0,
                T.default)(e) && "object" == (0,
                T.default)(t) ? t.exports = n() : (a = [],
                void 0 === (r = "function" == typeof (s = n) ? s.apply(e, a) : s) || (t.exports = r))
            }
            ).call(this, i(201)(t))
        }
        , function(t, e) {
            t.exports = function(t) {
                if ("function" != typeof t)
                    throw TypeError(t + " is not a function!");
                return t
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(124)(!0);
            i(55)(String, "String", (function(t) {
                this._t = String(t),
                this._i = 0
            }
            ), (function() {
                var t, e = this._t, i = this._i;
                return i >= e.length ? {
                    value: void 0,
                    done: !0
                } : (t = s(e, i),
                this._i += t.length,
                {
                    value: t,
                    done: !1
                })
            }
            ))
        }
        , function(t, e, i) {
            var s = i(54);
            t.exports = function(t) {
                return Object(s(t))
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s, a = i(17), r = u(i(12)), n = u(i(39)), o = u(i(41));
            function u(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            s = Number(localStorage.channelLogLevel),
            isNaN(s) || r.default.setLevel(s),
            (0,
            a.initPrivate)({
                logger: r.default,
                Signal: o.default,
                Timer: n.default
            }),
            e.default = a.MainImpl
        }
        , function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s, a = (s = i(38)) && s.__esModule ? s : {
                default: s
            };
            e.default = function(t, e) {
                if (!t)
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !e || "object" !== (void 0 === e ? "undefined" : (0,
                a.default)(e)) && "function" != typeof e ? t : e
            }
        }
        , function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = n(i(70))
              , a = n(i(71))
              , r = n(i(38));
            function n(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            e.default = function(t, e) {
                if ("function" != typeof e && null !== e)
                    throw new TypeError("Super expression must either be null or a function, not " + (void 0 === e ? "undefined" : (0,
                    r.default)(e)));
                t.prototype = (0,
                a.default)(e && e.prototype, {
                    constructor: {
                        value: t,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }),
                e && (s.default ? (0,
                s.default)(t, e) : t.__proto__ = e)
            }
        }
        , function(t, e) {
            t.exports = {}
        }
        , function(t, e, i) {
            var s = i(80)
              , a = i(59);
            t.exports = Object.keys || function(t) {
                return s(t, a)
            }
        }
        , function(t, e, i) {
            i(128);
            for (var s = i(4), a = i(13), r = i(24), n = i(6)("toStringTag"), o = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), u = 0; u < o.length; u++) {
                var h = o[u]
                  , l = s[h]
                  , c = l && l.prototype;
                c && !c[n] && a(c, n, h),
                r[h] = r.Array
            }
        }
        , function(t, e, i) {
            var s = i(1)
              , a = i(0)
              , r = i(14);
            t.exports = function(t, e) {
                var i = (a.Object || {})[t] || Object[t]
                  , n = {};
                n[t] = e(i),
                s(s.S + s.F * r((function() {
                    i(1)
                }
                )), "Object", n)
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(161),
                __esModule: !0
            }
        }
        , function(t, e) {
            t.exports = function(t, e) {
                return {
                    enumerable: !(1 & t),
                    configurable: !(2 & t),
                    writable: !(4 & t),
                    value: e
                }
            }
        }
        , function(t, e) {}
        , function(t, e) {
            t.exports = !0
        }
        , function(t, e, i) {
            var s = i(8)
              , a = i(79)
              , r = i(59)
              , n = i(57)("IE_PROTO")
              , o = function() {}
              , u = function() {
                var t, e = i(51)("iframe"), s = r.length;
                for (e.style.display = "none",
                i(81).appendChild(e),
                e.src = "javascript:",
                (t = e.contentWindow.document).open(),
                t.write("<script>document.F=Object<\/script>"),
                t.close(),
                u = t.F; s--; )
                    delete u.prototype[r[s]];
                return u()
            };
            t.exports = Object.create || function(t, e) {
                var i;
                return null !== t ? (o.prototype = s(t),
                i = new o,
                o.prototype = null,
                i[n] = t) : i = u(),
                void 0 === e ? i : a(i, e)
            }
        }
        , function(t, e) {
            var i = {}.toString;
            t.exports = function(t) {
                return i.call(t).slice(8, -1)
            }
        }
        , function(t, e, i) {
            var s = i(9).f
              , a = i(15)
              , r = i(6)("toStringTag");
            t.exports = function(t, e, i) {
                t && !a(t = i ? t : t.prototype, r) && s(t, r, {
                    configurable: !0,
                    value: e
                })
            }
        }
        , function(t, e, i) {
            var s = i(11)
              , a = i(84)
              , r = i(85)
              , n = i(8)
              , o = i(42)
              , u = i(63)
              , h = {}
              , l = {};
            (e = t.exports = function(t, e, i, c, d) {
                var f, p, m, y, v = d ? function() {
                    return t
                }
                : u(t), _ = s(i, c, e ? 2 : 1), g = 0;
                if ("function" != typeof v)
                    throw TypeError(t + " is not iterable!");
                if (r(v)) {
                    for (f = o(t.length); f > g; g++)
                        if ((y = e ? _(n(p = t[g])[0], p[1]) : _(t[g])) === h || y === l)
                            return y
                } else
                    for (m = v.call(t); !(p = m.next()).done; )
                        if ((y = a(m, _, p.value, e)) === h || y === l)
                            return y
            }
            ).BREAK = h,
            e.RETURN = l
        }
        , function(t, e) {
            e.f = {}.propertyIsEnumerable
        }
        , function(t, e, i) {
            t.exports = {
                default: i(188),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = n(i(107))
              , a = n(i(72))
              , r = "function" == typeof a.default && "symbol" == typeof s.default ? function(t) {
                return typeof t
            }
            : function(t) {
                return t && "function" == typeof a.default && t.constructor === a.default && t !== a.default.prototype ? "symbol" : typeof t
            }
            ;
            function n(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            e.default = "function" == typeof a.default && "symbol" === r(s.default) ? function(t) {
                return void 0 === t ? "undefined" : r(t)
            }
            : function(t) {
                return t && "function" == typeof a.default && t.constructor === a.default && t !== a.default.prototype ? "symbol" : void 0 === t ? "undefined" : r(t)
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = r(i(12))
              , a = r(i(40));
            function r(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var n = !1
              , o = []
              , u = 0;
            function h(t, e) {
                for (var i = 0, s = o.length; i < s; i++) {
                    var a = o[i];
                    if (a.callback == t && a.thisObj == e)
                        return a
                }
                return null
            }
            function l(t, e, i) {
                var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                  , r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                if ((i = 0 | (Number(i) || 0)) < 10 || i % 10 != 0 || !t)
                    return s.default.error("Timer.add Invalide interval value or callback function."),
                    !1;
                var n = h(t, e);
                return n || (n = {
                    callback: t,
                    thisObj: e,
                    bindCallback: e ? t.bind(e) : t,
                    param: a
                },
                o.push(n)),
                n.times = r,
                n.tickCount = 0,
                n.interval = i / 10,
                n.delayDel = !1,
                c(),
                !0
            }
            function c() {
                !u && o.length > 0 && (u = setInterval(d, 10))
            }
            function d() {
                if (0 == o.length)
                    return clearInterval(u),
                    void (u = 0);
                n = !0;
                for (var t = a.default.now(), e = o.length - 1; e >= 0; e--) {
                    var i = o[e];
                    if (i && !i.delayDel) {
                        if (++i.tickCount % i.interval == 0) {
                            var s = i.bindCallback
                              , r = i.tickCount / i.interval;
                            s(t, r, i.param),
                            i.times > 0 && i.times <= r && i.tickCount > 0 && o.splice(e, 1)
                        }
                    } else
                        o.splice(e, 1)
                }
                n = !1
            }
            e.default = {
                has: function(t, e) {
                    return !!h(t, e)
                },
                add: l,
                remove: function(t, e) {
                    for (var i = 0, s = o.length; i < s; i++) {
                        var a = o[i];
                        if (a.callback == t && a.thisObj == e)
                            return n ? a.delayDel = !0 : o.splice(i, 1),
                            !0
                    }
                    return !1
                },
                once: function(t, e, i, s) {
                    l(t, e, i + 10, s, 1)
                },
                getSize: function() {
                    return o.length
                }
            }
        }
        , function(t, e, i) {
            "use strict";
            function s(t, e) {
                var i = t.toString().length
                  , s = Math.max(0, e - i);
                return "0".repeat(s) + t
            }
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var a = 0
              , r = {
                now: function() {
                    0 === a && (a = Date.now() - 1);
                    var t = Date.now() - a;
                    return t > 4294967295 ? (a += 4294967295,
                    t - 4294967295) : t
                },
                utc: function() {
                    return Math.round(Date.now() / 1e3)
                },
                getDateStr: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                      , e = null;
                    return (e = t ? new Date(t) : new Date).getFullYear() + "-" + s(e.getMonth() + 1, 2) + "-" + s(e.getDate(), 2)
                },
                getTimeStr: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                      , e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                      , i = null
                      , a = s((i = t ? new Date(t) : new Date).getHours(), 2) + ":" + s(i.getMinutes(), 2) + ":" + s(i.getSeconds(), 2);
                    return e && (a += "." + s(i.getMilliseconds(), 3)),
                    a
                },
                getDateTimeStr: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                      , e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                      , i = null
                      , a = (i = t ? new Date(t) : new Date).getFullYear() + "-" + s(i.getMonth() + 1, 2) + "-" + s(i.getDate(), 2) + " " + s(i.getHours(), 2) + ":" + s(i.getMinutes(), 2) + ":" + s(i.getSeconds(), 2);
                    return e && (a += "." + s(i.getMilliseconds(), 3)),
                    a
                }
            };
            e.default = r
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = p(i(10))
              , a = p(i(2))
              , r = p(i(3))
              , n = p(i(22))
              , o = p(i(23))
              , u = p(i(109))
              , h = p(i(211))
              , l = p(i(74))
              , c = p(i(212))
              , d = p(i(213))
              , f = p(i(50));
            function p(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var m = "wup"
              , y = "http"
              , v = new (function(t) {
                function e() {
                    (0,
                    a.default)(this, e);
                    var t = (0,
                    n.default)(this, (e.__proto__ || (0,
                    s.default)(e)).call(this));
                    return t._signalSdk = null,
                    t._waits = [],
                    t._onNoticeBind = t._onNotice.bind(t),
                    t._onkMediaPackTypeRoomStreamChangeNoticeBind = t._onkMediaPackTypeRoomStreamChangeNotice.bind(t),
                    t.SIGNAL_INIT = "SIGNAL_INIT",
                    t
                }
                return (0,
                o.default)(e, t),
                (0,
                r.default)(e, [{
                    key: "getSignalSdk",
                    value: function() {
                        return this._signalSdk
                    }
                }, {
                    key: "getTaf",
                    value: function() {
                        return this._signalSdk ? this._signalSdk.getTaf() : null
                    }
                }, {
                    key: "init",
                    value: function(t) {
                        t && this._signalSdk != t && (this.destroy(),
                        this._signalSdk = t,
                        u.default.setTaf(t.getTaf()),
                        t.registerWupMap(h.default.WupMapping),
                        t.registerUriMap(h.default.UriMapping),
                        t.on(c.default.kMediaPackTypeStreamChangeNotice, this._onNoticeBind),
                        t.on(c.default.kMediaPackTypeMediaStopStream, this._onNoticeBind),
                        t.on(c.default.kMediaPackTypeMediaChgUpStream, this._onNoticeBind),
                        t.on(c.default.kMediaPackTypeRoomStreamChangeNotice, this._onkMediaPackTypeRoomStreamChangeNoticeBind),
                        t.on(d.default.WEBSOCKET_CONNECTED, this._onNoticeBind),
                        t.on(d.default.WEBSOCKET_DOLAUNCH, this._onNoticeBind),
                        this._checkWaits(),
                        this.trigger(this.SIGNAL_INIT))
                    }
                }, {
                    key: "isWSConnected",
                    value: function() {
                        return this._signalSdk && this._signalSdk.isWSConnected()
                    }
                }, {
                    key: "isWSLaunch",
                    value: function() {
                        return this._signalSdk && this._signalSdk.isWSLaunch()
                    }
                }, {
                    key: "rspDecode",
                    value: function(t, e) {
                        return this._signalSdk && this._signalSdk.rspDecode ? this._signalSdk.rspDecode(t, e) : null
                    }
                }, {
                    key: "_checkWaits",
                    value: function() {
                        for (; this._waits.length > 0; ) {
                            var t = this._waits.shift();
                            t.type === m ? this.sendWup.apply(this, t.params) : t.type === y && this.sendWupHttp.apply(this, t.params)
                        }
                    }
                }, {
                    key: "_onNotice",
                    value: function(t, e) {
                        this.trigger(t, e)
                    }
                }, {
                    key: "_onkMediaPackTypeRoomStreamChangeNotice",
                    value: function(t) {
                        this.trigger(c.default.kMediaPackTypeRoomStreamChangeNotice, t)
                    }
                }, {
                    key: "destroy",
                    value: function() {
                        if (this._signalSdk) {
                            var t = this._signalSdk;
                            t.off(c.default.kMediaPackTypeStreamChangeNotice, this._onNoticeBind),
                            t.off(c.default.kMediaPackTypeMediaStopStream, this._onNoticeBind),
                            t.off(c.default.kMediaPackTypeMediaChgUpStream, this._onNoticeBind),
                            t.off(c.default.kMediaPackTypeRoomStreamChangeNotice, this._onkMediaPackTypeRoomStreamChangeNoticeBind)
                        }
                        this._signalSdk = null
                    }
                }, {
                    key: "sendWup",
                    value: function(t, e, i) {
                        var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                          , a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;
                        this._signalSdk ? this._signalSdk.sendWup(t, e, i, s, a) : this._waits.push({
                            type: m,
                            params: [t, e, i, s, a]
                        })
                    }
                }, {
                    key: "sendWupHttp",
                    value: function(t, e, i, s) {
                        this._signalSdk ? this._signalSdk.sendWupHttp(t, e, i, s) : this._waits.push({
                            type: y,
                            params: [t, e, i, s]
                        })
                    }
                }, {
                    key: "sendDataMetric",
                    value: function(t) {
                        this._signalSdk && this._signalSdk.sendDataMetric(t, (2 === f.default.wap ? "wap" : "webh5") + "&2411271811&websocket")
                    }
                }]),
                e
            }(l.default));
            e.default = v
        }
        , function(t, e, i) {
            var s = i(53)
              , a = Math.min;
            t.exports = function(t) {
                return t > 0 ? a(s(t), 9007199254740991) : 0
            }
        }
        , function(t, e) {
            var i = 0
              , s = Math.random();
            t.exports = function(t) {
                return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++i + s).toString(36))
            }
        }
        , function(t, e, i) {
            var s = i(33)
              , a = i(6)("toStringTag")
              , r = "Arguments" == s(function() {
                return arguments
            }());
            t.exports = function(t) {
                var e, i, n;
                return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (i = function(t, e) {
                    try {
                        return t[e]
                    } catch (t) {}
                }(e = Object(t), a)) ? i : r ? s(e) : "Object" == (n = s(e)) && "function" == typeof e.callee ? "Arguments" : n
            }
        }
        , function(t, e, i) {
            var s = i(43)("meta")
              , a = i(5)
              , r = i(15)
              , n = i(9).f
              , o = 0
              , u = Object.isExtensible || function() {
                return !0
            }
              , h = !i(14)((function() {
                return u(Object.preventExtensions({}))
            }
            ))
              , l = function(t) {
                n(t, s, {
                    value: {
                        i: "O" + ++o,
                        w: {}
                    }
                })
            }
              , c = t.exports = {
                KEY: s,
                NEED: !1,
                fastKey: function(t, e) {
                    if (!a(t))
                        return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
                    if (!r(t, s)) {
                        if (!u(t))
                            return "F";
                        if (!e)
                            return "E";
                        l(t)
                    }
                    return t[s].i
                },
                getWeak: function(t, e) {
                    if (!r(t, s)) {
                        if (!u(t))
                            return !0;
                        if (!e)
                            return !1;
                        l(t)
                    }
                    return t[s].w
                },
                onFreeze: function(t) {
                    return h && c.NEED && u(t) && !r(t, s) && l(t),
                    t
                }
            }
        }
        , function(t, e, i) {
            var s = i(36)
              , a = i(29)
              , r = i(16)
              , n = i(52)
              , o = i(15)
              , u = i(77)
              , h = Object.getOwnPropertyDescriptor;
            e.f = i(7) ? h : function(t, e) {
                if (t = r(t),
                e = n(e, !0),
                u)
                    try {
                        return h(t, e)
                    } catch (t) {}
                if (o(t, e))
                    return a(!s.f.call(t, e), t[e])
            }
        }
        , function(t, e, i) {
            e.f = i(6)
        }
        , function(t, e, i) {
            t.exports = {
                default: i(176),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = i(17);
            e.default = s.PlayerEvents
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.default = {
                1: "web",
                2: "wap",
                web: 1,
                wap: 2
            }
        }
        , function(t, e, i) {
            var s = i(5)
              , a = i(4).document
              , r = s(a) && s(a.createElement);
            t.exports = function(t) {
                return r ? a.createElement(t) : {}
            }
        }
        , function(t, e, i) {
            var s = i(5);
            t.exports = function(t, e) {
                if (!s(t))
                    return t;
                var i, a;
                if (e && "function" == typeof (i = t.toString) && !s(a = i.call(t)))
                    return a;
                if ("function" == typeof (i = t.valueOf) && !s(a = i.call(t)))
                    return a;
                if (!e && "function" == typeof (i = t.toString) && !s(a = i.call(t)))
                    return a;
                throw TypeError("Can't convert object to primitive value")
            }
        }
        , function(t, e) {
            var i = Math.ceil
              , s = Math.floor;
            t.exports = function(t) {
                return isNaN(t = +t) ? 0 : (t > 0 ? s : i)(t)
            }
        }
        , function(t, e) {
            t.exports = function(t) {
                if (null == t)
                    throw TypeError("Can't call method on  " + t);
                return t
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(31)
              , a = i(1)
              , r = i(78)
              , n = i(13)
              , o = i(24)
              , u = i(125)
              , h = i(34)
              , l = i(60)
              , c = i(6)("iterator")
              , d = !([].keys && "next"in [].keys())
              , f = function() {
                return this
            };
            t.exports = function(t, e, i, p, m, y, v) {
                u(i, e, p);
                var _, g, S, T = function(t) {
                    if (!d && t in I)
                        return I[t];
                    switch (t) {
                    case "keys":
                    case "values":
                        return function() {
                            return new i(this,t)
                        }
                    }
                    return function() {
                        return new i(this,t)
                    }
                }, P = e + " Iterator", k = "values" == m, E = !1, I = t.prototype, b = I[c] || I["@@iterator"] || m && I[m], C = b || T(m), w = m ? k ? T("entries") : C : void 0, A = "Array" == e && I.entries || b;
                if (A && (S = l(A.call(new t))) !== Object.prototype && S.next && (h(S, P, !0),
                s || "function" == typeof S[c] || n(S, c, f)),
                k && b && "values" !== b.name && (E = !0,
                C = function() {
                    return b.call(this)
                }
                ),
                s && !v || !d && !E && I[c] || n(I, c, C),
                o[e] = C,
                o[P] = f,
                m)
                    if (_ = {
                        values: k ? C : T("values"),
                        keys: y ? C : T("keys"),
                        entries: w
                    },
                    v)
                        for (g in _)
                            g in I || r(I, g, _[g]);
                    else
                        a(a.P + a.F * (d || E), e, _);
                return _
            }
        }
        , function(t, e, i) {
            var s = i(33);
            t.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t) {
                return "String" == s(t) ? t.split("") : Object(t)
            }
        }
        , function(t, e, i) {
            var s = i(58)("keys")
              , a = i(43);
            t.exports = function(t) {
                return s[t] || (s[t] = a(t))
            }
        }
        , function(t, e, i) {
            var s = i(0)
              , a = i(4)
              , r = a["__core-js_shared__"] || (a["__core-js_shared__"] = {});
            (t.exports = function(t, e) {
                return r[t] || (r[t] = void 0 !== e ? e : {})
            }
            )("versions", []).push({
                version: s.version,
                mode: i(31) ? "pure" : "global",
                copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
            })
        }
        , function(t, e) {
            t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
        }
        , function(t, e, i) {
            var s = i(15)
              , a = i(20)
              , r = i(57)("IE_PROTO")
              , n = Object.prototype;
            t.exports = Object.getPrototypeOf || function(t) {
                return t = a(t),
                s(t, r) ? t[r] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? n : null
            }
        }
        , function(t, e, i) {
            var s = i(13);
            t.exports = function(t, e, i) {
                for (var a in e)
                    i && t[a] ? t[a] = e[a] : s(t, a, e[a]);
                return t
            }
        }
        , function(t, e) {
            t.exports = function(t, e, i, s) {
                if (!(t instanceof e) || void 0 !== s && s in t)
                    throw TypeError(i + ": incorrect invocation!");
                return t
            }
        }
        , function(t, e, i) {
            var s = i(44)
              , a = i(6)("iterator")
              , r = i(24);
            t.exports = i(0).getIteratorMethod = function(t) {
                if (null != t)
                    return t[a] || t["@@iterator"] || r[s(t)]
            }
        }
        , function(t, e, i) {
            var s = i(5);
            t.exports = function(t, e) {
                if (!s(t) || t._t !== e)
                    throw TypeError("Incompatible receiver, " + e + " required!");
                return t
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(18);
            function a(t) {
                var e, i;
                this.promise = new t((function(t, s) {
                    if (void 0 !== e || void 0 !== i)
                        throw TypeError("Bad Promise constructor");
                    e = t,
                    i = s
                }
                )),
                this.resolve = s(e),
                this.reject = s(i)
            }
            t.exports.f = function(t) {
                return new a(t)
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(150),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            var s = i(4)
              , a = i(0)
              , r = i(31)
              , n = i(47)
              , o = i(9).f;
            t.exports = function(t) {
                var e = a.Symbol || (a.Symbol = r ? {} : s.Symbol || {});
                "_" == t.charAt(0) || t in e || o(e, t, {
                    value: n.f(t)
                })
            }
        }
        , function(t, e) {
            e.f = Object.getOwnPropertySymbols
        }
        , function(t, e, i) {
            t.exports = {
                default: i(171),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(180),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(191),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(193),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(197),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = n(i(2))
              , a = n(i(3))
              , r = n(i(12));
            function n(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var o = function() {
                function t() {
                    (0,
                    s.default)(this, t),
                    this.listeners = {}
                }
                return (0,
                a.default)(t, [{
                    key: "has",
                    value: function(t, e, i) {
                        var s = this.listeners[t];
                        if (!s)
                            return !1;
                        for (var a = 0, r = s.length; a < r; a++) {
                            var n = s[a];
                            if (n.callback == e && n.thisObj == i)
                                return !0
                        }
                        return !1
                    }
                }, {
                    key: "on",
                    value: function(t, e, i, s) {
                        var a = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                        if (!this.has(t, e, i)) {
                            var r = this.listeners[t] || [];
                            r.push({
                                once: a,
                                priority: s || 0,
                                callback: e,
                                thisObj: i,
                                bindCallback: i && e ? e.bind(i) : e
                            }),
                            r.sort((function(t, e) {
                                return e.priority - t.priority
                            }
                            )),
                            this.listeners[t] = r
                        }
                    }
                }, {
                    key: "once",
                    value: function(t, e, i, s) {
                        this.on(t, e, i, s, !0)
                    }
                }, {
                    key: "off",
                    value: function(t, e, i) {
                        var s = this.listeners[t];
                        if (s)
                            for (var a = s.length - 1; a >= 0; a--) {
                                var r = s[a];
                                if (r.callback == e && r.thisObj == i)
                                    return void s.splice(a, 1)
                            }
                    }
                }, {
                    key: "clear",
                    value: function() {
                        this.listeners = {}
                    }
                }, {
                    key: "trigger",
                    value: function(t, e, i) {
                        var s = this.listeners[t];
                        if (s) {
                            s.forEach((function(s) {
                                var a = s.bindCallback;
                                "function" == typeof a ? a(e, i) : r.default.warn("logger.trigger uri=" + t + " callback=undefined", s)
                            }
                            ));
                            for (var a = s.length - 1; a >= 0; a--)
                                s[a].once && s.splice(a, 1)
                        }
                    }
                }]),
                t
            }();
            e.default = o
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = localStorage || {};
            e.default = s
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = l(i(37))
              , a = l(i(2))
              , r = l(i(3))
              , n = l(i(21))
              , o = l(i(41))
              , u = l(i(50))
              , h = l(i(113));
            function l(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var c = new (function() {
                function t() {
                    (0,
                    a.default)(this, t),
                    this.anonymousuid = 0,
                    this.myid = 0
                }
                return (0,
                r.default)(t, [{
                    key: "onNimoDataMetric2",
                    value: function(t, e, i, a, r, l, c, d, f, p) {
                        var m = {
                            anchoruid: e,
                            line: r,
                            coderate: i,
                            coderatebps: 1e3 * i,
                            gameId: d,
                            place_p: l,
                            room_id: c,
                            stream_from: p,
                            platform_h5: u.default[2],
                            appid: n.default.appId,
                            p2p_cool_flag: n.default.isLogin ? 1 : 0,
                            oexp: n.default.sCookie
                        };
                        f && (m.oexp = f),
                        0 == this.myid && (m.anonymousuid = 0 == this.anonymousuid ? h.default.getAnonymousUid() : this.anonymousuid),
                        t.forEach((function(t) {
                            t.vDimension || (t.vDimension = {}),
                            (0,
                            s.default)(t.vDimension, m)
                        }
                        )),
                        o.default.sendDataMetric(t)
                    }
                }]),
                t
            }());
            e.default = c
        }
        , function(t, e, i) {
            t.exports = !i(7) && !i(14)((function() {
                return 7 != Object.defineProperty(i(51)("div"), "a", {
                    get: function() {
                        return 7
                    }
                }).a
            }
            ))
        }
        , function(t, e, i) {
            t.exports = i(13)
        }
        , function(t, e, i) {
            var s = i(9)
              , a = i(8)
              , r = i(25);
            t.exports = i(7) ? Object.defineProperties : function(t, e) {
                a(t);
                for (var i, n = r(e), o = n.length, u = 0; o > u; )
                    s.f(t, i = n[u++], e[i]);
                return t
            }
        }
        , function(t, e, i) {
            var s = i(15)
              , a = i(16)
              , r = i(126)(!1)
              , n = i(57)("IE_PROTO");
            t.exports = function(t, e) {
                var i, o = a(t), u = 0, h = [];
                for (i in o)
                    i != n && s(o, i) && h.push(i);
                for (; e.length > u; )
                    s(o, i = e[u++]) && (~r(h, i) || h.push(i));
                return h
            }
        }
        , function(t, e, i) {
            var s = i(4).document;
            t.exports = s && s.documentElement
        }
        , function(t, e) {
            t.exports = function(t, e) {
                return {
                    value: e,
                    done: !!t
                }
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(9).f
              , a = i(32)
              , r = i(61)
              , n = i(11)
              , o = i(62)
              , u = i(35)
              , h = i(55)
              , l = i(82)
              , c = i(86)
              , d = i(7)
              , f = i(45).fastKey
              , p = i(64)
              , m = d ? "_s" : "size"
              , y = function(t, e) {
                var i, s = f(e);
                if ("F" !== s)
                    return t._i[s];
                for (i = t._f; i; i = i.n)
                    if (i.k == e)
                        return i
            };
            t.exports = {
                getConstructor: function(t, e, i, h) {
                    var l = t((function(t, s) {
                        o(t, l, e, "_i"),
                        t._t = e,
                        t._i = a(null),
                        t._f = void 0,
                        t._l = void 0,
                        t[m] = 0,
                        null != s && u(s, i, t[h], t)
                    }
                    ));
                    return r(l.prototype, {
                        clear: function() {
                            for (var t = p(this, e), i = t._i, s = t._f; s; s = s.n)
                                s.r = !0,
                                s.p && (s.p = s.p.n = void 0),
                                delete i[s.i];
                            t._f = t._l = void 0,
                            t[m] = 0
                        },
                        delete: function(t) {
                            var i = p(this, e)
                              , s = y(i, t);
                            if (s) {
                                var a = s.n
                                  , r = s.p;
                                delete i._i[s.i],
                                s.r = !0,
                                r && (r.n = a),
                                a && (a.p = r),
                                i._f == s && (i._f = a),
                                i._l == s && (i._l = r),
                                i[m]--
                            }
                            return !!s
                        },
                        forEach: function(t) {
                            p(this, e);
                            for (var i, s = n(t, arguments.length > 1 ? arguments[1] : void 0, 3); i = i ? i.n : this._f; )
                                for (s(i.v, i.k, this); i && i.r; )
                                    i = i.p
                        },
                        has: function(t) {
                            return !!y(p(this, e), t)
                        }
                    }),
                    d && s(l.prototype, "size", {
                        get: function() {
                            return p(this, e)[m]
                        }
                    }),
                    l
                },
                def: function(t, e, i) {
                    var s, a, r = y(t, e);
                    return r ? r.v = i : (t._l = r = {
                        i: a = f(e, !0),
                        k: e,
                        v: i,
                        p: s = t._l,
                        n: void 0,
                        r: !1
                    },
                    t._f || (t._f = r),
                    s && (s.n = r),
                    t[m]++,
                    "F" !== a && (t._i[a] = r)),
                    t
                },
                getEntry: y,
                setStrong: function(t, e, i) {
                    h(t, e, (function(t, i) {
                        this._t = p(t, e),
                        this._k = i,
                        this._l = void 0
                    }
                    ), (function() {
                        for (var t = this._k, e = this._l; e && e.r; )
                            e = e.p;
                        return this._t && (this._l = e = e ? e.n : this._t._f) ? l(0, "keys" == t ? e.k : "values" == t ? e.v : [e.k, e.v]) : (this._t = void 0,
                        l(1))
                    }
                    ), i ? "entries" : "values", !i, !0),
                    c(e)
                }
            }
        }
        , function(t, e, i) {
            var s = i(8);
            t.exports = function(t, e, i, a) {
                try {
                    return a ? e(s(i)[0], i[1]) : e(i)
                } catch (e) {
                    var r = t.return;
                    throw void 0 !== r && s(r.call(t)),
                    e
                }
            }
        }
        , function(t, e, i) {
            var s = i(24)
              , a = i(6)("iterator")
              , r = Array.prototype;
            t.exports = function(t) {
                return void 0 !== t && (s.Array === t || r[a] === t)
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(4)
              , a = i(0)
              , r = i(9)
              , n = i(7)
              , o = i(6)("species");
            t.exports = function(t) {
                var e = "function" == typeof a[t] ? a[t] : s[t];
                n && e && !e[o] && r.f(e, o, {
                    configurable: !0,
                    get: function() {
                        return this
                    }
                })
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(4)
              , a = i(1)
              , r = i(45)
              , n = i(14)
              , o = i(13)
              , u = i(61)
              , h = i(35)
              , l = i(62)
              , c = i(5)
              , d = i(34)
              , f = i(9).f
              , p = i(131)(0)
              , m = i(7);
            t.exports = function(t, e, i, y, v, _) {
                var g = s[t]
                  , S = g
                  , T = v ? "set" : "add"
                  , P = S && S.prototype
                  , k = {};
                return m && "function" == typeof S && (_ || P.forEach && !n((function() {
                    (new S).entries().next()
                }
                ))) ? (S = e((function(e, i) {
                    l(e, S, t, "_c"),
                    e._c = new g,
                    null != i && h(i, v, e[T], e)
                }
                )),
                p("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","), (function(t) {
                    var e = "add" == t || "set" == t;
                    !(t in P) || _ && "clear" == t || o(S.prototype, t, (function(i, s) {
                        if (l(this, S, t),
                        !e && _ && !c(i))
                            return "get" == t && void 0;
                        var a = this._c[t](0 === i ? 0 : i, s);
                        return e ? this : a
                    }
                    ))
                }
                )),
                _ || f(S.prototype, "size", {
                    get: function() {
                        return this._c.size
                    }
                })) : (S = y.getConstructor(e, t, v, T),
                u(S.prototype, i),
                r.NEED = !0),
                d(S, t),
                k[t] = S,
                a(a.G + a.W + a.F, k),
                _ || y.setStrong(S, t, v),
                S
            }
        }
        , function(t, e, i) {
            var s = i(33);
            t.exports = Array.isArray || function(t) {
                return "Array" == s(t)
            }
        }
        , function(t, e, i) {
            var s = i(44)
              , a = i(135);
            t.exports = function(t) {
                return function() {
                    if (s(this) != t)
                        throw TypeError(t + "#toJSON isn't generic");
                    return a(this)
                }
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(1);
            t.exports = function(t) {
                s(s.S, t, {
                    of: function() {
                        for (var t = arguments.length, e = new Array(t); t--; )
                            e[t] = arguments[t];
                        return new this(e)
                    }
                })
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(1)
              , a = i(18)
              , r = i(11)
              , n = i(35);
            t.exports = function(t) {
                s(s.S, t, {
                    from: function(t) {
                        var e, i, s, o, u = arguments[1];
                        return a(this),
                        (e = void 0 !== u) && a(u),
                        null == t ? new this : (i = [],
                        e ? (s = 0,
                        o = r(u, arguments[2], 2),
                        n(t, !1, (function(t) {
                            i.push(o(t, s++))
                        }
                        ))) : n(t, !1, i.push, i),
                        new this(i))
                    }
                })
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(142),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            var s = i(8)
              , a = i(18)
              , r = i(6)("species");
            t.exports = function(t, e) {
                var i, n = s(t).constructor;
                return void 0 === n || null == (i = s(n)[r]) ? e : a(i)
            }
        }
        , function(t, e, i) {
            var s, a, r, n = i(11), o = i(95), u = i(81), h = i(51), l = i(4), c = l.process, d = l.setImmediate, f = l.clearImmediate, p = l.MessageChannel, m = l.Dispatch, y = 0, v = {}, _ = function() {
                var t = +this;
                if (v.hasOwnProperty(t)) {
                    var e = v[t];
                    delete v[t],
                    e()
                }
            }, g = function(t) {
                _.call(t.data)
            };
            d && f || (d = function(t) {
                for (var e = [], i = 1; arguments.length > i; )
                    e.push(arguments[i++]);
                return v[++y] = function() {
                    o("function" == typeof t ? t : Function(t), e)
                }
                ,
                s(y),
                y
            }
            ,
            f = function(t) {
                delete v[t]
            }
            ,
            "process" == i(33)(c) ? s = function(t) {
                c.nextTick(n(_, t, 1))
            }
            : m && m.now ? s = function(t) {
                m.now(n(_, t, 1))
            }
            : p ? (r = (a = new p).port2,
            a.port1.onmessage = g,
            s = n(r.postMessage, r, 1)) : l.addEventListener && "function" == typeof postMessage && !l.importScripts ? (s = function(t) {
                l.postMessage(t + "", "*")
            }
            ,
            l.addEventListener("message", g, !1)) : s = "onreadystatechange"in h("script") ? function(t) {
                u.appendChild(h("script")).onreadystatechange = function() {
                    u.removeChild(this),
                    _.call(t)
                }
            }
            : function(t) {
                setTimeout(n(_, t, 1), 0)
            }
            ),
            t.exports = {
                set: d,
                clear: f
            }
        }
        , function(t, e) {
            t.exports = function(t, e, i) {
                var s = void 0 === i;
                switch (e.length) {
                case 0:
                    return s ? t() : t.call(i);
                case 1:
                    return s ? t(e[0]) : t.call(i, e[0]);
                case 2:
                    return s ? t(e[0], e[1]) : t.call(i, e[0], e[1]);
                case 3:
                    return s ? t(e[0], e[1], e[2]) : t.call(i, e[0], e[1], e[2]);
                case 4:
                    return s ? t(e[0], e[1], e[2], e[3]) : t.call(i, e[0], e[1], e[2], e[3])
                }
                return t.apply(i, e)
            }
        }
        , function(t, e) {
            t.exports = function(t) {
                try {
                    return {
                        e: !1,
                        v: t()
                    }
                } catch (t) {
                    return {
                        e: !0,
                        v: t
                    }
                }
            }
        }
        , function(t, e, i) {
            var s = i(8)
              , a = i(5)
              , r = i(65);
            t.exports = function(t, e) {
                if (s(t),
                a(e) && e.constructor === t)
                    return e;
                var i = r.f(t);
                return (0,
                i.resolve)(e),
                i.promise
            }
        }
        , function(t, e, i) {
            var s = i(6)("iterator")
              , a = !1;
            try {
                var r = [7][s]();
                r.return = function() {
                    a = !0
                }
                ,
                Array.from(r, (function() {
                    throw 2
                }
                ))
            } catch (t) {}
            t.exports = function(t, e) {
                if (!e && !a)
                    return !1;
                var i = !1;
                try {
                    var r = [7]
                      , n = r[s]();
                    n.next = function() {
                        return {
                            done: i = !0
                        }
                    }
                    ,
                    r[s] = function() {
                        return n
                    }
                    ,
                    t(r)
                } catch (t) {}
                return i
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(148),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(159),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(162),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(167),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            var s = i(16)
              , a = i(104).f
              , r = {}.toString
              , n = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
            t.exports.f = function(t) {
                return n && "[object Window]" == r.call(t) ? function(t) {
                    try {
                        return a(t)
                    } catch (t) {
                        return n.slice()
                    }
                }(t) : a(s(t))
            }
        }
        , function(t, e, i) {
            var s = i(80)
              , a = i(59).concat("length", "prototype");
            e.f = Object.getOwnPropertyNames || function(t) {
                return s(t, a)
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(169),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(4)
              , a = i(15)
              , r = i(7)
              , n = i(1)
              , o = i(78)
              , u = i(45).KEY
              , h = i(14)
              , l = i(58)
              , c = i(34)
              , d = i(43)
              , f = i(6)
              , p = i(47)
              , m = i(67)
              , y = i(170)
              , v = i(88)
              , _ = i(8)
              , g = i(5)
              , S = i(20)
              , T = i(16)
              , P = i(52)
              , k = i(29)
              , E = i(32)
              , I = i(103)
              , b = i(46)
              , C = i(68)
              , w = i(9)
              , A = i(25)
              , R = b.f
              , L = w.f
              , B = I.f
              , D = s.Symbol
              , O = s.JSON
              , M = O && O.stringify
              , F = f("_hidden")
              , U = f("toPrimitive")
              , N = {}.propertyIsEnumerable
              , x = l("symbol-registry")
              , V = l("symbols")
              , H = l("op-symbols")
              , G = Object.prototype
              , j = "function" == typeof D && !!C.f
              , Y = s.QObject
              , W = !Y || !Y.prototype || !Y.prototype.findChild
              , q = r && h((function() {
                return 7 != E(L({}, "a", {
                    get: function() {
                        return L(this, "a", {
                            value: 7
                        }).a
                    }
                })).a
            }
            )) ? function(t, e, i) {
                var s = R(G, e);
                s && delete G[e],
                L(t, e, i),
                s && t !== G && L(G, e, s)
            }
            : L
              , K = function(t) {
                var e = V[t] = E(D.prototype);
                return e._k = t,
                e
            }
              , z = j && "symbol" == typeof D.iterator ? function(t) {
                return "symbol" == typeof t
            }
            : function(t) {
                return t instanceof D
            }
              , X = function(t, e, i) {
                return t === G && X(H, e, i),
                _(t),
                e = P(e, !0),
                _(i),
                a(V, e) ? (i.enumerable ? (a(t, F) && t[F][e] && (t[F][e] = !1),
                i = E(i, {
                    enumerable: k(0, !1)
                })) : (a(t, F) || L(t, F, k(1, {})),
                t[F][e] = !0),
                q(t, e, i)) : L(t, e, i)
            }
              , J = function(t, e) {
                _(t);
                for (var i, s = y(e = T(e)), a = 0, r = s.length; r > a; )
                    X(t, i = s[a++], e[i]);
                return t
            }
              , Q = function(t) {
                var e = N.call(this, t = P(t, !0));
                return !(this === G && a(V, t) && !a(H, t)) && (!(e || !a(this, t) || !a(V, t) || a(this, F) && this[F][t]) || e)
            }
              , Z = function(t, e) {
                if (t = T(t),
                e = P(e, !0),
                t !== G || !a(V, e) || a(H, e)) {
                    var i = R(t, e);
                    return !i || !a(V, e) || a(t, F) && t[F][e] || (i.enumerable = !0),
                    i
                }
            }
              , $ = function(t) {
                for (var e, i = B(T(t)), s = [], r = 0; i.length > r; )
                    a(V, e = i[r++]) || e == F || e == u || s.push(e);
                return s
            }
              , tt = function(t) {
                for (var e, i = t === G, s = B(i ? H : T(t)), r = [], n = 0; s.length > n; )
                    !a(V, e = s[n++]) || i && !a(G, e) || r.push(V[e]);
                return r
            };
            j || (o((D = function() {
                if (this instanceof D)
                    throw TypeError("Symbol is not a constructor!");
                var t = d(arguments.length > 0 ? arguments[0] : void 0)
                  , e = function(i) {
                    this === G && e.call(H, i),
                    a(this, F) && a(this[F], t) && (this[F][t] = !1),
                    q(this, t, k(1, i))
                };
                return r && W && q(G, t, {
                    configurable: !0,
                    set: e
                }),
                K(t)
            }
            ).prototype, "toString", (function() {
                return this._k
            }
            )),
            b.f = Z,
            w.f = X,
            i(104).f = I.f = $,
            i(36).f = Q,
            C.f = tt,
            r && !i(31) && o(G, "propertyIsEnumerable", Q, !0),
            p.f = function(t) {
                return K(f(t))
            }
            ),
            n(n.G + n.W + n.F * !j, {
                Symbol: D
            });
            for (var et = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), it = 0; et.length > it; )
                f(et[it++]);
            for (var st = A(f.store), at = 0; st.length > at; )
                m(st[at++]);
            n(n.S + n.F * !j, "Symbol", {
                for: function(t) {
                    return a(x, t += "") ? x[t] : x[t] = D(t)
                },
                keyFor: function(t) {
                    if (!z(t))
                        throw TypeError(t + " is not a symbol!");
                    for (var e in x)
                        if (x[e] === t)
                            return e
                },
                useSetter: function() {
                    W = !0
                },
                useSimple: function() {
                    W = !1
                }
            }),
            n(n.S + n.F * !j, "Object", {
                create: function(t, e) {
                    return void 0 === e ? E(t) : J(E(t), e)
                },
                defineProperty: X,
                defineProperties: J,
                getOwnPropertyDescriptor: Z,
                getOwnPropertyNames: $,
                getOwnPropertySymbols: tt
            });
            var rt = h((function() {
                C.f(1)
            }
            ));
            n(n.S + n.F * rt, "Object", {
                getOwnPropertySymbols: function(t) {
                    return C.f(S(t))
                }
            }),
            O && n(n.S + n.F * (!j || h((function() {
                var t = D();
                return "[null]" != M([t]) || "{}" != M({
                    a: t
                }) || "{}" != M(Object(t))
            }
            ))), "JSON", {
                stringify: function(t) {
                    for (var e, i, s = [t], a = 1; arguments.length > a; )
                        s.push(arguments[a++]);
                    if (i = e = s[1],
                    (g(e) || void 0 !== t) && !z(t))
                        return v(e) || (e = function(t, e) {
                            if ("function" == typeof i && (e = i.call(this, t, e)),
                            !z(e))
                                return e
                        }
                        ),
                        s[1] = e,
                        M.apply(O, s)
                }
            }),
            D.prototype[U] || i(13)(D.prototype, U, D.prototype.valueOf),
            c(D, "Symbol"),
            c(Math, "Math", !0),
            c(s.JSON, "JSON", !0)
        }
        , function(t, e, i) {
            t.exports = {
                default: i(183),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(196),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = i(17);
            e.default = s.HUYA
        }
        , function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = r(i(10))
              , a = r(i(66));
            function r(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            e.default = function t(e, i, r) {
                null === e && (e = Function.prototype);
                var n = (0,
                a.default)(e, i);
                if (void 0 === n) {
                    var o = (0,
                    s.default)(e);
                    return null === o ? void 0 : t(o, i, r)
                }
                if ("value"in n)
                    return n.value;
                var u = n.get;
                return void 0 !== u ? u.call(r) : void 0
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = u(i(48))
              , a = u(i(37))
              , r = u(i(69))
              , n = u(i(2))
              , o = u(i(3));
            function u(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var h = function() {
                function t() {
                    (0,
                    n.default)(this, t),
                    this.comDim = new r.default,
                    this.coreDim = new r.default,
                    this.actDim = new r.default,
                    this.extDim = new r.default,
                    this.coreMap = new r.default,
                    this.compMap = new r.default,
                    this.heart_type = 0
                }
                return (0,
                o.default)(t, [{
                    key: "reset",
                    value: function() {
                        this.comDim.clear(),
                        this.coreDim.clear(),
                        this.actDim.clear(),
                        this.extDim.clear(),
                        this.coreMap.clear(),
                        this.compMap.clear(),
                        this.heart_type = 0
                    }
                }, {
                    key: "createAct",
                    value: function(t, e) {
                        return this._createAct(t, e)
                    }
                }, {
                    key: "_createAct",
                    value: function(t, e) {
                        var i = {
                            sMetricName: "yspwl.web.live.user.act",
                            vField: {},
                            vDimension: {}
                        };
                        if (i.vDimension.act_type = t,
                        this._fillFromMap(i.vDimension, this.comDim),
                        this._fillFromMap(i.vDimension, this.actDim),
                        e) {
                            var s = 0;
                            if (e.hasOwnProperty("value")) {
                                var r = e.value;
                                for (s = 0; s < r.length; s++)
                                    i.vField["value" + (s + 1)] = r[s]
                            }
                            if (e.hasOwnProperty("str")) {
                                var n = e.str;
                                for (s = 0; s < n.length; s++)
                                    i.vDimension["str" + (s + 1)] = n[s]
                            }
                            e.hasOwnProperty("dim") && (0,
                            a.default)(i.vDimension, e.dim)
                        }
                        return this.actDim.clear(),
                        i
                    }
                }, {
                    key: "fill",
                    value: function(t, e) {
                        e ? (this.heart_type = 2,
                        this._fill(t)) : this._fill(t)
                    }
                }, {
                    key: "_fill",
                    value: function(t) {
                        var e = {
                            sMetricName: "yspwl.web.live.user.heart20",
                            vField: {},
                            vDimension: {},
                            vExLog: {}
                        };
                        this.coreDim.set("heart_type", this.heart_type),
                        this._fillFromMap(e.vDimension, this.comDim),
                        this._fillFromMap(e.vDimension, this.coreDim),
                        this._fillFromMap(e.vExLog, this.extDim),
                        this._fillFromMap(e.vField, this.coreMap),
                        this._fillComp(e.vDimension),
                        this.coreDim.clear(),
                        this.extDim.clear(),
                        this.coreMap.clear(),
                        this.compMap.clear(),
                        0 == this.heart_type && (this.heart_type = 1),
                        t.push(e)
                    }
                }, {
                    key: "_fillComp",
                    value: function(t) {
                        var e = !0
                          , i = !1
                          , a = void 0;
                        try {
                            for (var r, n = (0,
                            s.default)(this.compMap.keys()); !(e = (r = n.next()).done); e = !0) {
                                var o = r.value
                                  , u = this.compMap.get(o)
                                  , h = ""
                                  , l = !0
                                  , c = !1
                                  , d = void 0;
                                try {
                                    for (var f, p = (0,
                                    s.default)(u.keys()); !(l = (f = p.next()).done); l = !0) {
                                        var m = f.value;
                                        h.length > 0 && (h += ";"),
                                        h += m + "," + u.get(m)
                                    }
                                } catch (t) {
                                    c = !0,
                                    d = t
                                } finally {
                                    try {
                                        !l && p.return && p.return()
                                    } finally {
                                        if (c)
                                            throw d
                                    }
                                }
                                t[o] = h
                            }
                        } catch (t) {
                            i = !0,
                            a = t
                        } finally {
                            try {
                                !e && n.return && n.return()
                            } finally {
                                if (i)
                                    throw a
                            }
                        }
                    }
                }, {
                    key: "_fillFromMap",
                    value: function(t, e) {
                        var i = !0
                          , a = !1
                          , r = void 0;
                        try {
                            for (var n, o = (0,
                            s.default)(e.keys()); !(i = (n = o.next()).done); i = !0) {
                                var u = n.value;
                                t[u] = e.get(u)
                            }
                        } catch (t) {
                            a = !0,
                            r = t
                        } finally {
                            try {
                                !i && o.return && o.return()
                            } finally {
                                if (a)
                                    throw r
                            }
                        }
                    }
                }, {
                    key: "setComDim",
                    value: function(t, e) {
                        this.comDim.set(t, e)
                    }
                }, {
                    key: "setCoreDim",
                    value: function(t, e) {
                        this.coreDim.set(t, e)
                    }
                }]),
                t
            }();
            e.default = h
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = S(i(28))
              , a = S(i(10))
              , r = S(i(2))
              , n = S(i(3))
              , o = S(i(22))
              , u = S(i(23))
              , h = S(i(40))
              , l = S(i(111))
              , c = S(i(39))
              , d = S(i(76))
              , f = S(i(12))
              , p = S(i(74))
              , m = S(i(114))
              , y = S(i(49))
              , v = S(i(220))
              , _ = S(i(221))
              , g = S(i(222));
            function S(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var T = function(t) {
                function e(t, i) {
                    (0,
                    r.default)(this, e);
                    var s = (0,
                    o.default)(this, (e.__proto__ || (0,
                    a.default)(e)).call(this));
                    return s._handler = t,
                    s._el = i,
                    s.pauseByUser = !1,
                    s.clickroomts = 0,
                    s.startPlayTs = 0,
                    s.businessStartCost = 0,
                    s.UIStartCost = 0,
                    s.pid = 0,
                    s.bitrate = 0,
                    s.videoSrc = "",
                    s.lineType = 0,
                    s.seekTime = 0,
                    s.roomId = 0,
                    s._tickCnt = 0,
                    s.videoInfo = null,
                    s.waiting = !1,
                    s.ended = !1,
                    s.sysPause = !1,
                    s._stat = new l.default,
                    s._pauseStat = new _.default,
                    s._tsSeg = new v.default,
                    s._initStat(),
                    s._videoEvts = ["loadstart", "pause", "loadedmetadata", "loadeddata", "error", "playing", "ended"],
                    s._videoEvtHandlerBind = s._videoEvtHandler.bind(s),
                    s
                }
                return (0,
                u.default)(e, t),
                (0,
                n.default)(e, [{
                    key: "_videoEvtHandler",
                    value: function(t) {
                        switch (t.type) {
                        case "loadstart":
                            this.onLoadStart();
                            break;
                        case "pause":
                            this.onVideoPause();
                            break;
                        case "loadedmetadata":
                            this.onLoadedmetadata();
                            break;
                        case "loadeddata":
                            this.onVideoPlay();
                            break;
                        case "error":
                            this.onVideoError(t);
                            break;
                        case "playing":
                            this.onVideoRealPlay();
                            break;
                        case "ended":
                            this.setEnded()
                        }
                    }
                }, {
                    key: "addEvents",
                    value: function() {
                        var t = this;
                        this._el && !this.hasEvents && (this.hasEvents = !0,
                        this._videoEvts.forEach((function(e) {
                            t._el.addEventListener(e, t._videoEvtHandlerBind)
                        }
                        )))
                    }
                }, {
                    key: "delEvents",
                    value: function() {
                        var t = this;
                        this._el && this.hasEvents && (this.hasEvents = !1,
                        this._videoEvts.forEach((function(e) {
                            t._el.removeEventListener(e, t._videoEvtHandlerBind)
                        }
                        )))
                    }
                }, {
                    key: "_initStat",
                    value: function() {}
                }, {
                    key: "startPlay",
                    value: function(t) {
                        f.default.log("TagPlayer.startPlay", (0,
                        s.default)(t)),
                        this.videoInfo = t;
                        var e = t.url
                          , i = t.uistartTs
                          , a = t.startTimeStamp
                          , r = t.pid
                          , n = t.bitrate
                          , o = t.bLive
                          , u = t.lineType
                          , l = t.place
                          , d = t.playTimeout;
                        this._tsSeg.reset(),
                        this._stat.setComDim("live_type", o ? 1 : 2),
                        this._stat.setComDim("stream_url", e);
                        var p = h.default.now();
                        this._tsSeg.srcTs = p,
                        this.startPlayTs = p,
                        this.uistartTs = i,
                        this.pid = r,
                        this.bitrate = n,
                        this.videoSrc = e,
                        this.lineType = u,
                        this.place = l,
                        this.UIStartCost = 0,
                        this.businessStartCost = a ? p - a : 0,
                        this.uistartTs && this.uistartTs > 0 && (this.UIStartCost = p - this.uistartTs),
                        this.waiting = !1,
                        this.ended = !1,
                        this.playing = !1,
                        this.realPlaying = !1,
                        this.sysPause = !1,
                        this.addEvents(),
                        this._el.src = e,
                        this._tickCnt = 0,
                        c.default.add(this.onCheckTimer, this, 1e3),
                        c.default.remove(this.onPlayTimeout, this),
                        this._el.autoplay && (c.default.once(this.onPlayTimeout, this, d || 2e4),
                        this._play("startPlay"))
                    }
                }, {
                    key: "onPlayTimeout",
                    value: function() {
                        this._el && (f.default.log("TagPlayer.onPlayTimeout----------", navigator.userAgent, this._el.paused, this.pauseByUser),
                        this._el.paused ? (f.default.log("PlayerEvents.VIDEO_PAUSE"),
                        !this.pauseByUser && this._handler && this._handler.trigger(y.default.VIDEO_PAUSE)) : g.default.isXiaomi(navigator.userAgent) || 0 !== this._el.currentTime || (f.default.log("PlayerEvents.PLAY_TIMEOUT"),
                        this._handler && this._handler.trigger(y.default.PLAY_TIMEOUT)))
                    }
                }, {
                    key: "setCurrentTime",
                    value: function(t, e) {
                        0 !== this._el.duration && (t !== Math.ceil(this._el.duration) ? (this.seekTime = t,
                        this._el.currentTime = t,
                        c.default.remove(this.onPlayTimeout, this),
                        c.default.once(this.onSeekTimeout, this, e || 2e4)) : this.setEnded())
                    }
                }, {
                    key: "onSeekTimeout",
                    value: function() {
                        this.seekTime > 0 && this.seekTime === this._el.currentTime && !this.pauseByUser && (this.seekTime = 0,
                        this._handler && this._handler.trigger(y.default.SEEK_TIMEOUT))
                    }
                }, {
                    key: "getCurrentTime",
                    value: function() {
                        return this._el.currentTime
                    }
                }, {
                    key: "getDurationTime",
                    value: function() {
                        return this._el.duration
                    }
                }, {
                    key: "setVolume",
                    value: function(t) {
                        this._el && (this._el.volume = t)
                    }
                }, {
                    key: "play",
                    value: function() {
                        this.pauseByUser = !1,
                        this.addEvents(),
                        this._play("play")
                    }
                }, {
                    key: "_play",
                    value: function(t) {
                        var e = this
                          , i = this._el.play();
                        i && i.then((function(e) {
                            f.default.log("TagPlayer." + t + " suc")
                        }
                        )).catch((function(i) {
                            f.default.log("TagPlayer." + t + i.toString()),
                            e.trigger(y.default.AUTO_PLAY_ERR)
                        }
                        ))
                    }
                }, {
                    key: "pause",
                    value: function() {
                        this.pauseByUser = !0,
                        this.delEvents(),
                        this._el.pause()
                    }
                }, {
                    key: "stop",
                    value: function() {
                        this._el.pause(),
                        this._el.src = "",
                        this.delEvents(),
                        c.default.remove(this.onPlayTimeout, this),
                        c.default.remove(this.onCheckTimer, this),
                        c.default.remove(this.onCheckFastTimer, this)
                    }
                }, {
                    key: "setPlayerConfig",
                    value: function(t) {}
                }, {
                    key: "dispose",
                    value: function() {
                        this.stop()
                    }
                }, {
                    key: "reset",
                    value: function() {
                        this.stop()
                    }
                }, {
                    key: "onCheckTimer",
                    value: function(t, e) {
                        this._tickCnt++,
                        !this.playing || this.pauseByUser || this.sysPause || this._tickCnt % 20 != 0 || this.reportVideoQuality()
                    }
                }, {
                    key: "onCheckFastTimer",
                    value: function(t, e) {
                        !this.playing || this.pauseByUser || this.sysPause || (this.checkPause(t),
                        e % 10 == 0 && this.updateTime())
                    }
                }, {
                    key: "updateTime",
                    value: function() {
                        if (this._handler && !this.ended) {
                            var t = 0;
                            if (this._el && this._el.buffered && this._el.currentTime > 0) {
                                var e = this._el.buffered;
                                if ("function" != typeof e.start || "function" != typeof e.end)
                                    return void f.default.warn("video.buffered start&end not a function");
                                for (var i = 0; i < e.length; i++)
                                    if (e.start(i) <= this._el.currentTime && e.end(i) >= this._el.currentTime) {
                                        t = (t = e.end(i) - this._el.currentTime) < 0 ? 0 : t,
                                        this._el.duration > 0 && this._el.currentTime >= this._el.duration ? this.setEnded() : this._handler.onPlayTime(Math.floor(this._el.currentTime), Math.floor(this._el.duration), Math.floor(t));
                                        break
                                    }
                            }
                        }
                    }
                }, {
                    key: "setEnded",
                    value: function() {
                        this.ended = !0,
                        this._el.currentTime = this._el.duration,
                        this._el.pause();
                        var t = Math.ceil(this._el.duration);
                        this._handler.onPlayTime(t, t, 0),
                        this._handler.onPlayEnded()
                    }
                }, {
                    key: "checkPause",
                    value: function(t) {
                        !this.ended && !this.sysPause && !this.pauseByUser && this.setWaiting(this._pauseStat.paused)
                    }
                }, {
                    key: "onLoadStart",
                    value: function() {
                        this._tsSeg.loadstartTs = h.default.now()
                    }
                }, {
                    key: "onLoadedmetadata",
                    value: function() {
                        this._tsSeg.loadedmetadataTs = h.default.now()
                    }
                }, {
                    key: "onVideoPause",
                    value: function() {
                        f.default.log("onVideoPause--------"),
                        this.sysPause = !0
                    }
                }, {
                    key: "onVideoPlay",
                    value: function() {
                        if (!this.playing) {
                            f.default.log("TagPlayer.onVideoPlay", this._el.paused);
                            var t = h.default.now();
                            this._pauseStat.start(this._el),
                            this._tsSeg.loadeddataTs = t,
                            this.playing = !0,
                            this._handler.onPlayVideo({
                                video: this._el
                            });
                            var e = t - this.startPlayTs
                              , i = this.UIStartCost > 0 ? e + this.UIStartCost : 0
                              , s = this.businessStartCost > 0 ? e + this.businessStartCost : 0;
                            this.reportVideoLoadTs(e, i, s),
                            c.default.add(this.onCheckFastTimer, this, 100)
                        }
                    }
                }, {
                    key: "onVideoRealPlay",
                    value: function() {
                        this.sysPause = !1,
                        this.realPlaying || (this.realPlaying = !0,
                        this._handler.trigger(y.default.VIDEO_REAL_PLAY, {
                            video: this._el
                        }))
                    }
                }, {
                    key: "onVideoError",
                    value: function(t) {
                        this._handler && (f.default.log("tag play error"),
                        this._handler.onPlayerError())
                    }
                }, {
                    key: "setWaiting",
                    value: function(t) {
                        this.waiting !== t && (this.waiting = t,
                        this._handler.trigger(y.default.VIDEO_WAITING, t))
                    }
                }, {
                    key: "reportVideoQuality",
                    value: function() {
                        this._pauseStat.checkBadQuality();
                        var t = [];
                        this._stat.setCoreDim("video_bad_quality", this._pauseStat.paused ? 100 : 0),
                        this._stat.fill(t, !1),
                        this._pauseStat.reset20(),
                        this.sendMetrics(t)
                    }
                }, {
                    key: "reportVideoLoadTs",
                    value: function(t, e, i) {
                        var s = []
                          , a = 0;
                        e && (a += 1),
                        i && (a += 2),
                        this._stat.setComDim("act_load_type", a);
                        var r = [t, 0, 0, e, i];
                        this._tsSeg.srcTs > 0 && (r.push(this._tsSeg.loadstartTs - this._tsSeg.srcTs),
                        r.push(this._tsSeg.loadedmetadataTs - this._tsSeg.loadstartTs),
                        r.push(this._tsSeg.loadeddataTs - this._tsSeg.loadedmetadataTs)),
                        s.push(this._stat.createAct(m.default.VIDEO_LOAD_TS, {
                            value: r
                        })),
                        this.sendMetrics(s)
                    }
                }, {
                    key: "sendMetrics",
                    value: function(t) {
                        d.default.onNimoDataMetric2(t, this.pid, this.bitrate, this.videoSrc, this.lineType, this.place, this.roomId, this.gameid, this.videoInfo.oexp, this.videoInfo.stream_from)
                    }
                }]),
                e
            }(p.default);
            e.default = T
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = n(i(2))
              , a = n(i(3))
              , r = n(i(75));
            function n(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var o = function() {
                function t() {
                    (0,
                    s.default)(this, t)
                }
                return (0,
                a.default)(t, null, [{
                    key: "setCookie",
                    value: function(t, e, i, s, a) {
                        var r = new Date;
                        r.setTime(r.getTime() + 24 * i * 60 * 60 * 1e3);
                        var n = t + "=" + e + "; expires=" + r.toUTCString();
                        s && (n += "; domain=" + s),
                        a && (n += "; path=" + a),
                        document.cookie = n
                    }
                }, {
                    key: "setWholeCookie",
                    value: function(t, e) {
                        var i = new Date;
                        i.setTime(i.getTime() + 24 * e * 60 * 60 * 1e3);
                        var s = "expires=" + i.toUTCString();
                        document.cookie = t + "; " + s
                    }
                }, {
                    key: "setCompleteCookie",
                    value: function(t) {
                        document.cookie = t
                    }
                }, {
                    key: "getCookie",
                    value: function(t) {
                        for (var e = t + "=", i = document.cookie.split(";"), s = 0, a = i.length; s < a; s++) {
                            var r = i[s].trim();
                            if (0 == r.indexOf(e))
                                return r.substr(e.length)
                        }
                        return ""
                    }
                }, {
                    key: "storeIps",
                    value: function(e) {
                        for (var i = "", s = t.getIpsKey(!0), a = e.join("|").toLocaleLowerCase(), n = 0, o = a.length; n < o; n++) {
                            var u = s[a.charAt(n)]
                              , h = Math.random() * u.length >> 0;
                            i += u.charAt(h)
                        }
                        r.default.wssips = i
                    }
                }, {
                    key: "getIps",
                    value: function() {
                        var e = r.default.wssips;
                        if (!e)
                            return [];
                        for (var i = "", s = t.getIpsKey(!1), a = 0, n = e.length; a < n; a++)
                            i += s[e.charAt(a)];
                        return i.split("|")
                    }
                }, {
                    key: "getIpsKey",
                    value: function(t) {
                        for (var e = ["-", ".", ":", "|"], i = "_N1Y%/ny^6?Mi7|wCe#$VmT=.GBut]3L*f<acX2Eop>d}WqKPQ@r;zx!s`(:IHFRZ~[A{Jb-O&D)v0Ukj95,8lg+h4S", s = {}, a = 0; a < 40; a++) {
                            var r = a < 11 ? 3 : 2
                              , n = i.substr(0, r);
                            i = i.substr(r);
                            var o = a + "";
                            if (a > 13 ? o = String.fromCharCode(a + 83) : a > 9 && (o = e[a - 10]),
                            t)
                                s[o] = n;
                            else
                                for (var u = 0; u < n.length; u++)
                                    s[n.charAt(u)] = o
                        }
                        return s
                    }
                }, {
                    key: "removeUrlEndSlash",
                    value: function(t) {
                        if (!t)
                            return t;
                        var e = t.split("");
                        return "/" === e[e.length - 1] && e.pop(),
                        e.join("")
                    }
                }, {
                    key: "getAnonymousUid",
                    value: function() {
                        return Number((Date.now() % 1e10 * 1e3 + (1e3 * Math.random() | 0)) % 4294967295)
                    }
                }, {
                    key: "logcss",
                    value: function(t, e, i) {
                        var s = "font-weight:900";
                        return t && (s += ";color:" + t),
                        e && (s += ";background:" + e),
                        i && (s += ";border:3px solid " + i),
                        s
                    }
                }, {
                    key: "getURIParam",
                    value: function(t, e) {
                        return new RegExp("(^|\\?|&)" + e + "=([^&^#]*)(\\s|&|$|#)","i").test(t) ? decodeURIComponent(RegExp.$2) : ""
                    }
                }]),
                t
            }();
            e.default = o
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.default = {
                STREAM_ERROR: "stream_error",
                BUSI_STREAM: "busi_stream",
                DIF_STREAM: "dif_stream",
                VIDEO_LOAD_TS: "video_load_ts",
                BLACK_SCREEN: "black_screen",
                ROOM_SDK_STREAM: "room_sdk_stream",
                LOGIN_MEDIA: "login_media"
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = h(i(48))
              , a = h(i(37))
              , r = h(i(69))
              , n = h(i(2))
              , o = h(i(3))
              , u = h(i(223));
            function h(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var l = function() {
                function t() {
                    (0,
                    n.default)(this, t),
                    this.pid = 0,
                    this.roomid = 0,
                    this.autoFeedbackKeys = {},
                    this.autoFeedbackRooms = "",
                    this.initKeys = !1,
                    this.waitMap = new r.default
                }
                return (0,
                o.default)(t, [{
                    key: "setRoomid",
                    value: function(t, e) {
                        this.pid = t,
                        this.roomid = e,
                        this._sendWait()
                    }
                }, {
                    key: "setConfig",
                    value: function(t) {
                        this.initKeys = !0;
                        try {
                            (t = JSON.parse(t)).hasOwnProperty("autoFeedbackRooms") && (this.autoFeedbackRooms = t.autoFeedbackRooms),
                            t.autoFeedbackKeys && (0,
                            a.default)(this.autoFeedbackKeys, t.autoFeedbackKeys)
                        } catch (t) {}
                        this._sendWait()
                    }
                }, {
                    key: "_sendWait",
                    value: function() {
                        if (0 != this.roomid && this.initKeys) {
                            var t = !0
                              , e = !1
                              , i = void 0;
                            try {
                                for (var a, r = (0,
                                s.default)(this.waitMap.keys()); !(t = (a = r.next()).done); t = !0) {
                                    var n = a.value;
                                    this.feedback(n, this.waitMap.get(n))
                                }
                            } catch (t) {
                                e = !0,
                                i = t
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (e)
                                        throw i
                                }
                            }
                            this.waitMap.clear()
                        }
                    }
                }, {
                    key: "_checkAble",
                    value: function() {
                        if ("all" === this.autoFeedbackRooms)
                            return !0;
                        var t = this.roomid + "";
                        return "" !== t && -1 !== this.autoFeedbackRooms.indexOf(t)
                    }
                }, {
                    key: "_feedbackAble",
                    value: function(t) {
                        return !!(this.autoFeedbackKeys.hasOwnProperty(t) && 100 * Math.random() < Number(this.autoFeedbackKeys[t])) && this._checkAble()
                    }
                }, {
                    key: "feedback",
                    value: function(t, e) {
                        this.initKeys && 0 != this.roomid ? this._feedbackAble(t) && this._feedback(t, e) : this.waitMap.set(t, e)
                    }
                }, {
                    key: "_feedback",
                    value: function(t, e) {
                        (new u.default).feedBack(this.pid, e, t)
                    }
                }]),
                t
            }();
            l.PLAY_VIDEO = "playVideo",
            l.BLACK_SCREEN = "blackScreen",
            l.BLACK_SCREEN_WAP = "blackScreenWap",
            l.BAD_RESEND = "badResend",
            l.RESEND = "resend",
            l.BAD = "bad",
            e.default = l
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = i(17);
            e.default = s.MediaType
        }
        , function(t, e, i) {
            i(118),
            t.exports = i(199)
        }
        , function(t, e, i) {
            "use strict";
            var s = A(i(119))
              , a = A(i(122))
              , r = A(i(138))
              , n = A(i(92))
              , o = A(i(99))
              , u = A(i(66))
              , h = A(i(152))
              , l = A(i(155))
              , c = A(i(100))
              , d = A(i(28))
              , f = A(i(101))
              , p = A(i(164))
              , m = A(i(102))
              , y = A(i(105))
              , v = A(i(69))
              , _ = A(i(48))
              , g = A(i(10))
              , S = A(i(70))
              , T = A(i(107))
              , P = A(i(184))
              , k = A(i(37))
              , E = A(i(71))
              , I = A(i(38))
              , b = A(i(108))
              , C = A(i(72))
              , w = A(i(73));
            function A(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            !function(t) {
                var e = {};
                function i(s) {
                    if (e[s])
                        return e[s].exports;
                    var a = e[s] = {
                        i: s,
                        l: !1,
                        exports: {}
                    };
                    return t[s].call(a.exports, a, a.exports, i),
                    a.l = !0,
                    a.exports
                }
                i.m = t,
                i.c = e,
                i.d = function(t, e, s) {
                    i.o(t, e) || (0,
                    w.default)(t, e, {
                        enumerable: !0,
                        get: s
                    })
                }
                ,
                i.r = function(t) {
                    void 0 !== C.default && b.default && (0,
                    w.default)(t, b.default, {
                        value: "Module"
                    }),
                    Object.defineProperty(t, "__esModule", {
                        value: !0
                    })
                }
                ,
                i.t = function(t, e) {
                    if (1 & e && (t = i(t)),
                    8 & e)
                        return t;
                    if (4 & e && "object" == (void 0 === t ? "undefined" : (0,
                    I.default)(t)) && t && t.__esModule)
                        return t;
                    var s = (0,
                    E.default)(null);
                    if (i.r(s),
                    Object.defineProperty(s, "default", {
                        enumerable: !0,
                        value: t
                    }),
                    2 & e && "string" != typeof t)
                        for (var a in t)
                            i.d(s, a, function(e) {
                                return t[e]
                            }
                            .bind(null, a));
                    return s
                }
                ,
                i.n = function(t) {
                    var e = t && t.__esModule ? function() {
                        return t.default
                    }
                    : function() {
                        return t
                    }
                    ;
                    return i.d(e, "a", e),
                    e
                }
                ,
                i.o = function(t, e) {
                    return Object.prototype.hasOwnProperty.call(t, e)
                }
                ,
                i.p = "",
                i(i.s = 40)
            }([function(t, e, i) {
                var s = i(4)
                  , a = i(3)
                  , r = 99;
                function n() {
                    return a.a.getDateTimeStr() + " "
                }
                var o = !1
                  , u = {
                    _data: [],
                    _length: 0,
                    debug: function() {
                        var t = n()
                          , e = Array.apply(null, arguments);
                        e[0] = t + e[0],
                        r <= -1 && console.log.apply(console, e)
                    },
                    log: function(t) {
                        var e = n()
                          , i = Array.apply(null, arguments);
                        i[0] = e + i[0],
                        r <= 0 && console.log.apply(console, i),
                        u.record(i, "log")
                    },
                    info: function(t) {
                        var e = n()
                          , i = Array.apply(null, arguments);
                        i[0] = e + i[0],
                        r <= 1 && console.info.apply(console, i),
                        u.record(i, "info")
                    },
                    warn: function(t) {
                        var e = n()
                          , i = Array.apply(null, arguments);
                        i[0] = e + i[0],
                        r <= 2 && console.warn.apply(console, i),
                        u.record(i, "warn")
                    },
                    error: function(t) {
                        var e = n()
                          , i = Array.apply(null, arguments);
                        i[0] = e + i[0],
                        r <= 3 && console.error.apply(console, i),
                        u.record(i, "error")
                    },
                    group: function(t) {
                        var e = n()
                          , i = Array.apply(null, arguments);
                        i[0] = e + i[0],
                        r <= 1 && (console.groupCollapsed || console.group || console.log).apply(console, i),
                        u.record(i, "group")
                    },
                    groupEnd: function() {
                        console.groupEnd && console.groupEnd.apply(console)
                    },
                    setLevel: function(t) {
                        t != r && (console.log(n() + " set log level from " + r + " to " + t),
                        r = t)
                    },
                    getLevel: function() {
                        return r
                    },
                    record: function(t, e) {
                        1100 === u._length && (u._data.splice(0, 100),
                        u._length = 1e3);
                        var i = 0
                          , s = (t.shift() || "").toString();
                        for (s = s.replace(/\%c/gi, (function(t, e) {
                            return i++,
                            ""
                        }
                        )); i-- && t.length; )
                            t.shift();
                        for (var a = 0, r = t.length; a < r; a++)
                            "object" == (0,
                            I.default)(t[a]) && (t[a] = "");
                        t.unshift(s);
                        var n = t.join(" ");
                        u._length++,
                        u._data.push("[".concat(e, "]").concat(n))
                    },
                    getLog: function() {
                        return o || (o = !0,
                        u._data.unshift(s.a.platform + " " + s.a.name + " " + s.a.version.string)),
                        u._data
                    },
                    logcss: function(t, e, i) {
                        var s = "font-weight:900";
                        return t && (s += ";color:" + t),
                        e && (s += ";background:" + e),
                        i && (s += ";border:3px solid " + i),
                        s
                    },
                    padNum: function(t, e) {
                        var i = t.toString().length
                          , s = Math.max(0, e - i);
                        return "0".repeat(s) + t
                    }
                };
                e.a = u
            }
            , function(t, e, i) {
                function s(t, e) {
                    if (!(t instanceof e))
                        throw new TypeError("Cannot call a class as a function")
                }
                i.d(e, "a", (function() {
                    return s
                }
                ))
            }
            , function(t, e, i) {
                function s(t, e) {
                    for (var i = 0; i < e.length; i++) {
                        var s = e[i];
                        s.enumerable = s.enumerable || !1,
                        s.configurable = !0,
                        "value"in s && (s.writable = !0),
                        (0,
                        w.default)(t, s.key, s)
                    }
                }
                function a(t, e, i) {
                    return e && s(t.prototype, e),
                    i && s(t, i),
                    t
                }
                i.d(e, "a", (function() {
                    return a
                }
                ))
            }
            , function(t, e, i) {
                function s(t, e) {
                    var i = t.toString().length
                      , s = Math.max(0, e - i)
                      , a = "";
                    if (s > 0)
                        for (var r = 0; r < s; r++)
                            a += "0";
                    return a + t
                }
                var a = 0
                  , r = {
                    now: function() {
                        if (void 0 !== window.performance) {
                            var t = window.performance;
                            if (void 0 !== t.now)
                                return ~~t.now();
                            if (void 0 !== t.webkitNow)
                                return ~~t.webkitNow();
                            if (void 0 !== t.mozNow)
                                return ~~t.mozNow();
                            if (void 0 !== t.msNow)
                                return ~~t.msNow()
                        }
                        0 === a && (a = Date.now() - 1);
                        var e = Date.now() - a;
                        return e > 4294967295 ? (a += 4294967295,
                        e - 4294967295) : e
                    },
                    utc: function() {
                        return Math.round(Date.now() / 1e3)
                    },
                    getDateStr: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                          , e = null
                          , i = (e = t ? new Date(t) : new Date).getFullYear()
                          , a = s(e.getMonth() + 1, 2)
                          , r = s(e.getDate(), 2);
                        return "".concat(i, "-").concat(a, "-").concat(r)
                    },
                    getTimeStr: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                          , e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                          , i = null
                          , a = s((i = t ? new Date(t) : new Date).getHours(), 2)
                          , r = s(i.getMinutes(), 2)
                          , n = s(i.getSeconds(), 2)
                          , o = "".concat(a, ":").concat(r, ":").concat(n);
                        return e && (o += "." + s(i.getMilliseconds(), 3)),
                        o
                    },
                    getDateTimeStr: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                          , e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                          , i = null
                          , a = (i = t ? new Date(t) : new Date).getFullYear()
                          , r = s(i.getMonth() + 1, 2)
                          , n = s(i.getDate(), 2)
                          , o = s(i.getHours(), 2)
                          , u = s(i.getMinutes(), 2)
                          , h = s(i.getSeconds(), 2)
                          , l = "".concat(a, "-").concat(r, "-").concat(n, " ").concat(o, ":").concat(u, ":").concat(h);
                        return e && (l += "." + s(i.getMilliseconds(), 3)),
                        l
                    }
                };
                e.a = r
            }
            , function(t, e, i) {
                var s = {};
                self || (self = window),
                function() {
                    var t = self.navigator.userAgent.toLowerCase()
                      , e = /(edge)\/([\w.]+)/.exec(t) || /(edg)\/([\w.]+)/.exec(t) || /(opr)[\/]([\w.]+)/.exec(t) || /(chrome)[ \/]([\w.]+)/.exec(t) || /(iemobile)[\/]([\w.]+)/.exec(t) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(t) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(t) || /(webkit)[ \/]([\w.]+)/.exec(t) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(t) || /(msie) ([\w.]+)/.exec(t) || t.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(t) || t.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(t) || []
                      , i = /(ipad)/.exec(t) || /(ipod)/.exec(t) || /(windows phone)/.exec(t) || /(iphone)/.exec(t) || /(kindle)/.exec(t) || /(android)/.exec(t) || /(windows)/.exec(t) || /(mac)/.exec(t) || /(linux)/.exec(t) || /(cros)/.exec(t) || []
                      , a = {
                        browser: e[5] || e[3] || e[1] || "",
                        version: e[2] || e[4] || "0",
                        majorVersion: e[4] || e[2] || "0",
                        platform: i[0] || ""
                    }
                      , r = {};
                    if (a.browser) {
                        r[a.browser] = !0;
                        var n = a.majorVersion.split(".");
                        r.version = {
                            major: parseInt(a.majorVersion, 10),
                            string: a.version
                        },
                        n.length > 1 && (r.version.minor = parseInt(n[1], 10)),
                        n.length > 2 && (r.version.build = parseInt(n[2], 10))
                    }
                    for (var o in a.platform && (r[a.platform] = !0),
                    (r.chrome || r.opr || r.safari) && (r.webkit = !0),
                    (r.rv || r.iemobile) && (r.rv && delete r.rv,
                    a.browser = "msie",
                    r.msie = !0),
                    r.edge && (delete r.edge,
                    a.browser = "msedge",
                    r.chrome = !0),
                    r.edg && (delete r.edg,
                    a.browser = "msedge",
                    r.chrome = !0),
                    r.opr && (a.browser = "opera",
                    r.opera = !0),
                    r.safari && r.android && (a.browser = "android",
                    r.android = !0),
                    r.name = a.browser,
                    r.platform = a.platform,
                    s)
                        s.hasOwnProperty(o) && delete s[o];
                    (0,
                    k.default)(s, r)
                }(),
                s.version || (s.version = {
                    major: 0,
                    minor: 0,
                    build: 0,
                    string: "0.0.0"
                }),
                e.a = s
            }
            , function(t, e, i) {
                function s(t) {
                    if (void 0 === t)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t
                }
                i.d(e, "a", (function() {
                    return s
                }
                ))
            }
            , function(t, e, i) {
                i.d(e, "a", (function() {
                    return u
                }
                ));
                var s = i(8);
                function a() {
                    if ("undefined" == typeof Reflect || !P.default)
                        return !1;
                    if (P.default.sham)
                        return !1;
                    if ("function" == typeof Proxy)
                        return !0;
                    try {
                        return Date.prototype.toString.call((0,
                        P.default)(Date, [], (function() {}
                        ))),
                        !0
                    } catch (t) {
                        return !1
                    }
                }
                function r(t) {
                    return (r = "function" == typeof C.default && "symbol" == (0,
                    I.default)(T.default) ? function(t) {
                        return void 0 === t ? "undefined" : (0,
                        I.default)(t)
                    }
                    : function(t) {
                        return t && "function" == typeof C.default && t.constructor === C.default && t !== C.default.prototype ? "symbol" : void 0 === t ? "undefined" : (0,
                        I.default)(t)
                    }
                    )(t)
                }
                var n = i(5);
                function o(t, e) {
                    return !e || "object" !== r(e) && "function" != typeof e ? Object(n.a)(t) : e
                }
                function u(t) {
                    return function() {
                        var e, i = Object(s.a)(t);
                        if (a()) {
                            var r = Object(s.a)(this).constructor;
                            e = (0,
                            P.default)(i, arguments, r)
                        } else
                            e = i.apply(this, arguments);
                        return o(this, e)
                    }
                }
            }
            , function(t, e, i) {
                function s(t, e) {
                    return (s = S.default || function(t, e) {
                        return t.__proto__ = e,
                        t
                    }
                    )(t, e)
                }
                function a(t, e) {
                    if ("function" != typeof e && null !== e)
                        throw new TypeError("Super expression must either be null or a function");
                    t.prototype = (0,
                    E.default)(e && e.prototype, {
                        constructor: {
                            value: t,
                            writable: !0,
                            configurable: !0
                        }
                    }),
                    e && s(t, e)
                }
                i.d(e, "a", (function() {
                    return a
                }
                ))
            }
            , function(t, e, i) {
                function s(t) {
                    return (s = S.default ? g.default : function(t) {
                        return t.__proto__ || (0,
                        g.default)(t)
                    }
                    )(t)
                }
                i.d(e, "a", (function() {
                    return s
                }
                ))
            }
            , function(t, e, i) {
                var s = {
                    PAudienceGetProxyListReq: 530178,
                    PAudienceGetProxyListRsp: 530434,
                    PNotifyStreamSwitch: 268034,
                    PLoginVideoProxyUniformly: 5650690,
                    PLoginVideoProxyUniformlyRes: 5650434,
                    PNotifyCurrentCdnStream: 2739202,
                    PNotifyCurrentStream4: 2675714,
                    PSubscribeStream3: 2667266,
                    PSubscribeStreamRes3: 2667522,
                    PStreamData3: 2666754,
                    PStopStream3: 2666498,
                    PStopStream: 2560514,
                    PPullStreamData: 2694146,
                    PResendStreamData4: 2689026,
                    PResendStreamDataFailAck: 2694402,
                    PVideoSyncSpeakerTime3: 2674690,
                    PForceConnectVideoProxy3: 2685442,
                    PVideoProxyPing3: 2669570,
                    PVideoProxyPingRes4: 2683650,
                    PNotifyMultiVideo: 2746370,
                    PLoginAndSubscribe: 4097282,
                    PLoginAndSubscribeRes: 4097538,
                    PNotifyUplinkRecvCount3: 2672642,
                    PVideoBroadcast4: 2754050,
                    PUpdateVideoConfig2: 2569474,
                    PVideoQualityStatistics: 2591746,
                    PP2pPing2: 40706,
                    PP2pPing3: 41218,
                    PP2pVideoPing3: 2671874,
                    VIDEOP2P_PFlashP2PKeepAlive: 3072514,
                    VIDEOP2P_PFlashP2PKeepAliveRes: 3072770,
                    P2PGetNodesProxy3: 2673410,
                    P2PGetNodesProxyRes3: 2673666,
                    P2PSubscribeStream3: 2673922,
                    P2PRemoveSubscribe3: 2674178,
                    P2PKeepAlive: 3074562,
                    P2PKeepAliveRes: 3074818,
                    P2PNotifyNodeLeave: 3075074,
                    P2PSyncDepth: 3075330,
                    P2PKeepAliveWebrtc: 3075842,
                    P2PKeepAliveWebrtcRes: 3076098,
                    PP2PWSForward: 2757378,
                    PP2PWSForwardReject: 5653506,
                    P2PSubStream: 3073026,
                    P2PSubStreamRes: 3073282,
                    P2PSyncSubTree: 3073538,
                    P2PTest: 3073794,
                    P2PRemoveSub: 3074306,
                    P2PRemoveSubRes: 3075586,
                    P2PStreamAlive: 3076354,
                    P2POffer: 12316162,
                    P2PAnswer: 12316418,
                    P2PCandidate: 12316674,
                    P2POfferReject: 12316930,
                    P2PRequestOffer: 12317186,
                    P2PVersionFailed: 12317442,
                    P2PPingOverProxy: 12317698,
                    P2PPunchBackReq: 12317954,
                    P2PPunchBackRsp: 12318210,
                    PCDNNotifyUrl: 20740866,
                    PCDNStatusReport: 20741122,
                    PCDNGetUrl: 20741378,
                    PCDNSwitchUrl: 20741634,
                    PCdnP2PWSForward: 53283,
                    PCdnP2PWSForwardReject: 53539,
                    PCdnProxyPing: 26147,
                    PCdnProxyPingRes: 26403,
                    PCdnP2PStatics: 26659,
                    PCdnP2PErrStatics: 26915,
                    PCdnP2pGetNode: 51235,
                    PCdnP2pGetNodeRes: 51491,
                    PCdnP2PNodePingThroughProxy: 52259,
                    PCdnP2PNodePunchThroughProxy: 52515,
                    PCdnP2PUserRegister: 52771,
                    PCdnP2PUserRegisterRes: 53027,
                    PCdnP2pReportLog: 54051,
                    PCdnForceConnectVideoProxy: 54563,
                    PCDNGetProxyListReq: 153635,
                    PCDNGetProxyListRsp: 153891,
                    PCDNGetSliceStreamInfoReq: 154147,
                    PCDNGetSliceStreamInfoRsp: 154403,
                    PCDNSubscribeReq: 768547,
                    PCDNSubscribeRes: 768803,
                    PCDNCompeteSubscribeReq: 769059,
                    PCDNCompeteSubscribeRes: 769315,
                    PCDNForceSubscribeNotify: 769571,
                    PCdnP2pUserUnRegister: 770083,
                    PP2pSliceData: 511779,
                    PP2pSliceAudioData: 512035,
                    PP2pSliceVideoData: 512291,
                    PP2pSliceCommonData: 514083,
                    PP2pSliceSignalData: 514595,
                    PP2pSliceControlData: 1024547,
                    PForceConnectCdnVideoProxy3: 2711042,
                    HuyaDelaySeiData: 17920770
                };
                !function t() {
                    if (!t.done) {
                        t.done = !0;
                        var e = [];
                        for (var i in s) {
                            var a = s[i];
                            e.push({
                                uri: a,
                                name: i
                            })
                        }
                        e.forEach((function(t) {
                            s[t.uri] = t.name
                        }
                        ))
                    }
                }(),
                e.a = s
            }
            , function(t, e, i) {
                var s = i(1)
                  , a = i(2)
                  , r = function() {
                    function t() {
                        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                        Object(s.a)(this, t),
                        this.hasHeader = e,
                        this.segments = [],
                        this.data = null,
                        this.totalLen = 0,
                        this.uri = 0,
                        this.hasHeader && (this.pushUInt32(10),
                        this.pushUInt32(this.uri),
                        this.pushUInt16(200))
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            if (0 === this.segments.length)
                                return null;
                            this.data = new Uint8Array(this.totalLen);
                            for (var t = 0, e = 0; e < this.segments.length; ++e) {
                                var i = this.segments[e];
                                this.data.set(i, t),
                                t += i.length
                            }
                            return this.hasHeader && (this.replaceUInt32(0, this.totalLen),
                            this.replaceUInt32(4, this.uri)),
                            this.data
                        }
                    }, {
                        key: "setUri",
                        value: function(t) {
                            this.uri = t
                        }
                    }, {
                        key: "replaceUInt32",
                        value: function(t, e) {
                            new DataView(this.data.buffer).setUint32(t, e, !0)
                        }
                    }, {
                        key: "pushBool",
                        value: function(t) {
                            this.pushUInt8(t ? 1 : 0)
                        }
                    }, {
                        key: "pushUInt8",
                        value: function(t) {
                            var e = new Uint8Array(1);
                            new DataView(e.buffer).setUint8(0, t),
                            this.segments.push(e),
                            this.totalLen++
                        }
                    }, {
                        key: "pushUInt16",
                        value: function(t) {
                            var e = new Uint8Array(2);
                            new DataView(e.buffer).setUint16(0, t, !0),
                            this.segments.push(e),
                            this.totalLen += 2
                        }
                    }, {
                        key: "pushUInt32",
                        value: function(t) {
                            var e = new Uint8Array(4);
                            new DataView(e.buffer).setUint32(0, t, !0),
                            this.segments.push(e),
                            this.totalLen += 4
                        }
                    }, {
                        key: "pushUInt64",
                        value: function(t) {
                            var e = new Uint8Array(8)
                              , i = new DataView(e.buffer)
                              , s = t % 4294967296
                              , a = t / 4294967296 >> 0;
                            i.setUint32(0, s, !0),
                            i.setUint32(4, a, !0),
                            this.segments.push(e),
                            this.totalLen += 8
                        }
                    }, {
                        key: "pushUint8Array",
                        value: function(t) {
                            this.pushUInt16(t.length),
                            this.segments.push(t),
                            this.totalLen += t.length
                        }
                    }, {
                        key: "pushUint8ArrayWithoutLen",
                        value: function(t) {
                            this.segments.push(t),
                            this.totalLen += t.length
                        }
                    }, {
                        key: "pushUint8Array32",
                        value: function(t) {
                            this.pushUInt32(t.length),
                            this.segments.push(t),
                            this.totalLen += t.length
                        }
                    }, {
                        key: "pushUInt32Vector",
                        value: function(t) {
                            this.pushUInt32(t.length);
                            for (var e = 0; e < t.length; e++)
                                this.pushUInt32(t[e])
                        }
                    }, {
                        key: "pushUInt64Vector",
                        value: function(t) {
                            this.pushUInt32(t.length);
                            for (var e = 0; e < t.length; e++)
                                this.pushUInt64(t[e])
                        }
                    }, {
                        key: "pushUInt16Vector",
                        value: function(t) {
                            this.pushUInt32(t.length);
                            for (var e = 0; e < t.length; e++)
                                this.pushUInt16(t[e])
                        }
                    }, {
                        key: "popObjVector",
                        value: function(t) {
                            for (var e = this.popUInt32(), i = [], s = 0; s < e; s++) {
                                var a = new t;
                                i.push(a.unmarshall(this))
                            }
                            return i
                        }
                    }, {
                        key: "pushString",
                        value: function(t) {
                            this.pushUInt16(t.length);
                            for (var e = new Uint8Array(t.length), i = new DataView(e.buffer), s = 0; s < t.length; ++s)
                                i.setUint8(s, t.charCodeAt(s));
                            this.segments.push(e),
                            this.totalLen += t.length
                        }
                    }, {
                        key: "pushString32",
                        value: function(t) {
                            this.pushUInt32(t.length);
                            for (var e = new Uint8Array(t.length), i = new DataView(e.buffer), s = 0; s < t.length; ++s)
                                i.setUint8(s, t.charCodeAt(s));
                            this.segments.push(e),
                            this.totalLen += t.length
                        }
                    }]),
                    t
                }();
                e.a = r
            }
            , function(t, e, i) {
                i.d(e, "a", (function() {
                    return a
                }
                ));
                var s = i(24);
                function a(t) {
                    if (void 0 === C.default || null == t[T.default]) {
                        if (Array.isArray(t) || (t = Object(s.a)(t))) {
                            var e = 0
                              , i = function() {};
                            return {
                                s: i,
                                n: function() {
                                    return e >= t.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: t[e++]
                                    }
                                },
                                e: function(t) {
                                    throw t
                                },
                                f: i
                            }
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                    }
                    var a, r, n = !0, o = !1;
                    return {
                        s: function() {
                            a = (0,
                            _.default)(t)
                        },
                        n: function() {
                            var t = a.next();
                            return n = t.done,
                            t
                        },
                        e: function(t) {
                            o = !0,
                            r = t
                        },
                        f: function() {
                            try {
                                n || null == a.return || a.return()
                            } finally {
                                if (o)
                                    throw r
                            }
                        }
                    }
                }
            }
            , function(t, e, i) {
                i.r(e),
                e.default = {
                    STREAM_UNKNOWN: 0,
                    AUDIO_SPEEX: 0,
                    AUDIO_AACPLUS: 1,
                    AUDIO_SILK: 2,
                    AUDIO_AAC_44100HZ_STEREO_128KBPS: 35,
                    AUDIO_AAC_44100HZ_STEREO_160KBPS: 36,
                    AUDIO_AAC_44100HZ_STEREO_192KBPS: 37,
                    AUDIO_ELD_AAC_44100HZ_STEREO: 38,
                    AUDIO_ELD_AAC_SBR_44100HZ_STEREO: 39,
                    SIGNAL_STREAM_DATA: 47,
                    SIGNAL_STREAM_COMPRESS_DATA: 48,
                    AUDIO_MP3: 50,
                    AUDIO_NELLYMOSER: 54,
                    VIDEO_264_START: 401,
                    VIDEO_H264_100K: 401,
                    VIDEO_H264_500K: 405,
                    VIDEO_H264_800K: 408,
                    VIDEO_H264_1200K: 412,
                    VIDEO_H264_1500K: 415,
                    VIDEO_H264_2000K: 420,
                    VIDEO_H264_3000K: 430,
                    VIDEO_H264_4000K: 440,
                    VIDEO_H264_6000K: 460,
                    VIDEO_H264_8000K: 480,
                    VIDEO_H264_END: 480,
                    VIDEO_265_START: 503,
                    VIDEO_H265_300K: 503,
                    VIDEO_H265_500K: 505,
                    VIDEO_H265_800K: 508,
                    VIDEO_H265_1200K: 512,
                    VIDEO_H265_1500K: 515,
                    VIDEO_H265_2000K: 520,
                    VIDEO_H265_3000K: 530,
                    VIDEO_H265_4000K: 540,
                    VIDEO_H265_6000K: 560,
                    VIDEO_H265_8000K: 580,
                    VIDEO_H265_END: 580,
                    VIDEO_H264_EX_BASE: 1e3,
                    VIDEO_H264_EX_START: 1005,
                    VIDEO_H264_EX_500K: 1005,
                    VIDEO_H264_EX_1M: 1010,
                    VIDEO_H264_EX_5M: 1050,
                    VIDEO_H264_EX_8M: 1080,
                    VIDEO_H264_EX_10M: 1100,
                    VIDEO_H264_EX_12M: 1120,
                    VIDEO_H264_EX_15M: 1150,
                    VIDEO_H264_EX_20M: 1200,
                    VIDEO_H264_EX_END: 1200,
                    VIDEO_H265_EX_BASE: 4e3,
                    VIDEO_H265_EX_START: 4005,
                    VIDEO_H265_EX_500K: 4005,
                    VIDEO_H265_EX_1M: 4010,
                    VIDEO_H265_EX_5M: 4050,
                    VIDEO_H265_EX_8M: 4080,
                    VIDEO_H265_EX_10M: 4100,
                    VIDEO_H265_EX_12M: 4120,
                    VIDEO_H265_EX_15M: 4150,
                    VIDEO_H265_EX_20M: 4200,
                    VIDEO_H265_EX_END: 4200
                }
            }
            , function(t, e, i) {
                i.r(e);
                var s = {}
                  , a = {
                    setTaf: function(t) {
                        return s = t
                    }
                };
                e.default = a,
                a.UserId = function() {
                    this.lUid = 0,
                    this.sGuid = "",
                    this.sToken = "",
                    this.sHuYaUA = "",
                    this.sCookie = "",
                    this.iTokenType = 0,
                    this.sDeviceInfo = ""
                }
                ,
                a.UserId.prototype._clone = function() {
                    return new a.UserId
                }
                ,
                a.UserId.prototype._write = function(t, e, i) {
                    t.writeStruct(e, i)
                }
                ,
                a.UserId.prototype._read = function(t, e, i) {
                    return t.readStruct(e, !0, i)
                }
                ,
                a.UserId.prototype.writeTo = function(t) {
                    t.writeInt64(0, this.lUid),
                    t.writeString(1, this.sGuid),
                    t.writeString(2, this.sToken),
                    t.writeString(3, this.sHuYaUA),
                    t.writeString(4, this.sCookie),
                    t.writeInt32(5, this.iTokenType),
                    t.writeString(6, this.sDeviceInfo)
                }
                ,
                a.UserId.prototype.readFrom = function(t) {
                    this.lUid = t.readInt64(0, !1, this.lUid),
                    this.sGuid = t.readString(1, !1, this.sGuid),
                    this.sToken = t.readString(2, !1, this.sToken),
                    this.sHuYaUA = t.readString(3, !1, this.sHuYaUA),
                    this.sCookie = t.readString(4, !1, this.sCookie),
                    this.iTokenType = t.readInt32(5, !1, this.iTokenType),
                    this.sDeviceInfo = t.readString(6, !1, this.sDeviceInfo)
                }
                ,
                a.GetInfoFromVGReq = function() {
                    this.lUid = 0,
                    this.iServiceType = 0,
                    this.iClientType = 0,
                    this.iClientIp = 0,
                    this.iTerminalType = 0,
                    this.iRequestVPType = 0,
                    this.sMsg = new s.BinBuffer,
                    this.iUri = 0,
                    this.sProtoName = "",
                    this.lSid = 0,
                    this.vStreamName = new s.Vector(new s.STRING),
                    this.tId = new a.UserId
                }
                ,
                a.GetInfoFromVGReq.prototype._clone = function() {
                    return new a.GetInfoFromVGReq
                }
                ,
                a.GetInfoFromVGReq.prototype._write = function(t, e, i) {
                    t.writeStruct(e, i)
                }
                ,
                a.GetInfoFromVGReq.prototype._read = function(t, e, i) {
                    return t.readStruct(e, !0, i)
                }
                ,
                a.GetInfoFromVGReq.prototype.writeTo = function(t) {
                    t.writeInt64(0, this.lUid),
                    t.writeInt32(1, this.iServiceType),
                    t.writeInt32(2, this.iClientType),
                    t.writeInt64(3, this.iClientIp),
                    t.writeInt32(4, this.iTerminalType),
                    t.writeInt32(5, this.iRequestVPType),
                    t.writeBytes(6, this.sMsg),
                    t.writeInt64(7, this.iUri),
                    t.writeString(8, this.sProtoName),
                    t.writeInt64(9, this.lSid),
                    t.writeVector(10, this.vStreamName),
                    t.writeStruct(11, this.tId)
                }
                ,
                a.GetInfoFromVGReq.prototype.readFrom = function(t) {
                    this.lUid = t.readInt64(0, !1, this.lUid),
                    this.iServiceType = t.readInt32(1, !1, this.iServiceType),
                    this.iClientType = t.readInt32(2, !1, this.iClientType),
                    this.iClientIp = t.readInt64(3, !1, this.iClientIp),
                    this.iTerminalType = t.readInt32(4, !1, this.iTerminalType),
                    this.iRequestVPType = t.readInt32(5, !1, this.iRequestVPType),
                    this.sMsg = t.readBytes(6, !1, this.sMsg),
                    this.iUri = t.readInt64(7, !1, this.iUri),
                    this.sProtoName = t.readString(8, !1, this.sProtoName),
                    this.lSid = t.readInt64(9, !1, this.lSid),
                    this.vStreamName = t.readVector(10, !1, this.vStreamName),
                    this.tId = t.readStruct(11, !1, this.tId)
                }
                ,
                a.GetInfoFromVGRsp = function() {
                    this.lUid = 0,
                    this.ServerId = 0,
                    this.sMsg = new s.BinBuffer,
                    this.iUri = 0,
                    this.sProtoName = ""
                }
                ,
                a.GetInfoFromVGRsp.prototype._clone = function() {
                    return new a.GetInfoFromVGRsp
                }
                ,
                a.GetInfoFromVGRsp.prototype._write = function(t, e, i) {
                    t.writeStruct(e, i)
                }
                ,
                a.GetInfoFromVGRsp.prototype._read = function(t, e, i) {
                    return t.readStruct(e, !0, i)
                }
                ,
                a.GetInfoFromVGRsp.prototype.writeTo = function(t) {
                    t.writeInt64(0, this.lUid),
                    t.writeInt64(1, this.ServerId),
                    t.writeBytes(2, this.sMsg),
                    t.writeInt64(3, this.iUri),
                    t.writeString(4, this.sProtoName)
                }
                ,
                a.GetInfoFromVGRsp.prototype.readFrom = function(t) {
                    this.lUid = t.readInt64(0, !1, this.lUid),
                    this.ServerId = t.readInt64(1, !1, this.ServerId),
                    this.sMsg = t.readBytes(2, !1, this.sMsg),
                    this.iUri = t.readInt64(3, !1, this.iUri),
                    this.sProtoName = t.readString(4, !1, this.sProtoName)
                }
                ,
                a.GetCdnTokenExReq = function() {
                    this.sFlvUrl = "",
                    this.sStreamName = "",
                    this.iLoopTime = 0,
                    this.tId = new a.UserId,
                    this.iAppId = 66
                }
                ,
                a.GetCdnTokenExReq.prototype._clone = function() {
                    return new a.GetCdnTokenExReq
                }
                ,
                a.GetCdnTokenExReq.prototype._write = function(t, e, i) {
                    t.writeStruct(e, i)
                }
                ,
                a.GetCdnTokenExReq.prototype._read = function(t, e, i) {
                    return t.readStruct(e, !0, i)
                }
                ,
                a.GetCdnTokenExReq.prototype.writeTo = function(t) {
                    t.writeString(0, this.sFlvUrl),
                    t.writeString(1, this.sStreamName),
                    t.writeInt32(2, this.iLoopTime),
                    t.writeStruct(3, this.tId),
                    t.writeInt32(4, this.iAppId)
                }
                ,
                a.GetCdnTokenExReq.prototype.readFrom = function(t) {
                    this.sFlvUrl = t.readString(0, !1, this.sFlvUrl),
                    this.sStreamName = t.readString(1, !1, this.sStreamName),
                    this.iLoopTime = t.readInt32(2, !1, this.iLoopTime),
                    this.tId = t.readStruct(3, !1, this.tId),
                    this.iAppId = t.readInt32(4, !1, this.iAppId)
                }
                ,
                a.GetCdnTokenExRsp = function() {
                    this.sFlvToken = "",
                    this.iExpireTime = 0
                }
                ,
                a.GetCdnTokenExRsp.prototype._clone = function() {
                    return new a.GetCdnTokenExRsp
                }
                ,
                a.GetCdnTokenExRsp.prototype._write = function(t, e, i) {
                    t.writeStruct(e, i)
                }
                ,
                a.GetCdnTokenExRsp.prototype._read = function(t, e, i) {
                    return t.readStruct(e, !0, i)
                }
                ,
                a.GetCdnTokenExRsp.prototype.writeTo = function(t) {
                    t.writeString(0, this.sFlvToken),
                    t.writeInt32(1, this.iExpireTime)
                }
                ,
                a.GetCdnTokenExRsp.prototype.readFrom = function(t) {
                    this.sFlvToken = t.readString(0, !1, this.sFlvToken),
                    this.iExpireTime = t.readInt32(1, !1, this.iExpireTime)
                }
                ,
                a.WSTimeSyncReq = function() {
                    this.sGuid = "",
                    this.lClientTime = 0
                }
                ,
                a.WSTimeSyncReq.prototype._clone = function() {
                    return new a.WSTimeSyncReq
                }
                ,
                a.WSTimeSyncReq.prototype._write = function(t, e, i) {
                    t.writeStruct(e, i)
                }
                ,
                a.WSTimeSyncReq.prototype._read = function(t, e, i) {
                    return t.readStruct(e, !0, i)
                }
                ,
                a.WSTimeSyncReq.prototype.writeTo = function(t) {
                    t.writeString(0, this.sGuid),
                    t.writeInt64(1, this.lClientTime)
                }
                ,
                a.WSTimeSyncReq.prototype.readFrom = function(t) {
                    this.sGuid = t.readString(0, !1, this.sGuid),
                    this.lClientTime = t.readInt64(1, !1, this.lClientTime)
                }
                ,
                a.WSTimeSyncRsp = function() {
                    this.lServerTime = 0
                }
                ,
                a.WSTimeSyncRsp.prototype._clone = function() {
                    return new a.WSTimeSyncRsp
                }
                ,
                a.WSTimeSyncRsp.prototype._write = function(t, e, i) {
                    t.writeStruct(e, i)
                }
                ,
                a.WSTimeSyncRsp.prototype._read = function(t, e, i) {
                    return t.readStruct(e, !0, i)
                }
                ,
                a.WSTimeSyncRsp.prototype.writeTo = function(t) {
                    t.writeInt64(0, this.lServerTime)
                }
                ,
                a.WSTimeSyncRsp.prototype.readFrom = function(t) {
                    this.lServerTime = t.readInt64(0, !1, this.lServerTime)
                }
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(12)
                  , n = i(10)
                  , o = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.streamName = "",
                        this.codecType = 0,
                        this.cdnBrand = 0
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new n.a(!1);
                            return t.pushString(this.streamName),
                            t.pushUInt16(this.codecType),
                            t.pushUInt16(this.cdnBrand),
                            t.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t) {
                            return this.streamName = t.popString(),
                            this.codecType = t.popUInt16(),
                            this.cdnBrand = t.popUInt16(),
                            this
                        }
                    }, {
                        key: "isValidID",
                        get: function() {
                            return this.codecType > 0
                        }
                    }, {
                        key: "isH264",
                        get: function() {
                            return this.codecType >= r.default.VIDEO_264_START && this.codecType <= r.default.VIDEO_H264_END
                        }
                    }, {
                        key: "isH265",
                        get: function() {
                            return this.codecType >= r.default.VIDEO_265_START && this.codecType <= r.default.VIDEO_H265_END
                        }
                    }, {
                        key: "getDefCodecRate",
                        value: function() {
                            return this.codecType >= r.default.VIDEO_264_START && this.codecType <= r.default.VIDEO_H264_END ? 100 * (this.codecType - r.default.VIDEO_264_START) : this.codecType >= r.default.VIDEO_265_START && this.codecType <= r.default.VIDEO_H265_END ? 100 * (this.codecType - r.default.VIDEO_265_START) : 128
                        }
                    }, {
                        key: "text",
                        value: function() {
                            return this.streamName + "_" + this.codecType + "_" + this.cdnBrand
                        }
                    }, {
                        key: "equal",
                        value: function(t) {
                            return !!t && this.streamName == t.streamName && this.codecType == t.codecType && this.cdnBrand == t.cdnBrand
                        }
                    }]),
                    t
                }();
                e.default = o
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(10)
                  , n = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.ip = 0,
                        this.tcpPorts = [],
                        this.udpPorts = [],
                        this.videoProxyInfo = new v.default
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new r.a(!1);
                            return "number" == typeof this.ip ? t.pushUInt32(this.ip) : t.pushUInt32(this.ip2uint(this.ip)),
                            t.pushUInt16Vector(this.tcpPorts),
                            t.pushUInt16Vector(this.udpPorts),
                            t.pushUInt32(this.videoProxyInfo.size),
                            this.videoProxyInfo.forEach((function(e, i) {
                                t.pushUInt8(i),
                                t.pushUInt32(e)
                            }
                            )),
                            t.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t) {
                            this.ip = this.uint2ip(t.popUInt32()),
                            this.tcpPorts = t.popUInt16Vector(),
                            this.udpPorts = t.popUInt16Vector(),
                            this.videoProxyInfo.clear();
                            for (var e = t.popUInt32(), i = 0; i < e; i++) {
                                var s = t.popUInt8()
                                  , a = t.popUInt32();
                                this.videoProxyInfo.set(s, a)
                            }
                            return this
                        }
                    }, {
                        key: "ip2uint",
                        value: function(t) {
                            for (var e = 0, i = t.split("."), s = 0; s < i.length; s++)
                                e |= Number(i[s]) << 8 * s;
                            return e < 0 && (e += 4294967296),
                            e
                        }
                    }, {
                        key: "uint2ip",
                        value: function(t) {
                            return (255 & t) + "." + (t >> 8 & 255) + "." + (t >> 16 & 255) + "." + (t >> 24 & 255)
                        }
                    }]),
                    t
                }();
                e.default = n
            }
            , function(t, e, i) {
                var s, a = "object" == ("undefined" == typeof Reflect ? "undefined" : (0,
                I.default)(Reflect)) ? Reflect : null, r = a && "function" == typeof a.apply ? a.apply : function(t, e, i) {
                    return Function.prototype.apply.call(t, e, i)
                }
                ;
                s = a && "function" == typeof a.ownKeys ? a.ownKeys : y.default ? function(t) {
                    return (0,
                    m.default)(t).concat((0,
                    y.default)(t))
                }
                : function(t) {
                    return (0,
                    m.default)(t)
                }
                ;
                var n = p.default || function(t) {
                    return t != t
                }
                ;
                function o() {
                    o.init.call(this)
                }
                t.exports = o,
                o.EventEmitter = o,
                o.prototype._events = void 0,
                o.prototype._eventsCount = 0,
                o.prototype._maxListeners = void 0;
                var u = 10;
                function h(t) {
                    if ("function" != typeof t)
                        throw new TypeError('The "listener" argument must be of type Function. Received type ' + (void 0 === t ? "undefined" : (0,
                        I.default)(t)))
                }
                function l(t) {
                    return void 0 === t._maxListeners ? o.defaultMaxListeners : t._maxListeners
                }
                function c(t, e, i, s) {
                    var a, r, n, o;
                    if (h(i),
                    void 0 === (r = t._events) ? (r = t._events = (0,
                    E.default)(null),
                    t._eventsCount = 0) : (void 0 !== r.newListener && (t.emit("newListener", e, i.listener ? i.listener : i),
                    r = t._events),
                    n = r[e]),
                    void 0 === n)
                        n = r[e] = i,
                        ++t._eventsCount;
                    else if ("function" == typeof n ? n = r[e] = s ? [i, n] : [n, i] : s ? n.unshift(i) : n.push(i),
                    (a = l(t)) > 0 && n.length > a && !n.warned) {
                        n.warned = !0;
                        var u = new Error("Possible EventEmitter memory leak detected. " + n.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                        u.name = "MaxListenersExceededWarning",
                        u.emitter = t,
                        u.type = e,
                        u.count = n.length,
                        o = u,
                        console && console.warn && console.warn(o)
                    }
                    return t
                }
                function d() {
                    if (!this.fired)
                        return this.target.removeListener(this.type, this.wrapFn),
                        this.fired = !0,
                        0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments)
                }
                function v(t, e, i) {
                    var s = {
                        fired: !1,
                        wrapFn: void 0,
                        target: t,
                        type: e,
                        listener: i
                    }
                      , a = d.bind(s);
                    return a.listener = i,
                    s.wrapFn = a,
                    a
                }
                function _(t, e, i) {
                    var s = t._events;
                    if (void 0 === s)
                        return [];
                    var a = s[e];
                    return void 0 === a ? [] : "function" == typeof a ? i ? [a.listener || a] : [a] : i ? function(t) {
                        for (var e = new Array(t.length), i = 0; i < e.length; ++i)
                            e[i] = t[i].listener || t[i];
                        return e
                    }(a) : T(a, a.length)
                }
                function S(t) {
                    var e = this._events;
                    if (void 0 !== e) {
                        var i = e[t];
                        if ("function" == typeof i)
                            return 1;
                        if (void 0 !== i)
                            return i.length
                    }
                    return 0
                }
                function T(t, e) {
                    for (var i = new Array(e), s = 0; s < e; ++s)
                        i[s] = t[s];
                    return i
                }
                Object.defineProperty(o, "defaultMaxListeners", {
                    enumerable: !0,
                    get: function() {
                        return u
                    },
                    set: function(t) {
                        if ("number" != typeof t || t < 0 || n(t))
                            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
                        u = t
                    }
                }),
                o.init = function() {
                    void 0 !== this._events && this._events !== (0,
                    g.default)(this)._events || (this._events = (0,
                    E.default)(null),
                    this._eventsCount = 0),
                    this._maxListeners = this._maxListeners || void 0
                }
                ,
                o.prototype.setMaxListeners = function(t) {
                    if ("number" != typeof t || t < 0 || n(t))
                        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t + ".");
                    return this._maxListeners = t,
                    this
                }
                ,
                o.prototype.getMaxListeners = function() {
                    return l(this)
                }
                ,
                o.prototype.emit = function(t) {
                    for (var e = [], i = 1; i < arguments.length; i++)
                        e.push(arguments[i]);
                    var s = "error" === t
                      , a = this._events;
                    if (void 0 !== a)
                        s = s && void 0 === a.error;
                    else if (!s)
                        return !1;
                    if (s) {
                        var n;
                        if (e.length > 0 && (n = e[0]),
                        n instanceof Error)
                            throw n;
                        var o = new Error("Unhandled error." + (n ? " (" + n.message + ")" : ""));
                        throw o.context = n,
                        o
                    }
                    var u = a[t];
                    if (void 0 === u)
                        return !1;
                    if ("function" == typeof u)
                        r(u, this, e);
                    else {
                        var h = u.length
                          , l = T(u, h);
                        for (i = 0; i < h; ++i)
                            r(l[i], this, e)
                    }
                    return !0
                }
                ,
                o.prototype.addListener = function(t, e) {
                    return c(this, t, e, !1)
                }
                ,
                o.prototype.on = o.prototype.addListener,
                o.prototype.prependListener = function(t, e) {
                    return c(this, t, e, !0)
                }
                ,
                o.prototype.once = function(t, e) {
                    return h(e),
                    this.on(t, v(this, t, e)),
                    this
                }
                ,
                o.prototype.prependOnceListener = function(t, e) {
                    return h(e),
                    this.prependListener(t, v(this, t, e)),
                    this
                }
                ,
                o.prototype.removeListener = function(t, e) {
                    var i, s, a, r, n;
                    if (h(e),
                    void 0 === (s = this._events))
                        return this;
                    if (void 0 === (i = s[t]))
                        return this;
                    if (i === e || i.listener === e)
                        0 == --this._eventsCount ? this._events = (0,
                        E.default)(null) : (delete s[t],
                        s.removeListener && this.emit("removeListener", t, i.listener || e));
                    else if ("function" != typeof i) {
                        for (a = -1,
                        r = i.length - 1; r >= 0; r--)
                            if (i[r] === e || i[r].listener === e) {
                                n = i[r].listener,
                                a = r;
                                break
                            }
                        if (a < 0)
                            return this;
                        0 === a ? i.shift() : function(t, e) {
                            for (; e + 1 < t.length; e++)
                                t[e] = t[e + 1];
                            t.pop()
                        }(i, a),
                        1 === i.length && (s[t] = i[0]),
                        void 0 !== s.removeListener && this.emit("removeListener", t, n || e)
                    }
                    return this
                }
                ,
                o.prototype.off = o.prototype.removeListener,
                o.prototype.removeAllListeners = function(t) {
                    var e, i, s;
                    if (void 0 === (i = this._events))
                        return this;
                    if (void 0 === i.removeListener)
                        return 0 === arguments.length ? (this._events = (0,
                        E.default)(null),
                        this._eventsCount = 0) : void 0 !== i[t] && (0 == --this._eventsCount ? this._events = (0,
                        E.default)(null) : delete i[t]),
                        this;
                    if (0 === arguments.length) {
                        var a, r = (0,
                        f.default)(i);
                        for (s = 0; s < r.length; ++s)
                            "removeListener" !== (a = r[s]) && this.removeAllListeners(a);
                        return this.removeAllListeners("removeListener"),
                        this._events = (0,
                        E.default)(null),
                        this._eventsCount = 0,
                        this
                    }
                    if ("function" == typeof (e = i[t]))
                        this.removeListener(t, e);
                    else if (void 0 !== e)
                        for (s = e.length - 1; s >= 0; s--)
                            this.removeListener(t, e[s]);
                    return this
                }
                ,
                o.prototype.listeners = function(t) {
                    return _(this, t, !0)
                }
                ,
                o.prototype.rawListeners = function(t) {
                    return _(this, t, !1)
                }
                ,
                o.listenerCount = function(t, e) {
                    return "function" == typeof t.listenerCount ? t.listenerCount(e) : S.call(t, e)
                }
                ,
                o.prototype.listenerCount = S,
                o.prototype.eventNames = function() {
                    return this._eventsCount > 0 ? s(this._events) : []
                }
            }
            , function(t, e, i) {
                t.exports = function(t) {
                    var e = {};
                    function i(s) {
                        if (e[s])
                            return e[s].exports;
                        var a = e[s] = {
                            i: s,
                            l: !1,
                            exports: {}
                        };
                        return t[s].call(a.exports, a, a.exports, i),
                        a.l = !0,
                        a.exports
                    }
                    return i.m = t,
                    i.c = e,
                    i.d = function(t, e, s) {
                        i.o(t, e) || (0,
                        w.default)(t, e, {
                            enumerable: !0,
                            get: s
                        })
                    }
                    ,
                    i.r = function(t) {
                        void 0 !== C.default && b.default && (0,
                        w.default)(t, b.default, {
                            value: "Module"
                        }),
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        })
                    }
                    ,
                    i.t = function(t, e) {
                        if (1 & e && (t = i(t)),
                        8 & e)
                            return t;
                        if (4 & e && "object" == (void 0 === t ? "undefined" : (0,
                        I.default)(t)) && t && t.__esModule)
                            return t;
                        var s = (0,
                        E.default)(null);
                        if (i.r(s),
                        Object.defineProperty(s, "default", {
                            enumerable: !0,
                            value: t
                        }),
                        2 & e && "string" != typeof t)
                            for (var a in t)
                                i.d(s, a, function(e) {
                                    return t[e]
                                }
                                .bind(null, a));
                        return s
                    }
                    ,
                    i.n = function(t) {
                        var e = t && t.__esModule ? function() {
                            return t.default
                        }
                        : function() {
                            return t
                        }
                        ;
                        return i.d(e, "a", e),
                        e
                    }
                    ,
                    i.o = function(t, e) {
                        return Object.prototype.hasOwnProperty.call(t, e)
                    }
                    ,
                    i.p = "",
                    i(i.s = 0)
                }([function(t, e, i) {
                    function s(t, e) {
                        if (!(t instanceof e))
                            throw new TypeError("Cannot call a class as a function")
                    }
                    function a(t, e) {
                        for (var i = 0; i < e.length; i++) {
                            var s = e[i];
                            s.enumerable = s.enumerable || !1,
                            s.configurable = !0,
                            "value"in s && (s.writable = !0),
                            (0,
                            w.default)(t, s.key, s)
                        }
                    }
                    function r(t, e, i) {
                        return e && a(t.prototype, e),
                        i && a(t, i),
                        t
                    }
                    function n(t, e) {
                        (null == e || e > t.length) && (e = t.length);
                        for (var i = 0, s = new Array(e); i < e; i++)
                            s[i] = t[i];
                        return s
                    }
                    function o(t, e) {
                        var i = t.toString().length
                          , s = Math.max(0, e - i)
                          , a = "";
                        if (s > 0)
                            for (var r = 0; r < s; r++)
                                a += "0";
                        return a + t
                    }
                    function u() {
                        var t = new Date
                          , e = t.getFullYear()
                          , i = o(t.getMonth() + 1, 2)
                          , s = o(t.getDate(), 2)
                          , a = o(t.getHours(), 2)
                          , r = o(t.getMinutes(), 2)
                          , n = o(t.getSeconds(), 2);
                        return "[" + "".concat(e, "-").concat(i, "-").concat(s, " ").concat(a, ":").concat(r, ":").concat(n) + "." + o(t.getMilliseconds(), 3) + "][w265]"
                    }
                    i.r(e);
                    var h = [];
                    function f() {
                        for (var t, e = u(), i = arguments.length, s = new Array(i), a = 0; a < i; a++)
                            s[a] = arguments[a];
                        s[0] = e + s[0],
                        self.logCallback ? (t = self.logCallback).call.apply(t, [null].concat(s)) : h.push(s)
                    }
                    var p = function() {
                        function t(e, i) {
                            s(this, t),
                            this.width = e,
                            this.height = i,
                            this.stridey = this.width,
                            this.strideu = this.stridey / 2,
                            this.stridev = this.stridey / 2
                        }
                        return r(t, [{
                            key: "calc",
                            value: function(t) {
                                for (var e = new Uint8Array(this.stridey * this.height).fill(128, 0, this.stridey * this.height), i = new Uint8Array(this.strideu * this.height).fill(128, 0, this.strideu * this.height), s = new Uint8Array(this.stridev * this.height).fill(128, 0, this.stridev * this.height), a = new Uint8Array(this.width * this.height * 4), r = 1e3 * window.performance.now(), n = 0; n < t; n++)
                                    this.convertYUV420(e, i, s, this.width, this.height, this.stridey, this.strideu, this.stridev, a);
                                return 1e3 * window.performance.now() - r
                            }
                        }, {
                            key: "convertYUV420",
                            value: function(t, e, i, s, a, r, n, o, u) {
                                for (var h, l, c, d, f, p = 0, m = 0, y = s >> 1, v = y * a, _ = 0, g = 0, S = 0, T = 0; T < v; T++)
                                    f = T << 1,
                                    h = 1.164 * (t[_ + (d = p << 1)] - 16),
                                    l = e[g + p] - 128,
                                    c = i[S + p] - 128,
                                    u[0 + (f << 2)] = h + 1.596 * c,
                                    u[1 + (f << 2)] = h - .813 * c - .391 * l,
                                    u[2 + (f << 2)] = h + 2.018 * l,
                                    u[3 + (f << 2)] = 255,
                                    h = 1.164 * (t[_ + d + 1] - 16),
                                    u[0 + (f + 1 << 2)] = h + 1.596 * c,
                                    u[1 + (f + 1 << 2)] = h - .813 * c - .391 * l,
                                    u[2 + (f + 1 << 2)] = h + 2.018 * l,
                                    u[3 + (f + 1 << 2)] = 255,
                                    ++p === y && (p = 0,
                                    _ += r,
                                    g = (++m >> 1) * n,
                                    S = (m >> 1) * o)
                            }
                        }]),
                        t
                    }()
                      , m = function() {
                        function t() {
                            s(this, t)
                        }
                        return r(t, null, [{
                            key: "isSupportWasm",
                            value: function() {
                                return "object" == ("undefined" == typeof WebAssembly ? "undefined" : (0,
                                I.default)(WebAssembly))
                            }
                        }, {
                            key: "isSupportWasmThread",
                            value: function() {
                                if ("undefined" == typeof SharedArrayBuffer || "undefined" == typeof Atomics)
                                    return f("hevcd", "SharedArrayBuffer undefined or Atomics undefined"),
                                    !1;
                                var t = new WebAssembly.Memory({
                                    initial: 1,
                                    maximum: 1,
                                    shared: !0
                                }).buffer instanceof SharedArrayBuffer;
                                return self.SharedArrayBuffer && self.Atomics && t
                            }
                        }]),
                        t
                    }()
                      , y = function() {
                        function t() {
                            s(this, t),
                            this.cla = "hevcd",
                            this.configs = null,
                            this.costUs = 0,
                            this.reason = 0,
                            this.cores = navigator.hardwareConcurrency,
                            this.is64bit = this.is64bitSoftware(),
                            this.enableCost = !0
                        }
                        return r(t, [{
                            key: "parseConfigs",
                            value: function(t) {
                                this.configs = t,
                                f(this.cla, "parse", (0,
                                d.default)(t), "cfg", this.configs.enableWebH265)
                            }
                        }, {
                            key: "isSupportH265",
                            value: function(t, e) {
                                if (null == this.configs)
                                    return f(this.cla, "isSupportH265 configs==null"),
                                    !1;
                                this.reason = 0;
                                var i = this.isConfigEnable() && this.isCPUCoresSatisfy(e) && this.isWasm() && this.isBitrateInRange(e) && this.isCostInRange(e);
                                return f(this.cla, "isSupportH265", i, "kbps=", e, "costUs", this.costUs.toFixed(0), "cores", this.cores, "64b", this.is64bit, "reason", this.reason, "version", t, "cfg", (0,
                                d.default)(this.configs)),
                                f("ua:", navigator.userAgent),
                                {
                                    isSupport: i,
                                    costUs: this.costUs.toFixed(0),
                                    reason: this.reason
                                }
                            }
                        }, {
                            key: "isWasm",
                            value: function() {
                                return !!m.isSupportWasm() || (this.reason = 7,
                                !1)
                            }
                        }, {
                            key: "isConfigEnable",
                            value: function() {
                                return !(!this.hasOwnProperty("enableWebH265") || 1 != this.configs.enableWebH265 && (this.reason = 1,
                                1))
                            }
                        }, {
                            key: "isCPUCoresSatisfy",
                            value: function(t) {
                                if (this.hasOwnProperty("core")) {
                                    var e = this.configs.core[4e3];
                                    if (this.configs.core.hasOwnProperty(t) && (e = this.configs.core[t]),
                                    this.cores > e)
                                        return !0
                                } else if (this.cores > 4)
                                    return !0;
                                return this.reason = 2,
                                !1
                            }
                        }, {
                            key: "is64bitSoftware",
                            value: function() {
                                return -1 != navigator.userAgent.indexOf("Macintosh") || -1 != navigator.userAgent.indexOf("x64")
                            }
                        }, {
                            key: "isBitrateInRange",
                            value: function(t) {
                                return m.isSupportWasmThread() ? !(!this.hasOwnProperty("multiThreadBitKbps") || ((t >= 4e3 || 0 == t) && !this.checkX86(t) ? (this.reason = 4,
                                1) : (!Array.isArray(this.configs.multiThreadBitKbps) || !this.configs.multiThreadBitKbps.includes(t)) && (this.reason = 3,
                                1))) : (this.reason = 6,
                                !1)
                            }
                        }, {
                            key: "checkX86",
                            value: function(t) {
                                if (this.is64bit)
                                    return !0;
                                if (!this.hasOwnProperty("x86"))
                                    return !1;
                                var e = !1;
                                return this.configs.x86.hasOwnProperty(t) && (e = 1 == this.configs.x86[t]),
                                e
                            }
                        }, {
                            key: "isCostInRange",
                            value: function(t) {
                                if (!this.enableCost)
                                    return !0;
                                if (!this.hasOwnProperty("baseCostUs"))
                                    return !1;
                                var e = this.configs.baseCostUs[2e3];
                                return this.configs.baseCostUs.hasOwnProperty(t) && (e = this.configs.baseCostUs[t]),
                                this.costUs = this.getCost(),
                                this.costUs <= e || (this.reason = 5,
                                !1)
                            }
                        }, {
                            key: "getCost",
                            value: function() {
                                var t = this;
                                if (!this.hasOwnProperty("loopCount"))
                                    return f(this.cla, "getCost configs==null or has no key=loopCount"),
                                    0;
                                var e = 0;
                                return localStorage.hasOwnProperty("w265LastCost") && (e = Number(localStorage.w265LastCost)),
                                this.sid && clearTimeout(this.sid),
                                this.sid = setTimeout((function() {
                                    var e = new p(120,120);
                                    localStorage.w265LastCost = Math.floor(e.calc(t.configs.loopCount))
                                }
                                ), 5e3),
                                e
                            }
                        }, {
                            key: "hasOwnProperty",
                            value: function(t) {
                                return !!this.configs.hasOwnProperty(t) || (this.reason = 1,
                                !1)
                            }
                        }]),
                        t
                    }()
                      , v = function() {
                        function t() {
                            s(this, t),
                            this.configMgr = new y
                        }
                        return r(t, [{
                            key: "parseConfigs",
                            value: function(t) {
                                this.configMgr.parseConfigs(t)
                            }
                        }, {
                            key: "isSupportH265",
                            value: function(t) {
                                return this.configMgr.isSupportH265(this.version(), t)
                            }
                        }, {
                            key: "version",
                            value: function() {
                                return "1.5.2"
                            }
                        }, {
                            key: "setLogCallback",
                            value: function(t) {
                                var e;
                                e = t,
                                self.logCallback = e,
                                f("Logger setLogCallback"),
                                h.length > 0 && (h.forEach((function(t) {
                                    var e;
                                    (e = self.logCallback).call.apply(e, [null].concat(function(t) {
                                        return function(t) {
                                            if (Array.isArray(t))
                                                return n(t)
                                        }(t) || function(t) {
                                            if (void 0 !== C.default && (0,
                                            c.default)(Object(t)))
                                                return (0,
                                                l.default)(t)
                                        }(t) || function(t, e) {
                                            if (t) {
                                                if ("string" == typeof t)
                                                    return n(t, e);
                                                var i = Object.prototype.toString.call(t).slice(8, -1);
                                                return "Object" === i && t.constructor && (i = t.constructor.name),
                                                "Map" === i || "Set" === i ? (0,
                                                l.default)(i) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? n(t, e) : void 0
                                            }
                                        }(t) || function() {
                                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                                        }()
                                    }(t)))
                                }
                                )),
                                h.length = 0)
                            }
                        }, {
                            key: "isStripe",
                            value: function() {
                                return -1 !== navigator.userAgent.indexOf("Windows")
                            }
                        }], [{
                            key: "getInstance",
                            value: function() {
                                return this.instance || (this.instance = new t),
                                this.instance
                            }
                        }]),
                        t
                    }();
                    e.default = v
                }
                ]).default
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(14)
                  , n = i(15)
                  , o = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.streamId = new r.default,
                        this.videoProxyInfos = [],
                        this.token = "",
                        this.streamSeqSN = 0,
                        this.quickAccessBeginIndex = 0,
                        this.quickAccessEndIndex = 0,
                        this.ip = 0,
                        this.urlTokenTime = 0,
                        this.urlToken = ""
                    }
                    return Object(a.a)(t, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.streamId.unmarshall(t),
                            this.videoProxyInfos = [];
                            for (var e = t.popUInt32(), i = 0; i < e; i++) {
                                var s = new n.default;
                                this.videoProxyInfos.push(s.unmarshall(t))
                            }
                            return this.token = t.popString(),
                            this.streamSeqSN = t.popUInt64(),
                            this.quickAccessBeginIndex = t.popUInt64(),
                            this.quickAccessEndIndex = t.popUInt64(),
                            this.ip = t.popUInt32(),
                            this.urlTokenTime = t.popUInt32(),
                            this.urlToken = t.popString(),
                            this
                        }
                    }]),
                    t
                }();
                e.default = o
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(10)
                  , n = i(14)
                  , o = i(15)
                  , u = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.currentProxyInfos = new v.default
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new r.a(!1);
                            return t.pushUInt32(this.currentProxyInfos.size),
                            this.currentProxyInfos.forEach((function(e, i) {
                                t.pushUint8ArrayWithoutLen(i.marshall()),
                                t.pushUInt32(e.length),
                                e.forEach((function(e) {
                                    t.pushUint8ArrayWithoutLen(e.marshall())
                                }
                                ))
                            }
                            )),
                            t.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t) {
                            this.currentProxyInfos.clear();
                            for (var e = t.popUInt32(), i = 0; i < e; i++) {
                                var s = new n.default;
                                s.unmarshall(t);
                                for (var a = [], r = t.popUInt32(), u = 0; u < r; u++) {
                                    var h = new o.default;
                                    a.push(h.unmarshall(t))
                                }
                                this.currentProxyInfos.set(s, a)
                            }
                            return this
                        }
                    }]),
                    t
                }();
                e.default = u
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.uid = 0,
                        this.encoderSource = 0,
                        this.uploadType = 0,
                        this.frameDts = 0,
                        this.caputureTime = 0,
                        this.encodeEndTime = 0,
                        this.sendFrameTime = 0
                    }
                    return Object(a.a)(t, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.uid = t.popUInt64(),
                            this.encoderSource = t.popUInt8(),
                            this.uploadType = t.popUInt8(),
                            this.frameDts = t.popUInt64(),
                            this.caputureTime = t.popUInt64(),
                            this.encodeEndTime = t.popUInt64(),
                            this.sendFrameTime = t.popUInt64()
                        }
                    }]),
                    t
                }();
                e.default = r
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(22)
                  , n = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.dtsGapSum = 0,
                        this.delaySum = 0,
                        this.serverInfos = []
                    }
                    return Object(a.a)(t, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.dtsGapSum = t.popInt64(),
                            this.delaySum = t.popUInt64();
                            for (var e = t.popUInt32(); e > 0; ) {
                                e--;
                                var i = new r.default;
                                i.unmarshall(t),
                                this.serverInfos.push(i)
                            }
                        }
                    }]),
                    t
                }();
                e.default = n
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.enable = 0,
                        //!=0时表示有效数据
                        this.proxyIdLow = 0,
                        this.proxyIdHigh = 0,
                        this.proxyType = 0,
                        this.serverDelay = 0,
                        this.lastPeriodDelay = 0
                    }
                    return Object(a.a)(t, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.enable = t.popUInt8(),
                            this.proxyIdLow = t.popUInt32(),
                            this.proxyIdHigh = t.popUInt32(),
                            this.proxyType = t.popUInt16(),
                            this.serverDelay = t.popUInt32(),
                            this.lastPeriodDelay = t.popUInt32()
                        }
                    }, {
                        key: "getProxyIdStr",
                        value: function() {
                            return this.proxyIdHigh.toString(16) + this.proxyIdLow.toString(16)
                        }
                    }]),
                    t
                }();
                e.default = r
            }
            , function(t, e, i) {
                var s = i(1)
                  , a = i(2)
                  , r = function() {
                    function t(e) {
                        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        Object(s.a)(this, t),
                        this.view = e,
                        this.pos = 0,
                        this.len = 0,
                        this.uri = 0,
                        this.resCode = 0,
                        !0 === i && (this.len = this.popUInt32(),
                        this.uri = this.popUInt32(),
                        this.resCode = this.popUInt16())
                    }
                    return Object(a.a)(t, [{
                        key: "bytesAvailable",
                        value: function() {
                            return this.view.byteLength - this.pos
                        }
                    }, {
                        key: "popBool",
                        value: function() {
                            return 1 == this.popUInt8()
                        }
                    }, {
                        key: "popUInt8",
                        value: function() {
                            if (this.pos + 1 > this.view.byteLength)
                                return 0;
                            var t = this.view.getUint8(this.pos);
                            return this.pos++,
                            t
                        }
                    }, {
                        key: "popUInt16",
                        value: function() {
                            if (this.pos + 2 > this.view.byteLength)
                                return 0;
                            var t = this.view.getUint16(this.pos, !0);
                            return this.pos += 2,
                            t
                        }
                    }, {
                        key: "popUInt32",
                        value: function() {
                            if (this.pos + 4 > this.view.byteLength)
                                return 0;
                            var t = this.view.getUint32(this.pos, !0);
                            return this.pos += 4,
                            t
                        }
                    }, {
                        key: "popUInt64",
                        value: function() {
                            if (this.pos + 8 > this.view.byteLength)
                                return 0;
                            var t = this.view.getUint32(this.pos, !0);
                            this.pos += 4;
                            var e = this.view.getUint32(this.pos, !0);
                            return this.pos += 4,
                            4294967296 * e + t
                        }
                    }, {
                        key: "popInt64",
                        value: function() {
                            for (var t = 0, e = (128 & this.view.getUint8(this.pos + 7)) > 0, i = !0, s = 0; s < 8; s++) {
                                var a = this.view.getUint8(this.pos + s);
                                e && (i ? 0 != a && (a = 255 & ~(a - 1),
                                i = !1) : a = 255 & ~a),
                                t += a * Math.pow(2, 8 * s)
                            }
                            return e && (t = -t),
                            this.pos += 8,
                            t
                        }
                    }, {
                        key: "popUint8Array",
                        value: function() {
                            var t = this.popUInt16();
                            if (this.pos + t > this.view.byteLength)
                                return null;
                            var e = new Uint8Array(this.view.buffer,this.pos,t);
                            return this.pos += t,
                            e.slice()
                        }
                    }, {
                        key: "popUint8Array32",
                        value: function() {
                            var t = this.popUInt32();
                            if (this.pos + t > this.view.byteLength)
                                return null;
                            var e = new Uint8Array(this.view.buffer,this.pos,t);
                            return this.pos += t,
                            e.slice()
                        }
                    }, {
                        key: "popUInt64Vector",
                        value: function() {
                            var t = this.popUInt32();
                            if (this.pos + 8 * t > this.view.byteLength)
                                return null;
                            for (var e = [], i = 0; i < t; i++)
                                e.push(this.popUInt64());
                            return e
                        }
                    }, {
                        key: "popUInt32Vector",
                        value: function() {
                            var t = this.popUInt32();
                            if (this.pos + 4 * t > this.view.byteLength)
                                return null;
                            for (var e = [], i = 0; i < t; i++)
                                e.push(this.popUInt32());
                            return e
                        }
                    }, {
                        key: "popUInt16Vector",
                        value: function() {
                            var t = this.popUInt32();
                            if (this.pos + 2 * t > this.view.byteLength)
                                return null;
                            for (var e = [], i = 0; i < t; i++)
                                e.push(this.popUInt16());
                            return e
                        }
                    }, {
                        key: "popString",
                        value: function() {
                            var t = this.popUInt16();
                            if (this.pos + t > this.view.byteLength)
                                return null;
                            for (var e = [], i = 0; i < t; ++i)
                                e[i] = String.fromCharCode(this.popUInt8());
                            return e.join("")
                        }
                    }, {
                        key: "popMapKey8Val32",
                        value: function() {
                            for (var t = this.popUInt32(), e = new v.default, i = 0; i < t; i++) {
                                var s = this.popUInt8()
                                  , a = this.popUInt32();
                                e.set(s, a)
                            }
                            return e
                        }
                    }, {
                        key: "popMapKey64Val64",
                        value: function() {
                            for (var t = this.popUInt32(), e = new v.default, i = 0; i < t; i++) {
                                var s = this.popUInt64()
                                  , a = this.popUInt64();
                                e.set(s, a)
                            }
                            return e
                        }
                    }]),
                    t
                }();
                e.a = r
            }
            , function(t, e, i) {
                function s(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var i = 0, s = new Array(e); i < e; i++)
                        s[i] = t[i];
                    return s
                }
                function a(t, e) {
                    if (t) {
                        if ("string" == typeof t)
                            return s(t, e);
                        var i = Object.prototype.toString.call(t).slice(8, -1);
                        return "Object" === i && t.constructor && (i = t.constructor.name),
                        "Map" === i || "Set" === i ? (0,
                        l.default)(i) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? s(t, e) : void 0
                    }
                }
                i.d(e, "a", (function() {
                    return a
                }
                ))
            }
            , function(t, e, i) {
                var s = {
                    buildAbsoluteURL: function(t, e) {
                        if (e = e.trim(),
                        /^[a-z]+:/i.test(e))
                            return e;
                        var i = null
                          , a = null
                          , r = /^([^#]*)(.*)$/.exec(e);
                        r && (a = r[2],
                        e = r[1]);
                        var n = /^([^\?]*)(.*)$/.exec(e);
                        n && (i = n[2],
                        e = n[1]);
                        var o = /^([^#]*)(.*)$/.exec(t);
                        o && (t = o[1]);
                        var u = /^([^\?]*)(.*)$/.exec(t);
                        u && (t = u[1]);
                        var h = /^((([a-z]+):)?\/\/[a-z0-9\.-]+(:[0-9]+)?\/)(.*)$/i.exec(t)
                          , l = h[3]
                          , c = h[1]
                          , d = h[5]
                          , f = null;
                        return f = /^\/\//.test(e) ? l + "://" + s.buildAbsolutePath("", e.substring(2)) : /^\//.test(e) ? c + s.buildAbsolutePath("", e.substring(1)) : c + s.buildAbsolutePath(d, e),
                        i && (f += i),
                        a && (f += a),
                        f
                    },
                    buildAbsolutePath: function(t, e) {
                        for (var i, s, a = e, r = "", n = t.replace(/[^\/]*$/, a.replace(/(\/|^)(?:\.?\/+)+/g, "$1")), o = 0; (s = n.indexOf("/../", o)) > -1; o = s + i)
                            i = /^\/(?:\.\.\/)*/.exec(n.slice(s))[0].length,
                            r = (r + n.substring(o, s)).replace(new RegExp("(?:\\/+[^\\/]*){0," + (i - 1) / 3 + "}$"), "/");
                        var u = /\.\.\//g;
                        if (u.test(e)) {
                            var h = t.split("/")
                              , l = e.match(u).length;
                            r = h.splice(0, h.length - 1 - l);
                            var c = n.substr(o);
                            return c.startsWith("/") ? r.join("/") + c : r.join("/") + "/" + c
                        }
                        return r + n.substr(o)
                    },
                    getTimeFromUrl: function(t, e) {
                        var i = e ? /\d+_(\d+)_\d+.ts?/ : /(\d+)_\d+_\d+.ts?/
                          , s = t.match(i);
                        return s ? e ? s[1] : Math.round(s[1] / 1e3) : -1
                    },
                    getVodUrl: function(t, e, i, s) {
                        return "http://106.38.255.95:9123/xcrs/" + t + "_" + e + "_" + i + ".m3u8?btime=" + s
                    }
                };
                t.exports = s
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(7)
                  , n = i(6)
                  , o = i(13)
                  , u = i(16)
                  , h = i(0)
                  , l = i(9)
                  , c = i(23)
                  , d = !!Number(localStorage._printProtocol)
                  , f = !!Number(localStorage._printGateway);
                function p(t, e, i) {
                    var s = "font-weight:900";
                    return t && (s += ";color:" + t),
                    e && (s += ";background:" + e),
                    i && (s += ";border:3px solid " + i),
                    s
                }
                var m = new (function(t) {
                    Object(r.a)(u, t);
                    var e = Object(n.a)(u);
                    function u() {
                        var t;
                        return Object(s.a)(this, u),
                        (t = e.call(this))._taf = null,
                        t.requestId = 1,
                        t.TAFLINK_INITED = "TAFLINK_INITED",
                        t
                    }
                    return Object(a.a)(u, [{
                        key: "inited",
                        get: function() {
                            return !!this._taf
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return !!this._taf && (this._taf.isWSConnected ? this._taf.isWSConnected() : this._taf.connected)
                        }
                    }, {
                        key: "getTaf",
                        value: function() {
                            return this._taf
                        }
                    }, {
                        key: "getUserId",
                        value: function() {
                            return this._taf.getUserId()
                        }
                    }, {
                        key: "getRequestId",
                        value: function() {
                            return this.requestId++,
                            1e5 === this.requestId && (this.requestId = 1),
                            this.requestId
                        }
                    }, {
                        key: "setTafHandler",
                        value: function(t) {
                            t.registerWupMap({
                                getCdnTokenInfoEx: o.default.GetCdnTokenExRsp,
                                wsTimeSync: o.default.WSTimeSyncRsp,
                                getInfoFromVG: o.default.GetInfoFromVGRsp,
                                GetInfoFromVG: o.default.GetInfoFromVGRsp,
                                getInfoFromCdnVG: o.default.GetInfoFromVGRsp
                            }),
                            this._taf = t,
                            t.getTaf && o.default.setTaf(t.getTaf()),
                            this.emit(this.TAFLINK_INITED)
                        }
                    }, {
                        key: "sendWup",
                        value: function(t, e, i) {
                            var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                              , a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4]
                              , r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : -1
                              , n = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
                            this._taf.sendWup2 ? this._taf.sendWup2(t, e, i, s, a, r, n) : this._taf.sendWup(t, e, i, s, a, r, n)
                        }
                    }, {
                        key: "sendYY",
                        value: function(t, e) {
                            var s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                            if (this._taf) {
                                var a = t.constructor.name
                                  , r = l.a[a];
                                r || "function" != typeof t.marshall || (r = new DataView(t.marshall().buffer).getUint32(4, !0));
                                var n = this._taf.getTaf().BinBuffer
                                  , u = new o.default.GetInfoFromVGReq;
                                u.lUid = s || 0,
                                u.sMsg = new n(t.marshall().buffer),
                                u.sProtoName = "yy",
                                u.iUri = r || 0,
                                this._taf.getUserId && (u.tId = this._taf.getUserId(),
                                u.tId.lUid = u.lUid),
                                this.sendWup("videogateway", "getInfoFromCdnVG", u, (function(t) {
                                    if (0 != t.sMsg.len)
                                        if (t.lUid && u.lUid && t.lUid != u.lUid)
                                            h.a.warn("GetInfoFromVG response lUid dif.req=".concat(u.lUid, " rsp=").concat(t.lUid));
                                        else {
                                            var s = new DataView(t.sMsg.buffer)
                                              , r = new c.a(s);
                                            if (!(a = l.a[r.uri]))
                                                throw f || h.a.log("%c<<<<<<< %crspWup:%c GetInfoFromVG", p("#0000E3"), p("black"), p("#0000E3"), "videogateway", t),
                                                new Error("[x] Unmatched protocol, uri=".concat(r.uri >> 8, " resCode=").concat(r.resCode, " len=").concat(r.len));
                                            var n = r
                                              , o = null;
                                            try {
                                                o = i(37)("./" + a).default
                                            } catch (t) {
                                                h.a.warn("[x] Unmatched protocol", r.uri >> 8, a)
                                            }
                                            d && h.a.log("%c<<<<<<< " + a, p("#0000E3"), n),
                                            o && (n = new o).unmarshall(r),
                                            e && e(n)
                                        }
                                    else
                                        h.a.warn("GetInfoFromVG response an empty pkg.")
                                }
                                ))
                            } else
                                h.a.warn("TafLink.sendYY taf not init!")
                        }
                    }]),
                    u
                }(u.EventEmitter));
                e.default = m
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(11)
                  , a = i(1)
                  , r = i(2)
                  , n = i(9)
                  , o = i(10)
                  , u = (i(14),
                i(19))
                  , h = function() {
                    function t() {
                        Object(a.a)(this, t),
                        this.uid = 0,
                        this.version = 0,
                        this.cdnGroupIdList = [],
                        this.currentInfo = new u.default,
                        this.appid = 0,
                        this.clientAppid = 0,
                        this.clientType = 0,
                        this.ip = 0,
                        this.sendTime = 0,
                        this.sdkVersion = 0,
                        this.imsi = 0,
                        this.appId = 0,
                        this.anchorStreamNam2UId = new v.default
                    }
                    return Object(r.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new o.a;
                            t.setUri(n.a.PCDNGetProxyListReq),
                            t.pushUInt64(this.uid),
                            t.pushUInt8(this.version),
                            t.pushUInt32(this.cdnGroupIdList.length),
                            this.cdnGroupIdList.forEach((function(e) {
                                t.pushUint8ArrayWithoutLen(e.marshall())
                            }
                            )),
                            t.pushUint8ArrayWithoutLen(this.currentInfo.marshall()),
                            t.pushUInt8(this.appid),
                            t.pushUInt32(this.clientAppid),
                            t.pushUInt32(this.clientType),
                            t.pushUInt32(this.ip),
                            t.pushUInt32(this.sendTime),
                            t.pushUInt32(this.sdkVersion),
                            t.pushUInt64(this.imsi),
                            t.pushUInt32(this.appId),
                            t.pushUInt32(this.anchorStreamNam2UId.size);
                            var e, i = Object(s.a)(this.anchorStreamNam2UId.keys());
                            try {
                                for (i.s(); !(e = i.n()).done; ) {
                                    var a = e.value;
                                    t.pushString(a),
                                    t.pushUInt64(this.anchorStreamNam2UId.get(a))
                                }
                            } catch (t) {
                                i.e(t)
                            } finally {
                                i.f()
                            }
                            return t.marshall()
                        }
                    }]),
                    t
                }();
                e.default = h
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = (i(9),
                i(18))
                  , n = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.uid = 0,
                        this.allocatedStreams = [],
                        this.clientAppid = 0,
                        this.clientType = 0,
                        this.sendTime = 0,
                        this.userArea = 0,
                        this.videoGroupId = 0,
                        this.retryType = 0,
                        this.retryFreq = 0,
                        this.result = 0,
                        this.proxyType = 0,
                        this.tokenVersion = 0,
                        this.sslUrl = "",
                        this.appId = 0
                    }
                    return Object(a.a)(t, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.uid = t.popUInt64(),
                            this.allocatedStreams = [];
                            for (var e = t.popUInt32(), i = 0; i < e; i++) {
                                var s = new r.default;
                                this.allocatedStreams.push(s.unmarshall(t))
                            }
                            return this.clientAppid = t.popUInt32(),
                            this.clientType = t.popUInt32(),
                            this.sendTime = t.popUInt32(),
                            this.userArea = t.popUInt32(),
                            this.videoGroupId = t.popUInt32(),
                            this.retryType = t.popUInt8(),
                            this.retryFreq = t.popUInt16(),
                            this.result = t.popUInt32(),
                            this.proxyType = t.popUInt32(),
                            this.tokenVersion = t.popUInt32(),
                            this.sslUrl = t.popString(),
                            this.appId = t.popUInt32(),
                            this
                        }
                    }]),
                    t
                }();
                e.default = n
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(9)
                  , n = i(10)
                  , o = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.seq = 0,
                        this.checkSum = 0,
                        this.codecType = 0,
                        this.streamData = null
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new n.a;
                            return t.setUri(r.a.PP2pSliceAudioData),
                            t.pushUInt8(this.checkSum),
                            t.pushUInt16(this.codecType),
                            t.pushUint8Array(this.streamData),
                            t.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t) {
                            return this.checkSum = t.popUInt8(),
                            this.codecType = t.popUInt16(),
                            this.streamData = t.popUint8Array(),
                            this
                        }
                    }]),
                    t
                }();
                e.default = o
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(9)
                  , n = i(10)
                  , o = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.seq = 0,
                        this.strData = null
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new n.a;
                            return t.setUri(r.a.PP2pSliceControlData),
                            t.pushUint8Array(this.strData),
                            t.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t) {
                            return this.strData = t.popUint8Array(),
                            this
                        }
                    }]),
                    t
                }();
                e.default = o
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(9)
                  , n = i(10)
                  , o = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.seq = 0,
                        this.uri = 0,
                        this.from = 0,
                        this.uid = 0,
                        this.streamSeqSN = 0,
                        this.payload = null
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new n.a;
                            return t.setUri(r.a.PP2pSliceData),
                            t.pushUInt64(this.seq),
                            t.pushUInt32(this.uri),
                            t.pushUInt8(this.from),
                            t.pushUInt64(this.uid),
                            t.pushUInt64(this.streamSeqSN),
                            t.pushUint8Array(this.payload),
                            t.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t) {
                            return this.seq = t.popUInt64(),
                            this.uri = t.popUInt32(),
                            this.from = t.popUInt8(),
                            this.uid = t.popUInt64(),
                            this.streamSeqSN = t.popUInt64(),
                            this.payload = t.popUint8Array(),
                            this
                        }
                    }, {
                        key: "isAudio",
                        get: function() {
                            return this.uri == r.a.PP2pSliceAudioData
                        }
                    }, {
                        key: "isVideo",
                        get: function() {
                            return this.uri == r.a.PP2pSliceVideoData
                        }
                    }, {
                        key: "isCtrlSlice",
                        get: function() {
                            return this.uri == r.a.PP2pSliceControlData
                        }
                    }, {
                        key: "isFullSlice",
                        get: function() {
                            return 1 == this.from
                        }
                    }, {
                        key: "isSubSlice",
                        get: function() {
                            return 2 == this.from
                        }
                    }, {
                        key: "isResend",
                        get: function() {
                            return 3 == this.from && 0 == this.uid
                        }
                    }, {
                        key: "isPatchSlice",
                        get: function() {
                            return 4 == this.from
                        }
                    }, {
                        key: "isFromPeer",
                        get: function() {
                            return 0 !== this.uid
                        }
                    }]),
                    t
                }();
                e.default = o
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(9)
                  , n = i(10)
                  , o = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.seq = 0,
                        this.uid = 0,
                        this.isResend = !1,
                        this.checkSum = 0,
                        this.seqNum = 0,
                        this.frameNum = 0,
                        this.frameId = 0,
                        this.config = new v.default,
                        this.streamData = null
                    }
                    return Object(a.a)(t, [{
                        key: "marshall",
                        value: function() {
                            var t = new n.a;
                            return t.setUri(r.a.PP2pSliceVideoData),
                            t.pushUInt8(this.checkSum),
                            t.pushUInt16(this.seqNum),
                            t.pushUInt16(this.frameNum),
                            t.pushUInt32(this.frameId),
                            t.pushUInt32(this.config.size),
                            this.config.forEach((function(e, i) {
                                t.pushUInt8(i),
                                t.pushUInt32(e)
                            }
                            )),
                            t.pushUint8Array(this.streamData),
                            t.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t) {
                            this.checkSum = t.popUInt8(),
                            this.seqNum = t.popUInt16(),
                            this.frameNum = t.popUInt16(),
                            this.frameId = t.popUInt32(),
                            this.config.clear();
                            for (var e = t.popUInt32(), i = 0; i < e; i++) {
                                var s = t.popUInt8()
                                  , a = t.popUInt32();
                                this.config.set(s, a)
                            }
                            return this.streamData = t.popUint8Array(),
                            this
                        }
                    }]),
                    t
                }();
                e.default = o
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.systime = 0,
                        this.encode_delay = 0,
                        this.send_buffer = 0
                    }
                    return Object(a.a)(t, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.systime = t.popUInt64(),
                            this.encode_delay = t.popUInt32(),
                            this.send_buffer = t.popUInt32()
                        }
                    }]),
                    t
                }();
                e.default = r
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = i(20)
                  , n = i(21)
                  , o = function() {
                    function t() {
                        Object(s.a)(this, t),
                        this.anchorSei = new r.default,
                        this.serverSei = new n.default
                    }
                    return Object(a.a)(t, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.anchorSei.unmarshall(t),
                            this.serverSei.unmarshall(t)
                        }
                    }]),
                    t
                }();
                e.default = o
            }
            , function(t, e, i) {
                function s(t) {
                    var e = {};
                    function i(s) {
                        if (e[s])
                            return e[s].exports;
                        var a = e[s] = {
                            i: s,
                            l: !1,
                            exports: {}
                        };
                        return t[s].call(a.exports, a, a.exports, i),
                        a.l = !0,
                        a.exports
                    }
                    i.m = t,
                    i.c = e,
                    i.i = function(t) {
                        return t
                    }
                    ,
                    i.d = function(t, e, s) {
                        i.o(t, e) || (0,
                        w.default)(t, e, {
                            configurable: !1,
                            enumerable: !0,
                            get: s
                        })
                    }
                    ,
                    i.r = function(t) {
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        })
                    }
                    ,
                    i.n = function(t) {
                        var e = t && t.__esModule ? function() {
                            return t.default
                        }
                        : function() {
                            return t
                        }
                        ;
                        return i.d(e, "a", e),
                        e
                    }
                    ,
                    i.o = function(t, e) {
                        return Object.prototype.hasOwnProperty.call(t, e)
                    }
                    ,
                    i.p = "/",
                    i.oe = function(t) {
                        throw console.error(t),
                        t
                    }
                    ;
                    var s = i(i.s = ENTRY_MODULE);
                    return s.default || s
                }
                function a(t) {
                    return (t + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&")
                }
                function r(t, e, s) {
                    var r = {};
                    r[s] = [];
                    var n = e.toString()
                      , o = n.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
                    if (!o)
                        return r;
                    for (var u, h = o[1], l = new RegExp("(\\\\n|\\W)" + a(h) + "\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)","g"); u = l.exec(n); )
                        "dll-reference" !== u[3] && r[s].push(u[3]);
                    for (l = new RegExp("\\(" + a(h) + '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',"g"); u = l.exec(n); )
                        t[u[2]] || (r[s].push(u[1]),
                        t[u[2]] = i(u[1]).m),
                        r[u[2]] = r[u[2]] || [],
                        r[u[2]].push(u[4]);
                    for (var c, d = (0,
                    f.default)(r), p = 0; p < d.length; p++)
                        for (var m = 0; m < r[d[p]].length; m++)
                            c = r[d[p]][m],
                            isNaN(1 * c) || (r[d[p]][m] = 1 * r[d[p]][m]);
                    return r
                }
                function n(t) {
                    return (0,
                    f.default)(t).reduce((function(e, i) {
                        return e || t[i].length > 0
                    }
                    ), !1)
                }
                t.exports = function(t, e) {
                    e = e || {};
                    var a = {
                        main: i.m
                    }
                      , o = e.all ? {
                        main: (0,
                        f.default)(a.main)
                    } : function(t, e) {
                        for (var i = {
                            main: [e]
                        }, s = {
                            main: []
                        }, a = {
                            main: {}
                        }; n(i); )
                            for (var o = (0,
                            f.default)(i), u = 0; u < o.length; u++) {
                                var h = o[u]
                                  , l = i[h].pop();
                                if (a[h] = a[h] || {},
                                !a[h][l] && t[h][l]) {
                                    a[h][l] = !0,
                                    s[h] = s[h] || [],
                                    s[h].push(l);
                                    for (var c = r(t, t[h][l], h), d = (0,
                                    f.default)(c), p = 0; p < d.length; p++)
                                        i[d[p]] = i[d[p]] || [],
                                        i[d[p]] = i[d[p]].concat(c[d[p]])
                                }
                            }
                        return s
                    }(a, t)
                      , u = "";
                    (0,
                    f.default)(o).filter((function(t) {
                        return "main" !== t
                    }
                    )).forEach((function(t) {
                        for (var e = 0; o[t][e]; )
                            e++;
                        o[t].push(e),
                        a[t][e] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })",
                        u = u + "var " + t + " = (" + s.toString().replace("ENTRY_MODULE", (0,
                        d.default)(e)) + ")({" + o[t].map((function(e) {
                            return (0,
                            d.default)(e) + ": " + a[t][e].toString()
                        }
                        )).join(",") + "});\n"
                    }
                    )),
                    u = u + "new ((" + s.toString().replace("ENTRY_MODULE", (0,
                    d.default)(t)) + ")({" + o.main.map((function(t) {
                        return (0,
                        d.default)(t) + ": " + a.main[t].toString()
                    }
                    )).join(",") + "}))(self);";
                    var h = new window.Blob([u],{
                        type: "text/javascript"
                    });
                    if (e.bare)
                        return h;
                    var l = (window.URL || window.webkitURL || window.mozURL || window.msURL).createObjectURL(h)
                      , c = new window.Worker(l);
                    return c.objectURL = l,
                    c
                }
            }
            , function(t, e) {
                t.exports = function(t) {
                    console.log("[ Timer worker init ]");
                    var e = null;
                    function i() {
                        clearInterval(e),
                        e = null
                    }
                    t.addEventListener("message", (function(s) {
                        switch (s.data) {
                        case "start":
                            i(),
                            e = setInterval((function() {
                                t.postMessage({})
                            }
                            ), 10);
                            break;
                        case "stop":
                            i()
                        }
                    }
                    )),
                    t.addEventListener("messageerror", (function(t) {
                        console.error("[TimerWorker.messageerror]", t)
                    }
                    ))
                }
            }
            , function(t, e, i) {
                var s = {
                    "./CdnAllocateInfo": 18,
                    "./CdnAllocateInfo.js": 18,
                    "./CdnGroupID": 14,
                    "./CdnGroupID.js": 14,
                    "./CurrentCdnProxyInfo": 19,
                    "./CurrentCdnProxyInfo.js": 19,
                    "./PCDNGetProxyListReq": 27,
                    "./PCDNGetProxyListReq.js": 27,
                    "./PCDNGetProxyListRsp": 28,
                    "./PCDNGetProxyListRsp.js": 28,
                    "./PP2pSliceAudioData": 29,
                    "./PP2pSliceAudioData.js": 29,
                    "./PP2pSliceControlData": 30,
                    "./PP2pSliceControlData.js": 30,
                    "./PP2pSliceData": 31,
                    "./PP2pSliceData.js": 31,
                    "./PP2pSliceVideoData": 32,
                    "./PP2pSliceVideoData.js": 32,
                    "./SlaveProxyInfo": 15,
                    "./SlaveProxyInfo.js": 15,
                    "./StreamCodecType": 12,
                    "./StreamCodecType.js": 12
                };
                function a(t) {
                    var e = r(t);
                    return i(e)
                }
                function r(t) {
                    if (!i.o(s, t)) {
                        var e = new Error("Cannot find module '" + t + "'");
                        throw e.code = "MODULE_NOT_FOUND",
                        e
                    }
                    return s[t]
                }
                a.keys = function() {
                    return (0,
                    f.default)(s)
                }
                ,
                a.resolve = r,
                t.exports = a,
                a.id = 37
            }
            , function(t, e, i) {
                var s = {
                    "./AnchorDtsSei": 20,
                    "./AnchorDtsSei.js": 20,
                    "./AnchorSeiInfo": 33,
                    "./AnchorSeiInfo.js": 33,
                    "./HuyaDelaySeiData": 34,
                    "./HuyaDelaySeiData.js": 34,
                    "./ServerDtsSei": 21,
                    "./ServerDtsSei.js": 21,
                    "./ServerNodeInfo": 22,
                    "./ServerNodeInfo.js": 22
                };
                function a(t) {
                    var e = r(t);
                    return i(e)
                }
                function r(t) {
                    if (!i.o(s, t)) {
                        var e = new Error("Cannot find module '" + t + "'");
                        throw e.code = "MODULE_NOT_FOUND",
                        e
                    }
                    return s[t]
                }
                a.keys = function() {
                    return (0,
                    f.default)(s)
                }
                ,
                a.resolve = r,
                t.exports = a,
                a.id = 38
            }
            , function(t, e, i) {
                i.r(e);
                var s = i(1)
                  , a = i(2)
                  , r = function() {
                    function t() {
                        Object(s.a)(this, t)
                    }
                    return Object(a.a)(t, null, [{
                        key: "isSupported",
                        value: function() {
                            return !1
                        }
                    }]),
                    t
                }();
                e.default = r
            }
            , function(t, e, i) {
                i.r(e);
                var p = i(1)
                  , m = i(2)
                  , y = {
                    PLAY_STATUS: "PLAY_STATUS",
                    PLAY_CARTON: "PLAY_CARTON",
                    PLAY_TIME_STATUS: "PLAY_TIME_STATUS",
                    VIDEO_PLAY: "VIDEO_PLAY",
                    VIDEO_PLAYING: "VIDEO_PLAYING",
                    VIDEO_PAUSE: "VIDEO_PAUSE",
                    VIDEO_BAD_QUALITY: "VIDEO_BAD_QUALITY",
                    METADATA: "METADATA",
                    RECV_VIDEO_FRAME: "RECV_VIDEO_FRAME",
                    VIDEO_STOP: "VIDEO_STOP",
                    VIDEO_SEEK: "VIDEO_SEEK",
                    BROWSER_PAUSE: "BROWSER_PAUSE",
                    AUDIO_PLAY: "AUDIO_PLAY",
                    AUDIO_SOUND: "AUDIO_SOUND",
                    ANCHOR_STOP: "ANCHOR_STOP",
                    VIDEO_LINK_CLOSE: "VIDEO_LINK_CLOSE",
                    NO_VIDEO: "NO_VIDEO",
                    HLS_URL_UNAVAILABLE: "HLS_URL_UNAVAILABLE",
                    HLS_URL_LOAD_TIMEOUT: "HLS_URL_LOAD_TIMEOUT",
                    HLS_MAINFEST_LOAD_TIMEOUT: "HLS_MAINFEST_LOAD_TIMEOUT",
                    FLV_URL_UNAVAILABLE: "FLV_URL_UNAVAILABLE",
                    FLV_URL_LOAD_TIMEOUT: "FLV_URL_LOAD_TIMEOUT",
                    H5_PLAYER_ERROR: "H5_PLAYER_ERROR",
                    PAUSE_5S_RETRY: "PAUSE_5S_RETRY",
                    NO_DATA_RECEIVED: "NO_DATA_RECEIVED",
                    P2P_REPORT: "P2P_REPORT",
                    DATA_METRIC: "DATA_METRIC",
                    DATA_METRIC2: "DATA_METRIC2",
                    P2P_TIMEOUT: "P2P_TIMEOUT",
                    FLV_TO_P2P: "FLV_TO_P2P",
                    FLV_TRY_TO_P2P: "FLV_TRY_TO_P2P",
                    FLAC_AUDIO_START: "FLAC_AUDIO_START",
                    FLAC_AUDIO_ERROR: "FLAC_AUDIO_ERROR",
                    FLAC_AUDIO_NEED_RETRY: "FLAC_AUDIO_NEED_RETRY",
                    SIGNAL_PLAY: "SIGNAL_PLAY",
                    SIGNAL_HEART: "SIGNAL_HEART",
                    SIGNAL_DATA: "SIGNAL_DATA",
                    SIGNAL_ERROR: "SIGNAL_ERROR",
                    H264_SEI_PLAY: "H264_SEI_PLAY",
                    TRANS_END: "TRANS_END",
                    NEED_UPDATE_M3U8: "NEED_UPDATE_M3U8",
                    PLAYBACK_UPDATE: "PLAYBACK_UPDATE",
                    PLAYBACK_M3U8_UPDATED: "PLAYBACK_M3U8_UPDATED",
                    PLAYBACK_DIF_CDN: "PLAYBACK_DIF_CDN",
                    UPDATE_INTERSITY: "UPDATE_INTERSITY",
                    PLAY_DOWNLINK_INFO: "PLAY_DOWNLINK_INFO",
                    PLAY_FRAME_BUFFER: "PLAY_FRAME_BUFFER",
                    WEBRTC_VIDEO_ERROR: "WEBRTC_VIDEO_ERROR",
                    SWITCH_DONE: "SWITCH_DONE",
                    AUTO_BITRATE_CHANGED: "AUTO_BITRATE_CHANGED",
                    AUTO_FORCE_RSP: "AUTO_FORCE_RSP",
                    VISIBILITY_CHANGE: "VISIBILITY_CHANGE",
                    REPLAY_VIDEO: "REPLAY_VIDEO",
                    P2P_PLAYING_EVENT: "P2P_PLAYING_EVENT",
                    TURN_TO_H264: "TURN_TO_H264",
                    H265_VIDEO_RETRY: "H265_VIDEO_RETRY",
                    H265_PLAY: "H265_PLAY",
                    PAUSE_5SEC_ERROR: "PAUSE_5SEC_ERROR"
                }
                  , g = "VIDEO_PLAYING"
                  , S = "VIDEO_STOP"
                  , T = "VIDEO_CACHING"
                  , P = y
                  , E = i(0)
                  , b = function() {
                    function t() {
                        Object(p.a)(this, t)
                    }
                    return Object(m.a)(t, null, [{
                        key: "turnStr",
                        value: function(t, e, i) {
                            for (var s = t.toString(e), a = s.length; a < i; a++)
                                s = "0" + s;
                            return s
                        }
                    }, {
                        key: "rotl64",
                        value: function(e, i) {
                            var s = t.turnStr(e, 2, 64)
                              , a = s.substring(0, 32)
                              , r = s.substring(32)
                              , n = r.substr(i, 32 - i) + r.substr(0, i);
                            return parseInt(a + n, 2)
                        }
                    }, {
                        key: "rotr64",
                        value: function(e, i) {
                            var s = t.turnStr(e, 2, 64)
                              , a = s.substring(0, 32)
                              , r = s.substring(32)
                              , n = r.substr(32 - i, i) + r.substr(0, 32 - i);
                            return parseInt(a + n, 2)
                        }
                    }, {
                        key: "rotUid",
                        value: function(e, i) {
                            return 0 === e && (e = "1234" + t.turnStr(parseInt(9999 * Math.random()), 10, 4)),
                            isNaN(i) && (i = 0),
                            e = parseInt(e),
                            i = parseInt(i),
                            t.rotl64(e, 8)
                        }
                    }, {
                        key: "revertUid",
                        value: function(e, i) {
                            return e = parseInt(e),
                            t.rotr64(e, 8)
                        }
                    }, {
                        key: "inet_ntoa",
                        value: function(t) {
                            var e, i, s, a = new Uint8Array(4), r = new DataView(a.buffer);
                            return r.setUint32(0, t),
                            e = r.getUint8(0),
                            i = r.getUint8(1),
                            s = r.getUint8(2),
                            r.getUint8(3) + "." + s + "." + i + "." + e
                        }
                    }, {
                        key: "ip2uint",
                        value: function(t) {
                            for (var e = 0, i = t.split("."), s = 0; s < i.length; s++)
                                e |= Number(i[s]) << 8 * s;
                            return e < 0 && (e += 4294967296),
                            e
                        }
                    }, {
                        key: "isBiggerUint",
                        value: function(t, e) {
                            return t !== e && (t > e ? t - e < 2147483647 : !(e - t < 2147483647))
                        }
                    }, {
                        key: "isEqualOrBiggerUint",
                        value: function(t, e) {
                            return t === e || (t > e ? t - e < 2147483647 : !(e - t < 2147483647))
                        }
                    }, {
                        key: "isUintMax",
                        value: function(t) {
                            return 4294967295 === t
                        }
                    }, {
                        key: "isUint64Max",
                        value: function(t) {
                            return 0x10000000000000000 === t
                        }
                    }, {
                        key: "getQueryString",
                        value: function(t) {
                            var e = new RegExp("(^|&)" + t + "=([^&]*)(&|$)")
                              , i = window.location.search.substr(1).match(e);
                            return null != i ? unescape(i[2]) : null
                        }
                    }, {
                        key: "printHexBytes",
                        value: function(t) {
                            for (var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = new DataView(t.buffer), s = e ? 10 : 0, a = []; s < i.byteLength; ) {
                                var r = i.getUint8(s++);
                                (r = r.toString(16).toUpperCase()).length < 2 && (r = "0" + r),
                                a.push(r, "\t"),
                                s % 10 == 0 && a.push("\n")
                            }
                            console.log(a.join("") + "\tsize:", i.byteLength)
                        }
                    }, {
                        key: "getCookie",
                        value: function(t) {
                            for (var e = t + "=", i = document.cookie.split(";"), s = 0, a = i.length; s < a; s++) {
                                var r = i[s].trim();
                                if (0 == r.indexOf(e))
                                    return r.substr(e.length)
                            }
                            return ""
                        }
                    }, {
                        key: "formatByteSize",
                        value: function(t) {
                            var e = t / 1024;
                            return e > 1024 ? (e /= 1024).toFixed(1) + "MB" : e.toFixed(1) + "KB"
                        }
                    }, {
                        key: "padStrLen",
                        value: function(t, e) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                            if (t.length >= e)
                                return t;
                            var s = " ".repeat(e - t.length);
                            return i ? s + t : t + s
                        }
                    }, {
                        key: "xhr",
                        value: function(t, e, i, s, a) {
                            var r = new XMLHttpRequest;
                            r.overrideMimeType("text/plain; charset=x-user-defined"),
                            r.addEventListener("readystatechange", (function t() {
                                4 === r.readyState && (200 === r.status || 304 === r.status ? s(r.response) : a(r.status),
                                r.removeEventListener("readystatechange", t),
                                r = void 0)
                            }
                            )),
                            r.open(e, t, !0),
                            r.send(i)
                        }
                    }, {
                        key: "getAv1Random",
                        value: function(t, e) {
                            if (!t)
                                return !1;
                            var i = localStorage.av1PresentUid
                              , s = t.presenterUid;
                            localStorage.randomAv1Percent && i == s || (localStorage.randomAv1Percent = Math.floor(1e4 * Math.random()));
                            var a = Number(localStorage.randomAv1Percent);
                            return localStorage.av1PresentUid = t.presenterUid,
                            a < e
                        }
                    }, {
                        key: "is64bitSoftware",
                        value: function() {
                            return -1 != navigator.userAgent.indexOf("Macintosh") || -1 != navigator.userAgent.indexOf("x64")
                        }
                    }, {
                        key: "isGameIdSupport265",
                        value: function(t, e) {
                            if (t[0])
                                return !0;
                            var i = !1;
                            return t[1].map((function(t) {
                                e && e.toString() == t.toString() && (i = !0)
                            }
                            )),
                            i
                        }
                    }, {
                        key: "unescapeHTML",
                        value: function(t) {
                            return (t = "" + t).replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&#39;/g, "'").replace("↵", "")
                        }
                    }, {
                        key: "getSdkAbRandom",
                        value: function(t) {
                            var e = localStorage.abPresentUid;
                            localStorage.randomAbPercent && e == t.presenterUid || (localStorage.randomAbPercent = Math.floor(1e4 * Math.random()));
                            var i = Number(localStorage.randomAbPercent);
                            return localStorage.abPresentUid = t.presenterUid,
                            i < M.simdAbPercentConfig
                        }
                    }]),
                    t
                }();
                function A(t) {
                    return atob(t)
                }
                b.indateLocalStorage = {
                    set: function(t, e, i) {
                        var s = {
                            value: e,
                            expirse: new Date(i).getTime()
                        };
                        localStorage.setItem(t, (0,
                        d.default)(s))
                    },
                    get: function(t) {
                        var e = JSON.parse(localStorage.getItem(t));
                        if (null !== e) {
                            if (!(null != e.expirse && e.expirse < (new Date).getTime()))
                                return e.value;
                            localStorage.removeItem(t)
                        }
                        return null
                    },
                    update: function(t, e) {
                        var i = JSON.parse(localStorage.getItem(t));
                        i && (i.value = e,
                        localStorage.setItem(t, (0,
                        d.default)(i)))
                    }
                },
                b.IntMax = 2147483647,
                b.IntMin = -2147483647,
                b.UintMax = 4294967295;
                var R = b
                  , L = new (function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.version = 1100,
                        this.baseSubs = 10,
                        this.uid = 0,
                        this.sGuid = "",
                        this.roomId = 0,
                        this.uuid = 0,
                        this.convertUid = 0,
                        this.appId = 66,
                        this.appid = 66,
                        this.p2pCooling = !1,
                        this.flvTryToP2P = 0
                    }
                    return Object(m.a)(t, [{
                        key: "initUUId",
                        value: function() {
                            0 === this.uuid && (this.uuid = Number((Date.now() % 1e10 * 1e3 + (1e3 * Math.random() | 0)) % 4294967295));
                            var t = Number(localStorage.appid);
                            t && (this.appid = t,
                            E.a.warn("--- test appid " + t + " ---", this))
                        }
                    }]),
                    t
                }())
                  , B = {
                    SLICE_SPEED: 12.5,
                    MAX_PACKET_CNT: 1e4,
                    SWITCH_INTERVAL: 10,
                    MAX_DELAY: 66e4,
                    DEFAULT_DELAY: 65535,
                    SUBSCRIBE_TIMEOUT: 1e4,
                    PUNCH_BACK_COOLING: 2e4,
                    PUNCH_IGNORE_TIME: 3e5,
                    SUB_TIMEOUT: 5e3,
                    RESUB_TIMEOUT: 3e4,
                    STREAM_DELAY: 2e3,
                    EMULATE_DELAY: 1800,
                    MAX_DEPTH: 1,
                    PROXY_NUM: 3,
                    MAX_PEER_STREAM_NUM: 8,
                    MAX_PUSH_NUM: 3,
                    MAX_PULL_NUM: 3,
                    SLICE_DELAY: 100,
                    SLICE_LATE: 50,
                    SLICE_FAST: 50,
                    SLICE_TIMEOUT: 2e3,
                    SWITCH_DELAY: 500,
                    StreamType: {
                        NONE: 0,
                        FORCE: 1,
                        FIXED: 2,
                        COMPETE: 3,
                        PEER: 4
                    },
                    LeaveReason: {
                        PING_DIF: 1,
                        RESET: 2
                    },
                    DEL_REASON: {
                        CHANNEL_CLOSE: 1,
                        CHANNEL_ERROR: 2,
                        NODE_LEAVE: 3,
                        SERVER_REJECT: 5,
                        PEER_ERROR: 6,
                        PEER_TIMEOUT: 7,
                        PING_TIMEOUT: 8,
                        OTHER_SID: 9,
                        EMPTY_SLICE: 10,
                        SUB_TIMEOUT: 11,
                        SUB_FAIL_TIMES: 12,
                        NODE_REJECT: 13,
                        DIF_CDNP: 14,
                        PEER_HANDLER_ERR: 15
                    },
                    PERIOD: {
                        UPLINK_CALC: 10,
                        CHECK_SEED: 20,
                        GET_NODE: 5
                    },
                    SubType: {
                        SUBSCRIBE_FORCE: 0,
                        SUBSCRIBE_NORMAL: 1
                    },
                    LoadVideoTimeoutReason: {
                        FLV_DISCONNECTED: 0,
                        FLV_CONNECTED: 1,
                        FLV_CONNECT_ERROR: 2,
                        FLV_RECV_DATA: 3,
                        FLV_DATA_INVALID: 4,
                        FLV_STARTPLAY: 5,
                        FLV_PLAYERROR: 6,
                        HLS_DISCONNECTED: 7,
                        HLS_LOADMANIFEST_ERROR: 8,
                        HLS_LOADMANIFEST_SUCCESS: 9,
                        HLS_LOADFRAMENT: 10,
                        HLS_LOADFRAMENT_ERROR: 11,
                        HLS_LOADFRAMENT_SUCCESS: 12,
                        HLS_PLAY_ERROR: 13
                    },
                    SubResCode: {
                        ACCEPT_SUBSCRIBE: 0,
                        EMPTY_UPLOAD_NUM: 1,
                        DETECT_SUBSCRIBE_CYCLE: 2,
                        EMPTY_PEER_INFO: 3,
                        SUBSCRIBE_UPLINK_NOT_ENOUGH: 4,
                        PUBLISHER_KICK_OFF: 5,
                        NOT_SUBSCRIBER: 6,
                        INVALID_SUB_STREAM: 7,
                        ACCEPT_BY_SUBSCRIBER_UPLINK: 9,
                        INVALID_STREAMID: 10,
                        SERVER_EMPTY_BW: 11,
                        PUBLISHER_LEAVE: 12,
                        DIFFERENT_VIDEO_PROXY: 13,
                        OLD_VERSION_REQ: 14,
                        INVALID_TREE_DEPTH: 15,
                        INVALID_MAX_SUBSTREAM_NUM: 16,
                        STREAM_LATE: 17,
                        DEPTH_LARGE: 18,
                        STREAM_LIMIT: 19,
                        SLICE_LARGE: 20,
                        NOT_FOUND_PKG: 21,
                        KICK_OUT: 22,
                        SELF_WORST: 23,
                        SLICE_LATE: 24,
                        SLICE_FAST: 25,
                        RESTART: 26,
                        RESET: 27,
                        DIF_BASE_SUBS: 28
                    },
                    VIDEO_COMPETE_UID: 4294967295,
                    VIDEO_FORCE_UID: 0,
                    VIDEO_FIXED_UID: -1,
                    VIDEO_DEFAULT_UID: -2,
                    isProxyUid: function(t) {
                        return t === B.VIDEO_COMPETE_UID || t === B.VIDEO_FORCE_UID || t === B.VIDEO_FIXED_UID || t === B.VIDEO_DEFAULT_UID
                    },
                    isCompete: function(t) {
                        return t === B.VIDEO_COMPETE_UID
                    },
                    isForce: function(t) {
                        return t === B.VIDEO_FORCE_UID
                    },
                    isFixed: function(t) {
                        return t === B.VIDEO_FIXED_UID
                    },
                    isDefault: function(t) {
                        return t === B.VIDEO_DEFAULT_UID
                    },
                    isSliceJumpFromPeer: function(t, e) {
                        return e.isFromPeer && t > 0 && e.seq - t > 10 * B.LOST_SEQ_NUM
                    },
                    offerReject: {
                        REASON_NOTSTART: 1,
                        REASON_PUNCHFAILED_CD: 2,
                        REASON_PUNCHED_FULL: 3,
                        REASON_QUOTA_EXHAUST: 4,
                        REASON_VERSION: 5,
                        REASON_DIF_LINE: 6,
                        REASON_FAIL: 7,
                        REASON_IGNORE: 8,
                        REASON_HAS_NODE: 9,
                        REASON_WAITING: 10,
                        REASON_OTHER: 100
                    },
                    offerRejectTime: 12e4,
                    punchBackRet: {
                        SUC: 0,
                        DIF_STREAM: 1,
                        CLOSING: 2,
                        COOLING: 3,
                        REQUEST: 4,
                        REJECT: 5
                    },
                    restartReason: {
                        RANGE_SEQ_MAX: 1,
                        RANGE_SEQ_LARGE: 2,
                        CDN_JUMP: 3,
                        PLAYER_NO_DATA: 4,
                        LOST_SEQ: 5,
                        CONNECT: 6,
                        WORKER_ERROR: 7,
                        MULTI_CDN: 8,
                        FLV_TO_P2P: 9,
                        PLAYER_ERROR: 10,
                        PLAYER_DISPOSE: 11,
                        LOST_SEQ_JUMP: 12
                    },
                    turnToFlvReason: {
                        FULL_PLAY_FAIL: 1,
                        FULL_CONNECT_TIMEOUT: 2,
                        SUB_CONNECT_TIMEOUT: 3,
                        FULL_NO_DATA: 4,
                        SUB_NO_DATA: 5,
                        P2P_ARGS_ERROR: 6,
                        P2P_COOLING: 7,
                        FLV_TO_P2P_FAIL: 8,
                        FLV_TO_P2P_FULL_STREAM_COMPLETE: 9,
                        FULL_ERROR: 10,
                        FULL_CLOSE: 11,
                        SUB_ERROR: 12,
                        SUB_CLOSE: 13,
                        RESTART_TIMES: 14,
                        SIGNAL_TIMEOUT: 15,
                        PROBE_TIMEOUT: 16,
                        PROBE_ERROR: 17,
                        NO_DATA_TIMEOUT: 18,
                        IS_NOT_FIRST_FETCH: 19,
                        VIDEO_BUFFER_EMPTY: 20
                    },
                    userProperty: {
                        SERVER_CLOSE: 1,
                        CLIENT_CLOSE: 2,
                        BROWSER_UN_SUPPORT: 3,
                        FLASH: 4,
                        UNKNOW: 5,
                        P2P: 6,
                        FIRST_FULL_CONNECT_TIMEOUT: 7,
                        FIRST_FULL_PLAY_FAIL: 8,
                        FIRST_FULL_NO_DATA: 17,
                        RESTART_RANGE_MAX: 9,
                        RESTART_RANGE_LARGE: 10,
                        RESTART_CONNECT: 11,
                        RESTART_MUTI_CDN: 12,
                        RESTART_PLAYER_NO_DATA: 13,
                        RESTART_PLAYER_ERROR: 14,
                        SUB_NO_DATA: 15,
                        SUB_CONNECT_TIMEOUT: 16,
                        P2P_ARGS_ERROR: 18,
                        FLV_TO_P2P: 19,
                        LOST_SEQ: 20,
                        P2P_COOLING: 21,
                        IS_NOT_FIRST_FETCH: 22,
                        VIDEO_BUFFER_EMPTY: 23
                    },
                    h265TurnToH264Reason: {
                        DECODE_ERROR: 1,
                        RENDER_ERROR: 2
                    },
                    pauseReason: {
                        FLV_NO_BUFF: 1,
                        FLV_UNKNOW_PAUSE: 2,
                        FLV_NET_SLOW: 3,
                        P2P_NO_BUFF: 4,
                        P2P_UNKNOW_PAUSE: 5,
                        P2P_FULL_LOADER_NO_DATA: 10,
                        P2P_FULL_LOADER_CONNECT_FAIL: 11,
                        P2P_SUB_LOADER_NO_DATA: 12,
                        P2P_SUB_LOADER_CONNECT_FAIL: 13,
                        FLV_NO_DATA: 14,
                        P2P_NO_SLICE: 15,
                        P2P_RESEND_SKIP_FRAME: 20,
                        P2P_RESEND_TOOLATE: 21,
                        P2P_RESEND_TIMEOUT: 22,
                        P2P_RESEND_ERROR: 23,
                        P2P_RESEND_MISSING: 24,
                        P2P_DTS_JUMP: 25,
                        P2P_NET_SLOW: 26
                    },
                    DataType: {
                        SIGNALLING: 0,
                        PING: 1,
                        SLICE: 2
                    },
                    LOST_SEQ_NUM: 4e3,
                    initConfig: function(t, e) {
                        for (var i = e.coderates, s = null, a = 0; a < i.length; a++)
                            if (s = i[a],
                            t > Number(s[0])) {
                                B.PROXY_NUM = Number(s[1]),
                                B.SLICE_DELAY = Number(s[2]),
                                B.MAX_PUSH_NUM = Number(s[3]),
                                B.MAX_PULL_NUM = Number(s[4]),
                                B.SLICE_LARGE = Number(s[5]);
                                break
                            }
                        B.MAX_PEER_STREAM_NUM = Number(e.maxPeerStreamNum) || 8;
                        var r = B.SLICE_SPEED * L.baseSubs * (t / 1e3);
                        B.SLICE_LATE = parseInt(r * ((Number(e.sliceLate) || 1e3) / 1e3)),
                        B.SLICE_FAST = parseInt(r * ((Number(e.sliceFast) || 2e3) / 1e3)),
                        B.STREAM_DELAY = Number(e.badDelay) || 2e3,
                        B.EMULATE_DELAY = Number(e.emuteDelay) || 1800,
                        B.RESUB_TIMEOUT = Number(e.resubTime) || 3e4,
                        B.SLICE_TIMEOUT = Number(e.sliceTimeout) || 2e3,
                        B.SWITCH_DELAY = Number(e.switchDelay) || 500
                    },
                    HLS_LOAD_TYPE: {
                        FETCH: 1,
                        XHR: 2
                    },
                    LATENCY_MODEL_TYPE: {
                        NONE: 0,
                        CONTROL_MODEL: 2,
                        RTC_MODEL: 4,
                        TOPSPEED_MODEL: 99
                    },
                    PLATFORM_TYPE: {
                        web: 100,
                        mini_app: 102,
                        wap: 103,
                        huya_liveshareh5: 104,
                        adr: 2,
                        ios: 3
                    },
                    PLATFORM_TYPE_NAME: {
                        web: "web",
                        wap: "wap"
                    },
                    H5_ERROR_CODE: {
                        VIDEO_ERROR: -1e3,
                        PLAY_TIMEOUT: -1001
                    },
                    VISIBILITY_STATE: {
                        VISIBLE: "visible",
                        HIDDEN: "hidden",
                        PRERENDER: "prerender"
                    }
                }
                  , D = B
                  , O = i(4)
                  , M = new (function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.pushGop = !1,
                        this.jitBufLen = 3e3,
                        this.jitMaxBufLen = 4e3,
                        this.jitMinBufLen = 2e3,
                        this.resendPlayThreshold = 1800,
                        this.mutilLinkConfig = [[0, 4e3], [8, 4]],
                        this.resendModeConfig = [[0, 4e3], [1, 2]],
                        this.resendMode = 1,
                        this.resendWaitLimitList = {
                            500: 3e3,
                            2e3: 3e3,
                            4e3: 3e3,
                            8e3: 3e3,
                            1e4: 3e3,
                            12e3: 3500,
                            2e4: 5e3
                        },
                        this.noUrgentResentBuffer = 2e3,
                        this.latency = [[3e3, 2e3, 4e3, 2e3], [1e3, 500, 1500, 1500]],
                        this.jitTest = [2e3, 5e3, 1500],
                        this.jitPid = [],
                        this.hlsJitCfg = [6e3, 4e3, 8e3],
                        this.hlsUseFetch = 100,
                        this.obsUseFull = 0,
                        this.obsFullRatio = 1,
                        this.obsBgRatio = 0,
                        this.obsFaceRatio = 0,
                        this.obsSrAudio = 1,
                        this.obsFrame = 0,
                        this.obsSyncTs = 50,
                        this.obsSeekTs = 200,
                        this.obsSeekJumpTs = 0,
                        this.obsRateTs = 10,
                        this.baseSubs = 10,
                        this.urgentResend = 1,
                        this.urgentResendAudio = 1,
                        this.crossCdn = 0,
                        this.p2pWssLines = "all",
                        this.connectTotalTime = 6e3,
                        this.connectTimeout = 2e3,
                        this.connectPcdnTimeout = 4e3,
                        this.flowTimeout = 2e3,
                        this.flowRetryTimes = 3,
                        this.renderTimeout = 4e3,
                        this.noDataTimeout = 3e3,
                        this.noPcdnDataTimeout = 1e3,
                        this.testResender = 0,
                        this.maxResendTs = 3e3,
                        this.minResendTs = 200,
                        this.maxResendTimes = 2,
                        this.resendGapTs = 400,
                        this.resendMinCnt = 10,
                        this.resendDelayTs = 400,
                        this.patchSubTs = 250,
                        this.http2Channel = "",
                        this.deleteH264Aud = [],
                        this.useChangeRate = [],
                        this.freeBufferBitrate = 1e4,
                        this.needCooling = 1,
                        this.needQueue = 1,
                        this.queueTime = 3e3,
                        this.punchedCoolingTime = 3e4,
                        this.delayCloseNum = 200,
                        this.punchTimeout = 1e6,
                        this.maxPunchedCnt = 15,
                        this.maxPunchedCntMore = 30,
                        this.maxNodeCnt = 30,
                        this.punchBackCooling = 2e4,
                        this.punchIgnoreTime = 3e5,
                        this.coefficient = 8,
                        this.trySubNum = 5,
                        this.trySubTime = 5e3,
                        this.fastTime = 5e3,
                        this.lostSeqTime = 6,
                        this.sliceLate = 500,
                        this.sliceFast = 2e3,
                        this.sliceConstraints = 6e3,
                        this.badDelay = 2e3,
                        this.emuteDelay = 1800,
                        this.switchDelay = 500,
                        this.aliveTimeout = 1e3,
                        this.resubTime = 3e4,
                        this.sliceTimeout = 2e3,
                        this.maxPeerStreamNum = 7,
                        this.maxPeerStreamNum20M = 4,
                        this.maxUplinkBw = 2e3,
                        this.closeUids = [],
                        this.closeSub = 1,
                        this.flvEmptyAudioFrame = 1,
                        this.sendHeartBeatAlone = 0,
                        this.signalNoCdnp = [],
                        this.switchSeamLessLine = 0,
                        this.isProduce = !0,
                        this.coderates = [[15e3, 1, 8e3, 5, 5, 230, 1, 20], [8e3, 1, 4e3, 5, 5, 230, 5, 10], [6e3, 1, 4e3, 5, 5, 170, 5, 10], [4e3, 0, 4e3, 5, 5, 120, 5, 10], [3e3, 0, 4e3, 5, 5, 80, 5, 10], [0, 0, 4e3, 5, 5, 50, 5, 10]],
                        this.swapdomain = {},
                        this.iP2PType = 2,
                        this.danmuZipPids = [],
                        this.randomPercent = 1e4,
                        this.frameBufLen = [2e3, 2e3, 1500, 2500],
                        this.bufferMode = 2,
                        this.bufferConfig = [],
                        this.urgentResendTime = 1500,
                        this.forceSkipFrameTime = 3900,
                        this.frameTimeout = 2500,
                        this.p2pBuffer = [3500, 2500, 4500],
                        this.jitCfg = [[0, 3e3, 2e3, 4e3]],
                        this.jitCfgPid = [],
                        this.jitJump = [2e4, 8e3],
                        this.jitLowLatency = 2e3,
                        this.jitLow = [1500, 1e3, 2e3],
                        this.safariPlayDelay = 500,
                        this.safariFirstLoad = !0,
                        this.jitAB = [],
                        this.waitAudio = 1,
                        this._isFrameBuffer = -1,
                        this.isSubUseHttps = 1,
                        this.pcdnSubsConfig = [1, 1, 1],
                        this.notUsePcdnUids = [],
                        this.isPcdnReportErr = 1,
                        this.isMute = 1,
                        this.isAutoNoPicture = 0,
                        this.playbackrateMin = .95,
                        this.playbackrateMax = 1.05,
                        this.pcdnFlv = 1,
                        this.isAiP2PToFlv = 1,
                        this.randomAIP2PFlvPercent = Math.floor(1e4 * Math.random()),
                        this.aiRandomPercent = 5e3,
                        this.allUidsAiP2P = 0,
                        this.aiABRandomPercent = 2e3,
                        this.aiUids = [],
                        this.aiBlackUids = [],
                        this.aiBlack2Uids = [],
                        this.isAutoH265 = 0,
                        this.renderDelta = 300,
                        this.h265Config = [[[2e3, 4e3], [4e4, 4e4]], [4e3, 2e3, 500], 75, [[2e3, 4e3], [3, 4]], 30, 3, [!0, !0]],
                        this.h265Config2 = [6, 1],
                        this.h265BlackUids = [],
                        this.h265NoPushVideoDis = 2e4,
                        this.randomH265Percent = Math.floor(1e4 * Math.random()),
                        this.h265PercentConfig = 1e5,
                        this.enableAiMosaic = 0,
                        this.aiMosaicUis = [],
                        this.aiRequestInterval = 5e3,
                        this.aiBathRequestInterval = 3e4,
                        this.aiBufferEmptyRequestInterval = 3e5,
                        this.playerdata = {
                            profileP2POpt: ""
                        },
                        this.isCommonAb = 1,
                        this.aiP2PFlvConfig = [5e3, 5],
                        this.closePcdnBitrate = 8e3,
                        this.closePcdn500 = 500,
                        this.closePlayBackRateCfg = [[90, 91, 92, 93, 96], 0],
                        this.setVideoCTCfg = [-100, 1500, 1e4],
                        this.sliceQuantityPerSecond = 1e3,
                        this.useNewPloy = 1,
                        this.minPlayout = 300,
                        this.maxPlayout = 500,
                        this.playoutUids = [],
                        this.isMuteAct = 1,
                        this.useAV1 = !1,
                        this.useAV1PidList = [],
                        this.useAV1LinesAndBitRates = [[], 0],
                        this.isClosePlayBackRate = 1,
                        this.pcdnAbConnectData = [0, [1e3, 2e3, 3e3, 4e3]],
                        this.isUseWebWorkerTick = 1,
                        this.platform = D.PLATFORM_TYPE_NAME.web,
                        this.av1PercentConfig = 5e3,
                        this.isConfigSupportH265 = 1,
                        this.abUseAv1 = 1,
                        this.platform = D.PLATFORM_TYPE_NAME.web,
                        this.h265GameIds = [!0, []],
                        this.isNoVideoReport = 0,
                        this.simdAbPercentConfig = 5e3,
                        this.isH265Filter4MCfg = [1, 1, 1, 1080],
                        this.useNewParser = 1,
                        this.maxGop = 3e3,
                        this.autoCfg = {
                            close: 0,
                            closeLines: [],
                            closePids: [],
                            upGap: 0,
                            downGap: 15e3,
                            backGap: 15e3,
                            upPer: .8,
                            downPer: .3,
                            downNowPer: .2,
                            waitPer: .8,
                            downBitrate: 2e3,
                            slow: .85,
                            bufCnt: 10,
                            sucPer: .9,
                            sampleTime: 200,
                            minTime: 1e4,
                            maxTime: 3e5,
                            sysTime: 1e4,
                            evalTime: 300,
                            highRate: 4e3,
                            badBuf: 2e3,
                            badCnt: 3,
                            badS: [1e4, 3],
                            badL: [6e4, 5],
                            noRederTime: 12e4,
                            monitorTime: 15e3
                        },
                        this.continueBufferDeltaStart = 6e3,
                        this.continueBufferDeltaEnd = 3e3,
                        this.autoBufferScore = 1e3,
                        this.autoConnectScore = 500,
                        this.autoFirstScore = 500,
                        this.autoPtsScore = 500,
                        this.force_auto_count = 9999,
                        this.force_auto_effective_time = 2592e5,
                        this.autoReportCfg = [1, 3, 0, 1],
                        this.isWebAutoAB = 0,
                        this.maxBitRate = 500,
                        this.recSysExpiredTime = 6e4,
                        this.minFps = 24,
                        this.dropTime = 0,
                        this.perfBitrate = 4e3,
                        this.perfCnt = 1,
                        this.perfBuf = 2e3
                    }
                    return Object(m.a)(t, [{
                        key: "isFrameBuffer",
                        get: function() {
                            return 2
                        }
                    }, {
                        key: "initByBitrate",
                        value: function(t) {
                            if (this.maxPeerStreamNum = t >= 1e4 ? this.maxPeerStreamNum20M : 7,
                            this.resendMode = 1,
                            this.resendModeConfig && this.resendModeConfig[0].length === this.resendModeConfig[1].length)
                                for (var e = this.resendModeConfig[0].length - 1; e >= 0; e--)
                                    if (t >= this.resendModeConfig[0][e]) {
                                        this.resendMode = this.resendModeConfig[1][e];
                                        break
                                    }
                        }
                    }, {
                        key: "isAutoClose",
                        value: function(t, e) {
                            if (1 === this.autoCfg.close || -1 !== this.autoCfg.closeLines.indexOf(Number(t)))
                                return !0;
                            for (var i = this.autoCfg.closePids.length, s = 0; s < i; s++) {
                                var a = this.autoCfg.closePids[s];
                                if (Number(a.pid) === Number(e))
                                    return !a.hasOwnProperty("lines") || -1 !== a.lines.indexOf(t)
                            }
                            return !1
                        }
                    }, {
                        key: "setLowLatency",
                        value: function(t) {
                            t && t.setJitter(this.jitLow[0], this.jitLow[1], this.jitLow[2])
                        }
                    }, {
                        key: "setJitterCfg",
                        value: function(t, e, i) {
                            this.setJitterAB(t, e, i) || this.setJitterByPid(t, e, i) || this.setJitterByRate(t, i, this.jitCfg)
                        }
                    }, {
                        key: "setJitterAB",
                        value: function(t, e, i) {
                            if (this.jitAB.length > 0) {
                                var s = this.jitAB[0]
                                  , a = this.jitAB[1]
                                  , r = this.jitAB[2];
                                if ("all" === s || -1 !== s.indexOf(e + "")) {
                                    var n = this.getGroupNum(r.length);
                                    return E.a.log("setJitterAB name=".concat(a, " group=").concat(n)),
                                    this.setJitterByRate(t, i, r[n]),
                                    !0
                                }
                            }
                            return !1
                        }
                    }, {
                        key: "getGroupNum",
                        value: function(t) {
                            for (var e = 1e4 * Math.random(), i = t - 1; i < t; i--)
                                if (e > 1e4 / t * i)
                                    return i;
                            return 0
                        }
                    }, {
                        key: "setJitterByPid",
                        value: function(t, e, i) {
                            for (var s = 0; s < this.jitCfgPid.length; s++) {
                                var a = this.jitCfgPid[s];
                                if (-1 !== a[0].indexOf(e + ""))
                                    return E.a.log("setJitterByPid"),
                                    this.setJitterByRate(t, i, a[1]),
                                    !0
                            }
                            return !1
                        }
                    }, {
                        key: "setJitterByRate",
                        value: function(t, e, i) {
                            for (var s = 0; s < i.length; s++) {
                                var a = i[s];
                                if (e >= a[0])
                                    return t && t.setJitter(a[1], a[2], a[3]),
                                    !0
                            }
                            return !1
                        }
                    }, {
                        key: "init",
                        value: function(t) {
                            if (t) {
                                (0,
                                k.default)(this, t),
                                E.a.group("Configs");
                                var e = ["Configs:"];
                                for (var i in this) {
                                    var s = this[i];
                                    "string" == typeof s && ("pushGop" == i ? s = !!Number(s) : "coderates" == i || "testCoderates" == i || "swapdomain" == i ? (s = s.replace(/[↵\s+\n]/gm, ""),
                                    s = JSON.parse(s)) : "p2pWssLines" != i && "http2Channel" != i && (s = Number(s))),
                                    this[i] = s,
                                    "object" == (void 0 === s ? "undefined" : (0,
                                    I.default)(s)) && (s = (0,
                                    d.default)(s)),
                                    i = R.padStrLen(i, 18, !1),
                                    e.push("\t" + i + " => " + s)
                                }
                                E.a.log(e.join("\n")),
                                E.a.groupEnd(),
                                E.a.log("Config", this)
                            }
                        }
                    }, {
                        key: "setAiP2PToFlv",
                        value: function(t) {
                            this.isAiP2PToFlv = t
                        }
                    }, {
                        key: "setUseAV1",
                        value: function(t) {
                            var e = this.useAV1PidList
                              , i = t.presenterUid
                              , s = !1
                              , a = this.useAV1LinesAndBitRates[0]
                              , r = this.useAV1LinesAndBitRates[1];
                            e.forEach((function(t) {
                                i && t.toString() == i.toString() && (s = !0)
                            }
                            )),
                            s && (a.forEach((function(e) {
                                e == t.lineType && (s = !1)
                            }
                            )),
                            t.curBitrate < Number(r) && (s = !1)),
                            this.useAV1 = s,
                            s && (this.autoCfg.close = 1)
                        }
                    }, {
                        key: "isCloseP2P",
                        value: function(t) {
                            return t && this.closeUids && -1 !== this.closeUids.indexOf(t)
                        }
                    }, {
                        key: "getEnableAiMosaic",
                        value: function(t) {
                            return !!this.enableAiMosaic
                        }
                    }, {
                        key: "setMute",
                        value: function() {
                            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            this.isMute = t
                        }
                    }, {
                        key: "setUseAuto",
                        value: function(t) {
                            t && (this.isConfigSupportH265 = 0)
                        }
                    }, {
                        key: "getEnableJumpBuffer",
                        value: function() {
                            var t = O.a.version.major
                              , e = this.closePlayBackRateCfg.length > 0 && (1 == this.closePlayBackRateCfg[1] || -1 != this.closePlayBackRateCfg[0].indexOf(t));
                            return O.a.chrome && e
                        }
                    }]),
                    t
                }())
                  , F = i(3)
                  , U = "value"
                  , N = "str"
                  , x = 0
                  , V = 2
                  , H = 0
                  , G = 1
                  , j = 2
                  , Y = "p2p"
                  , W = "oexp"
                  , q = "stream_url"
                  , K = "cdndomain"
                  , z = "stream"
                  , X = "original_bitrate"
                  , J = "browser_name"
                  , Q = "browser_version"
                  , Z = "browser_kernel"
                  , $ = "browser_kernel_version"
                  , tt = "sphd_type"
                  , et = "dpi"
                  , it = "cdnip"
                  , st = "act_load_type"
                  , at = "player_type"
                  , rt = "live_type"
                  , nt = "stream_type"
                  , ot = "hls_type"
                  , ut = "cdn_cip"
                  , ht = "cdn_sip"
                  , lt = "alt_svc"
                  , ct = "quic"
                  , dt = "start_type"
                  , ft = "pcdn_origin"
                  , pt = "flv_pcdn_state"
                  , mt = "h265"
                  , yt = "v_decodec"
                  , vt = "v_recv_frames"
                  , _t = "v_to_decode_frames"
                  , gt = "v_decode_frames"
                  , St = "v_play_frame"
                  , Tt = "v_to_play_frames"
                  , Pt = "force_sub_type"
                  , kt = "mute_data"
                  , Et = "visibility_state"
                  , It = "video_min_buf"
                  , bt = "video_bad_quality_old"
                  , Ct = "video_bad_quality"
                  , wt = "video_bad_reason"
                  , At = "user_property"
                  , Rt = "heart_type"
                  , Lt = "signal_user_property"
                  , Bt = "video_h265_bad_quality"
                  , Dt = "auto_u_reason"
                  , Ot = "auto_down_reason"
                  , Mt = "auto_heart_type"
                  , Ft = "auto_codec_change_type"
                  , Ut = "auto_bad_reason"
                  , Nt = "auto_bad_min_reason"
                  , xt = "dispatch_id"
                  , Vt = {
                    name: "link_sta",
                    CONNECT_SUC: "cns",
                    HAS_DATA: "hd",
                    DATA_ENOUGH: "de",
                    AUDIO_CONFIG: "acf",
                    VIDEO_CONFIG: "vcf",
                    VIDEO_IFRAME: "vif",
                    VIDEO_FRAME: "vf",
                    AUDIO_FRAME: "af",
                    NO_SLICE_DATA: "nsd",
                    H265: "h265"
                }
                  , Ht = "link_sam"
                  , Gt = "ad"
                  , jt = "vd"
                  , Yt = "ar"
                  , Wt = "vr"
                  , qt = "vbet"
                  , Kt = "vbec"
                  , zt = "sp"
                  , Xt = "h265_sam"
                  , Jt = "cdn_ip"
                  , Qt = "yspwl.web.live.user.heart20"
                  , Zt = "cdn_total_bw"
                  , $t = "buffer_length"
                  , te = "play_delay"
                  , ee = "delay_anchor"
                  , ie = "delay_server"
                  , se = "delay_net"
                  , ae = "svr_delay_infos"
                  , re = "delay_node_info"
                  , ne = "svr_last_p_delay"
                  , oe = "uploader_type"
                  , ue = "encoder_source"
                  , he = "video_block_count"
                  , le = "video_block_duration"
                  , ce = "video_bad_buffer"
                  , de = "video_continue_buffer"
                  , fe = "auto_switch_cnt"
                  , pe = "auto_switch_same_cnt"
                  , me = "auto_bad_quality"
                  , ye = "auto_bad_quality_up"
                  , ve = "auto_bad_duration"
                  , _e = "auto_bad_duration_up"
                  , ge = "auto_bad_switch"
                  , Se = "auto_bad_switch_same"
                  , Te = "auto_bad_switch_up"
                  , Pe = "auto_bad_done"
                  , ke = "auto_bad_buffer"
                  , Ee = "auto_continue_buffer"
                  , Ie = "pcdn_total_bw"
                  , be = "switch_cdn_cnt"
                  , Ce = "get_stream_cnt"
                  , we = "real_kbps_sample"
                  , Ae = "real_flac_kbps_sample"
                  , Re = "recv_total_sample"
                  , Le = "recv_lan_sample"
                  , Be = "frame_buffer_delay"
                  , De = "hls_info"
                  , Oe = "m3u8_cnt"
                  , Me = "m3u8_suc_cnt"
                  , Fe = "m3u8_fail_cnt"
                  , Ue = "m3u8_empty_cnt"
                  , Ne = "m3u8_wrong_cnt"
                  , xe = "m3u8_timeout_cnt"
                  , Ve = "ts_cnt"
                  , He = "ts_suc_cnt"
                  , Ge = "ts_fail_cnt"
                  , je = "ts_timeout_cnt"
                  , Ye = "ts_open_avg"
                  , We = "ts_loaded_avg"
                  , qe = "ts_speed_avg"
                  , Ke = "ts_size_avg"
                  , ze = "auto_info"
                  , Xe = "up_cnt"
                  , Je = "down_cnt"
                  , Qe = "back_cnt"
                  , Ze = "ai_control_data"
                  , $e = "ai_p2p_cnt"
                  , ti = "ai_flv_cnt"
                  , ei = "ai_p2p_timeout_cnt"
                  , ii = "ai_flv_timeout_cnt"
                  , si = "ai_p2p_error_cnt"
                  , ai = "ai_flv_error_cnt"
                  , ri = "ai_p2p_switch_cnt"
                  , ni = "ai_flv_switch_cnt"
                  , oi = "ai_p2p_not_switch_cnt"
                  , ui = "ai_flv_not_switch_cnt"
                  , hi = "ai_flv_error_switch_cnt"
                  , li = "ai_flv_error_not_switch_cnt：flv"
                  , ci = "ai_start_p2p_cnt"
                  , di = "ai_start_flv_cnt"
                  , fi = "yspwl.web.live.user.act"
                  , pi = "act_type"
                  , mi = "switch_bitrate"
                  , yi = "switch_auto"
                  , vi = "switch_line"
                  , _i = "switch_pts"
                  , gi = "fast_sample"
                  , Si = "no_picture"
                  , Ti = "hls_play_succ"
                  , Pi = "hls_load_succ"
                  , ki = "connect_video_ts"
                  , Ei = "recv_video_ts"
                  , Ii = "first_video_pkg_ts"
                  , bi = "first_video_iframe_ts"
                  , Ci = "video_iframe_ts"
                  , wi = "first_video_render_ts"
                  , Ai = "video_played_ts"
                  , Ri = "video_load_ts"
                  , Li = "video_get_vp_ts"
                  , Bi = "video_login_ts"
                  , Di = "load_m3u8_ts"
                  , Oi = "first_frag_load_ts"
                  , Mi = "first_frag_loaded_ts"
                  , Fi = "first_frag_size"
                  , Ui = "switch_cost"
                  , Ni = "load_p2plib_error"
                  , xi = "load_pcdnlib_error"
                  , Vi = "pcdn_to_cdn"
                  , Hi = "no_picture2"
                  , Gi = "h265_worker_load_ts"
                  , ji = "h265_status"
                  , Yi = function() {
                    function t(e) {
                        var i = e.eventEmiter
                          , s = e.stat;
                        Object(p.a)(this, t),
                        this.eventEmiter = i,
                        this.stat = s,
                        this.isSendLoadTime = !1,
                        this.isSendH265 = !1,
                        this.hasP2P = 0,
                        this.restartReason = -1,
                        this.restartTimes = 0,
                        this.turnToFlvReason = -1,
                        this.turnToFlvTimes = 0,
                        this.httpError = !1,
                        this.busiSource = ""
                    }
                    return Object(m.a)(t, [{
                        key: "sendCdnTime",
                        value: function(t, e, i) {
                            if (!this.isSendLoadTime)
                                if (this.isSendLoadTime = !0,
                                e) {
                                    var s = Math.max(0, t.connectVideoTime - t.startTime)
                                      , a = t.firstVideoPkgTime - t.connectVideoTime
                                      , r = t.firstIFrameTime1 - t.connectVideoTime
                                      , n = t.firstIFrameTime2 - t.firstIFrameTime1
                                      , o = t.firstRenderTime - t.firstIFrameTime2
                                      , u = t.onPlayTime - t.firstRenderTime
                                      , h = t.recvDataTime - t.startTime
                                      , l = (t.onPlayTime,
                                    t.startTime,
                                    t.firstP2POnDataTime - t.startTime);
                                    l = l < 0 ? 0 : l;
                                    var c = 0;
                                    t.firstP2PIframeTime > 0 && (c = (c = t.firstP2PIframeTime - t.startTime) < 0 ? 0 : c);
                                    var d = [t.hyPlayerLoadTs, h, s, 0, 0, i, 0, 0, 0, l, c]
                                      , f = [this.stat.createAct(ki, {
                                        value: [s]
                                    }), this.stat.createAct(Ii, {
                                        value: [a]
                                    }), this.stat.createAct(bi, {
                                        value: [r]
                                    }), this.stat.createAct(Ci, {
                                        value: [n]
                                    }), this.stat.createAct(wi, {
                                        value: [o]
                                    }), this.stat.createAct(Ai, {
                                        value: [u]
                                    }), this.stat.createAct(Ri, {
                                        value: d
                                    })];
                                    this.sendMetrics(f)
                                } else {
                                    var p = t.getVPTime - t.startTime
                                      , m = Math.max(0, t.connectVideoTime - t.getVPTime)
                                      , y = t.loginTime - t.connectVideoTime
                                      , v = t.firstVideoPkgTime - t.loginTime
                                      , _ = t.firstIFrameTime - t.firstVideoPkgTime
                                      , g = t.firstRenderTime - t.firstIFrameTime
                                      , S = t.onPlayTime - t.firstRenderTime
                                      , T = t.onPlayTime - t.startTime
                                      , P = [this.stat.createAct(Li, {
                                        value: [p]
                                    }), this.stat.createAct(ki, {
                                        value: [m]
                                    }), this.stat.createAct(Bi, {
                                        value: [y]
                                    }), this.stat.createAct(Ii, {
                                        value: [v]
                                    }), this.stat.createAct(bi, {
                                        value: [_]
                                    }), this.stat.createAct(wi, {
                                        value: [g]
                                    }), this.stat.createAct(Ai, {
                                        value: [S]
                                    }), this.stat.createAct(Ri, {
                                        value: [T]
                                    })];
                                    this.sendMetrics(P)
                                }
                        }
                    }, {
                        key: "sendFlvTime",
                        value: function(t, e, i, s) {
                            var a = arguments.length > 4 && void 0 !== arguments[4] && arguments[4]
                              , r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0
                              , n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0
                              , o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0
                              , u = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0
                              , h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0;
                            if ((!this.isSendLoadTime || a) && (this.isSendLoadTime = !0,
                            !(t > 1e4 || e > 1e4))) {
                                var l = 0;
                                n && (l += 1),
                                r && (l += 2),
                                this.stat.setComDim(st, l);
                                var c = [t, i, e, r, n, o, 0, 0, 0, u, h]
                                  , d = [this.stat.createAct(Ri, {
                                    value: c
                                }), this.stat.createAct(ki, {
                                    value: [e]
                                }), this.stat.createAct(Ei, {
                                    value: [i, s]
                                })];
                                this.sendMetrics(d)
                            }
                        }
                    }, {
                        key: "sendWebRtcTime",
                        value: function(t, e, i, s, a) {
                            this.isSendLoadTime = !0,
                            this.stat.setActDim("p2p", "3");
                            var r = [this.stat.createAct(Ri, {
                                value: [t, 0, 0, 0, 0, e, i, s, a]
                            })];
                            this.sendMetrics(r)
                        }
                    }, {
                        key: "sendHlsTime",
                        value: function(t, e, i, s, a, r) {
                            var n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0
                              , o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0;
                            if (!this.isSendLoadTime) {
                                var u = 0;
                                if (o && (u += 1),
                                n && (u += 2),
                                this.stat.setComDim(st, u),
                                this.isSendLoadTime = !0,
                                !(e > 1e4 || i > 1e4 || a > 1e4)) {
                                    var h = [this.stat.createAct(Ri, {
                                        value: [e, t, 0, n, o],
                                        str: [this.busiSource]
                                    }), this.stat.createAct(Di, {
                                        value: [i, t]
                                    }), this.stat.createAct(Oi, {
                                        value: [s, t]
                                    }), this.stat.createAct(Mi, {
                                        value: [a, t]
                                    }), this.stat.createAct(Fi, {
                                        value: [r, t]
                                    })];
                                    this.sendMetrics(h)
                                }
                            }
                        }
                    }, {
                        key: "setBusiSource",
                        value: function(t) {
                            this.busiSource = t
                        }
                    }, {
                        key: "sendMP4Time",
                        value: function() {
                            var t = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).loadTime;
                            if (!(t > 1e4)) {
                                var e = [this.stat.createAct(Ri, {
                                    value: [t],
                                    str: [this.busiSource]
                                })];
                                this.sendMetrics(e)
                            }
                        }
                    }, {
                        key: "sendMetrics",
                        value: function(t) {
                            this.eventEmiter.trigger(P.DATA_METRIC2, t)
                        }
                    }, {
                        key: "sendOldMetrics",
                        value: function(t) {
                            this.eventEmiter.trigger(P.DATA_METRIC, t)
                        }
                    }]),
                    t
                }();
                Yi.METRIC = {
                    VIDEO_FLOW_LINE: "video.flow.line",
                    VIDEO_FLOW_P2P: "video.flow.p2p",
                    VIDEO_BAD_QUALITY_RATIO: "video.video_bad_quality_ratio",
                    WEB_HLS_PLAY_VIDEO_RATIO: "web.hls.play_video_ratio",
                    WEB_HLS_PLAY_SUC_RATIO: "web.hls.play_suc_ratio",
                    WEB_P2P_PLAY_RATIO: "web.p2p.play_ratio",
                    WEB_P2P_PUNCH: "web.p2p.punch",
                    WEB_P2P_BW_P2P_VALID: "web.p2p.bw_p2p_valid",
                    WEB_P2P_BW_P2P_REPEAT: "web.p2p.bw_p2p_repeat",
                    WEB_P2P_BW_P2P_TOTAL: "web.p2p.bw_p2p_total",
                    WEB_P2P_BW_CDN_VALID: "web.p2p.bw_cdn_valid",
                    WEB_P2P_BW_CDN_REPEAT: "web.p2p.bw_cdn_repeat",
                    WEB_P2P_BW_CDN_TOTAL: "web.p2p.bw_cdn_total",
                    WEB_P2P_BW_RANGE_VALID: "web.p2p.bw_range_valid",
                    WEB_P2P_BW_RANGE_TOTAL: "web.p2p.bw_range_total",
                    WEB_P2P_PLAY_FAIL: "web.p2p.play_fail",
                    WEB_P2P_LOAD_RATIO: "web.p2p.load_ratio",
                    WEB_P2P_CDN_RESTART: "web.p2p.cdn_restart",
                    WEB_P2P_TCP_NO_SLICE: "web.p2p.tcp_no_slice",
                    WEB_P2P_TCP_OPEN_TIME: "web.p2p.tcp_open_time",
                    WEB_P2P_HTTP_CODE: "web.p2p.http_code_",
                    WEB_P2P_TCP_TIMEOUT: "web.p2p.tcp_timeout",
                    WEB_H265: "web.h265",
                    SDK_P2P_TCP: "sdk.p2p.tcp",
                    SDK_VIDEO_LOGIN_SUC: "sdk.video.login_suc",
                    SDK_P2P_COOLING: "sdk.p2p.cooling",
                    SDK_P2P_SERVER_OPEN: "sdk.p2p.server_open",
                    SDK_P2P_USER_PROPERTY: "sdk.p2p.user_property",
                    VIDEO_VIDEO_BAD_QUALITY_5M_RATIO: "video.video_bad_quality_5m_ratio",
                    VIDEO_VIDEO_LOAD_ERROR: "video_load_error",
                    RECV_DANMU_CARTON: "recv_danmu_carton",
                    SDK_P2P_DETAILS: "sdk.p2p.details",
                    SDK_P2P_FORCE_REASON: "sdk.p2p.force_reason",
                    SDK_P2P_DEFAULT_REASON: "sdk.p2p.default_reason",
                    SDK_P2P_VALID_RET: "sdk.p2p.valid_ret",
                    SDK_P2P_GET_NODE: "sdk.p2p.get_node",
                    WEB_USER: "web.user"
                },
                Yi.INTERVAL = {
                    SDK_VIDEO_QUALITY: "sdk.video.quality",
                    SDK_VIDEO_QUALITY_5M: "sdk.video.quality_5m",
                    SDK_CALC_FLOW: "sdk.calc.flow",
                    SDK_P2P_TCP: "sdk.p2p.tcp",
                    SDK_P2P_FLOW: "sdk.p2p.flow",
                    SDK_P2P_PUNCH: "sdk.p2p.punch",
                    SDK_P2P_SUB: "sdk.p2p.sub",
                    SDK_P2P_RESEND: "sdk.p2p.resend",
                    SDK_P2P_DELAY: "sdk.p2p.resend",
                    SDK_P2P_OTHER: "sdk.p2p.other"
                },
                Yi.TRIGGER = {
                    SDK_HLS_PLAY: "sdk.hls.play",
                    SDK_HLS_LOAD: "sdk.hls.load",
                    SDK_MSE_ERROR: "sdk.mse.error",
                    SDK_P2P_LOAD: "sdk.p2p.load",
                    SDK_P2P_LOAD_SAMPLE: "sdk.p2p.load_sample",
                    SDK_P2P_RESTART: "sdk.p2p.restart",
                    SDK_WEB_H265: "sdk.web.h265"
                };
                var Wi = Yi
                  , qi = i(11)
                  , Ki = function() {
                    function t() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10;
                        Object(p.a)(this, t),
                        this.maxSize = e,
                        this.sum = 0,
                        this.list = [],
                        this.idx = 0,
                        this.cur = 0
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.sum = 0,
                            this.list = [],
                            this.idx = 0,
                            this.cur = 0
                        }
                    }, {
                        key: "addCur",
                        value: function(t) {
                            this.cur += t
                        }
                    }, {
                        key: "calculate",
                        value: function() {
                            this.add(this.cur);
                            var t = this.cur;
                            return this.cur = 0,
                            t
                        }
                    }, {
                        key: "add",
                        value: function(t) {
                            this.sum += t,
                            this.list.length < this.maxSize ? this.list.push(t) : (this.sum -= this.list[this.idx],
                            this.list[this.idx] = t),
                            this.idx++,
                            this.idx >= this.maxSize && (this.idx = 0)
                        }
                    }, {
                        key: "average",
                        value: function() {
                            return 0 === this.list.length ? R.UintMax : Math.round(this.sum / this.list.length)
                        }
                    }, {
                        key: "getSamples",
                        value: function() {
                            return this.list
                        }
                    }, {
                        key: "max",
                        value: function() {
                            if (0 === this.list.length)
                                return R.UintMax;
                            var t, e = 0, i = Object(qi.a)(this.list);
                            try {
                                for (i.s(); !(t = i.n()).done; ) {
                                    var s = t.value;
                                    s > e && (e = s)
                                }
                            } catch (t) {
                                i.e(t)
                            } finally {
                                i.f()
                            }
                            return e
                        }
                    }, {
                        key: "min",
                        value: function() {
                            var t, e = R.UintMax, i = Object(qi.a)(this.list);
                            try {
                                for (i.s(); !(t = i.n()).done; ) {
                                    var s = t.value;
                                    s < e && (e = s)
                                }
                            } catch (t) {
                                i.e(t)
                            } finally {
                                i.f()
                            }
                            return e
                        }
                    }]),
                    t
                }()
                  , zi = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.speed = new Ki(20),
                        this.rtt = new Ki(20),
                        this.p2p = 0
                    }
                    return Object(m.a)(t, [{
                        key: "addSpeed",
                        value: function(t) {
                            var e = parseInt(t.replace("KB", ""));
                            this.speed.add(e)
                        }
                    }, {
                        key: "addRtt",
                        value: function(t) {
                            this.rtt.add(t)
                        }
                    }, {
                        key: "setP2p",
                        value: function(t) {
                            this.p2p = t
                        }
                    }, {
                        key: "getP2p",
                        value: function() {
                            return this.p2p
                        }
                    }, {
                        key: "getResult",
                        value: function() {
                            return {
                                speed: this.speed.getSamples(),
                                rtt: this.rtt.getSamples(),
                                p2p: this.p2p
                            }
                        }
                    }]),
                    t
                }()
                  , Xi = i(5)
                  , Ji = i(8);
                function Qi(t, e, i) {
                    return (Qi = "undefined" != typeof Reflect && h.default ? h.default : function(t, e, i) {
                        var s = function(t, e) {
                            for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = Object(Ji.a)(t)); )
                                ;
                            return t
                        }(t, e);
                        if (s) {
                            var a = (0,
                            u.default)(s, e);
                            return a.get ? a.get.call(i) : a.value
                        }
                    }
                    )(t, e, i || t)
                }
                var Zi = i(7)
                  , $i = i(6)
                  , ts = i(35)
                  , es = i.n(ts)
                  , is = !1
                  , ss = []
                  , as = 0
                  , rs = null;
                function ns(t, e) {
                    for (var i = 0, s = ss.length; i < s; i++) {
                        var a = ss[i];
                        if (a.callback == t && a.thisObj == e)
                            return a
                    }
                    return null
                }
                function os(t, e, i) {
                    var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                      , a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                    if ((i = 0 | (Number(i) || 0)) < 10 || i % 10 != 0 || !t)
                        return E.a.error("Timer.add Invalide interval value or callback function."),
                        !1;
                    var r = ns(t, e);
                    return r || (r = {
                        callback: t,
                        thisObj: e,
                        bindCallback: e ? t.bind(e) : t,
                        param: s
                    },
                    ss.push(r)),
                    r.times = a,
                    r.tickCount = 0,
                    r.interval = i / 10,
                    r.delayDel = !1,
                    us(),
                    !0
                }
                function us() {
                    rs && 1 == Number(M.isUseWebWorkerTick) ? rs.postMessage("start") : !as && ss.length > 0 && (as = setInterval(hs, 10))
                }
                function hs() {
                    if (0 != ss.length) {
                        is = !0;
                        for (var t = F.a.now(), e = ss.length - 1; e >= 0; e--) {
                            var i = ss[e];
                            if (i && !i.delayDel) {
                                if (++i.tickCount % i.interval == 0) {
                                    var s = i.bindCallback
                                      , a = i.tickCount / i.interval;
                                    s(t, a, i.param),
                                    i.times > 0 && i.times <= a && i.tickCount > 0 && ss.splice(e, 1)
                                }
                            } else
                                ss.splice(e, 1)
                        }
                        is = !1
                    } else
                        rs && 1 == Number(M.isUseWebWorkerTick) ? rs.postMessage("stop") : (clearInterval(as),
                        as = 0)
                }
                var ls = {
                    initWorker: function() {
                        (rs = es()(36)).addEventListener("message", (function(t) {
                            hs()
                        }
                        )),
                        rs.addEventListener("error", (function(t) {
                            E.a.error("TimerWorker.error:", t.lineno + "," + t.colno, t.message),
                            rs.terminate(),
                            rs = null,
                            E.a.warn("[ TimerWorker terminate ]"),
                            us()
                        }
                        ))
                    },
                    has: function(t, e) {
                        return !!ns(t, e)
                    },
                    add: os,
                    remove: function(t, e) {
                        for (var i = 0, s = ss.length; i < s; i++) {
                            var a = ss[i];
                            if (a.callback == t && a.thisObj == e)
                                return is ? a.delayDel = !0 : ss.splice(i, 1),
                                !0
                        }
                        return !1
                    },
                    once: function(t, e, i, s) {
                        os(t, e, i + 10, s, 1)
                    },
                    getSize: function() {
                        return ss.length
                    }
                }
                  , cs = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.fpsIndex = 0,
                        this.fpsArr = [],
                        this.fpsMap = new v.default,
                        this.started = !1,
                        this.realFps = 0,
                        this.recvFps = new Ki(20),
                        this.perSecondIndex = 0,
                        this.perSecondArr = [],
                        this.perSecondMap = new v.default
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.fpsArr = [],
                            this.fpsMap.clear(),
                            this.started = !1,
                            this.realFps = 0,
                            this.recvFps.reset(),
                            ls.remove(this.onFrameTimer, this),
                            this.perSecondIndex = 0,
                            this.perSecondArr = [],
                            this.perSecondMap.clear()
                        }
                    }, {
                        key: "onFrameTimer",
                        value: function(t, e) {
                            this.recvFps.calculate()
                        }
                    }, {
                        key: "addDts",
                        value: function(t) {
                            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                            this.recvFps.addCur(1),
                            this.started || (this.started = !0,
                            ls.add(this.onFrameTimer, this, 1e3));
                            var i = parseInt(t / 1e3);
                            if (this.fpsMap.has(i))
                                this.fpsMap.set(i, this.fpsMap.get(i) + 1);
                            else {
                                this.fpsIndex >= 10 && (this.calcRealFps(),
                                this.fpsIndex = 0);
                                var s = this.fpsArr[this.fpsIndex];
                                this.fpsMap.delete(s),
                                this.fpsArr[this.fpsIndex] = i,
                                this.fpsMap.set(i, 1),
                                this.fpsIndex++
                            }
                            e && this.addDataSize(i, e)
                        }
                    }, {
                        key: "calcRealFps",
                        value: function() {
                            if (0 === this.realFps) {
                                var t = this.fpsArr[1];
                                this.realFps = this.fpsMap.get(t)
                            }
                        }
                    }, {
                        key: "getRecvFps",
                        value: function() {
                            var t = this.recvFps.average();
                            return t === R.UintMax ? 0 : t
                        }
                    }, {
                        key: "getFps",
                        value: function() {
                            if (this.fpsArr.length > 1) {
                                var e = this.fpsArr[1]
                                  , i = this.fpsMap.get(e)
                                  , s = 0
                                  , a = i;
                                return t.FIXED_FPS.forEach((function(t) {
                                    var e = t > i ? t - i : i - t;
                                    e < 3 && (0 === s || e < s) && (s = e,
                                    a = t)
                                }
                                )),
                                a
                            }
                            return 0
                        }
                    }, {
                        key: "addDataSize",
                        value: function(t, e) {
                            if (this.perSecondMap.has(t))
                                this.perSecondMap.set(t, this.perSecondMap.get(t) + e);
                            else {
                                this.perSecondIndex >= 10 && (this.perSecondIndex = 0);
                                var i = this.perSecondArr[this.perSecondIndex];
                                this.perSecondMap.delete(i),
                                this.perSecondArr[this.perSecondIndex] = t,
                                this.perSecondMap.set(t, e),
                                this.perSecondIndex++
                            }
                        }
                    }, {
                        key: "getRealBitrate",
                        value: function() {
                            var t = 0
                              , e = this.perSecondArr.length;
                            if (e > 1) {
                                var i = this.perSecondArr[e - 2];
                                t = this.perSecondMap.get(i)
                            }
                            return parseInt(8 * t / 1e3)
                        }
                    }]),
                    t
                }();
                cs.FIXED_FPS = [0, 15, 20, 24, 30, 40, 48, 60];
                var ds = cs
                  , fs = function() {
                    function t() {
                        Object(p.a)(this, t)
                    }
                    return Object(m.a)(t, null, [{
                        key: "init",
                        value: function() {
                            var e;
                            for (e in t.types = {
                                av01: [],
                                av1C: [],
                                avc1: [],
                                avcC: [],
                                hvc1: [],
                                hvcC: [],
                                btrt: [],
                                dinf: [],
                                dref: [],
                                esds: [],
                                ftyp: [],
                                hdlr: [],
                                mdat: [],
                                mdhd: [],
                                mdia: [],
                                mfhd: [],
                                minf: [],
                                moof: [],
                                moov: [],
                                mp4a: [],
                                mvex: [],
                                mvhd: [],
                                sdtp: [],
                                stbl: [],
                                stco: [],
                                stsc: [],
                                stsd: [],
                                stsz: [],
                                stts: [],
                                tfdt: [],
                                tfhd: [],
                                traf: [],
                                trak: [],
                                trun: [],
                                trex: [],
                                tkhd: [],
                                vmhd: [],
                                smhd: []
                            },
                            t.types)
                                t.types.hasOwnProperty(e) && (t.types[e] = [e.charCodeAt(0), e.charCodeAt(1), e.charCodeAt(2), e.charCodeAt(3)]);
                            var i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0])
                              , s = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
                            t.HDLR_TYPES = {
                                video: i,
                                audio: s
                            };
                            var a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1])
                              , r = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                            t.STTS = t.STSC = t.STCO = r,
                            t.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
                            t.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
                            t.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]),
                            t.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
                            var n = new Uint8Array([105, 115, 111, 109])
                              , o = new Uint8Array([97, 118, 99, 49])
                              , u = new Uint8Array([0, 0, 0, 1]);
                            t.FTYP = t.box(t.types.ftyp, n, u, n, o),
                            t.DINF = t.box(t.types.dinf, t.box(t.types.dref, a))
                        }
                    }, {
                        key: "box",
                        value: function(t) {
                            for (var e, i = Array.prototype.slice.call(arguments, 1), s = 8, a = i.length, r = a; a--; )
                                s += i[a].byteLength;
                            for ((e = new Uint8Array(s))[0] = s >> 24 & 255,
                            e[1] = s >> 16 & 255,
                            e[2] = s >> 8 & 255,
                            e[3] = 255 & s,
                            e.set(t, 4),
                            a = 0,
                            s = 8; a < r; a++)
                                e.set(i[a], s),
                                s += i[a].byteLength;
                            return e
                        }
                    }, {
                        key: "hdlr",
                        value: function(e) {
                            return t.box(t.types.hdlr, t.HDLR_TYPES[e])
                        }
                    }, {
                        key: "mdat",
                        value: function(e) {
                            return t.box(t.types.mdat, e)
                        }
                    }, {
                        key: "mdhd",
                        value: function(e, i) {
                            return t.box(t.types.mdhd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 85, 196, 0, 0]))
                        }
                    }, {
                        key: "mdia",
                        value: function(e) {
                            return t.box(t.types.mdia, t.mdhd(e.timescale, e.duration), t.hdlr(e.type), t.minf(e))
                        }
                    }, {
                        key: "mfhd",
                        value: function(e) {
                            return t.box(t.types.mfhd, new Uint8Array([0, 0, 0, 0, e >> 24, e >> 16 & 255, e >> 8 & 255, 255 & e]))
                        }
                    }, {
                        key: "minf",
                        value: function(e) {
                            return "audio" === e.type ? t.box(t.types.minf, t.box(t.types.smhd, t.SMHD), t.DINF, t.stbl(e)) : t.box(t.types.minf, t.box(t.types.vmhd, t.VMHD), t.DINF, t.stbl(e))
                        }
                    }, {
                        key: "moof",
                        value: function(e, i, s) {
                            return t.box(t.types.moof, t.mfhd(e), t.traf(s, i))
                        }
                    }, {
                        key: "moov",
                        value: function(e) {
                            for (var i = e.length, s = []; i--; )
                                s[i] = t.trak(e[i]);
                            return t.box.apply(null, [t.types.moov, t.mvhd(e[0].timescale, e[0].duration)].concat(s).concat(t.mvex(e)))
                        }
                    }, {
                        key: "mvex",
                        value: function(e) {
                            for (var i = e.length, s = []; i--; )
                                s[i] = t.trex(e[i]);
                            return t.box.apply(null, [t.types.mvex].concat(s))
                        }
                    }, {
                        key: "mvhd",
                        value: function(e, i) {
                            var s = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
                            return t.box(t.types.mvhd, s)
                        }
                    }, {
                        key: "sdtp",
                        value: function(e) {
                            var i, s, a = e.samples || [], r = new Uint8Array(4 + a.length);
                            for (s = 0; s < a.length; s++)
                                i = a[s].flags,
                                r[s + 4] = i.dependsOn << 4 | i.isDependedOn << 2 | i.hasRedundancy;
                            return t.box(t.types.sdtp, r)
                        }
                    }, {
                        key: "stbl",
                        value: function(e) {
                            return t.box(t.types.stbl, t.stsd(e), t.box(t.types.stts, t.STTS), t.box(t.types.stsc, t.STSC), t.box(t.types.stsz, t.STSZ), t.box(t.types.stco, t.STCO))
                        }
                    }, {
                        key: "av01",
                        value: function(e) {
                            var i = e.bytes
                              , s = e.width
                              , a = e.height;
                            return t.box(t.types.av01, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, s >> 8 & 255, 255 & s, a >> 8 & 255, 255 & a, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]), t.box(t.types.av1C, i))
                        }
                    }, {
                        key: "avc1",
                        value: function(e) {
                            var i, s, a, r = [], n = [];
                            for (i = 0; i < e.sps.length; i++)
                                a = (s = e.sps[i]).byteLength,
                                r.push(a >>> 8 & 255),
                                r.push(255 & a),
                                r = r.concat(Array.prototype.slice.call(s));
                            for (i = 0; i < e.pps.length; i++)
                                a = (s = e.pps[i]).byteLength,
                                n.push(a >>> 8 & 255),
                                n.push(255 & a),
                                n = n.concat(Array.prototype.slice.call(s));
                            var o = t.box(t.types.avcC, new Uint8Array([1, r[3], r[4], r[5], 255, 224 | e.sps.length].concat(r).concat([e.pps.length]).concat(n)))
                              , u = e.width
                              , h = e.height;
                            return t.box(t.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u >> 8 & 255, 255 & u, h >> 8 & 255, 255 & h, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]), o, t.box(t.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])))
                        }
                    }, {
                        key: "hvc1",
                        value: function(e) {
                            var i, s, a, r = [], n = [], o = [];
                            for (r.push(161),
                            r.push(e.vps.length >>> 8 & 255),
                            r.push(255 & e.vps.length),
                            i = 0; i < e.vps.length; i++)
                                a = (s = e.vps[i]).byteLength,
                                r.push(a >>> 8 & 255),
                                r.push(255 & a),
                                r = r.concat(Array.prototype.slice.call(s));
                            for (n.push(162),
                            n.push(e.sps.length >>> 8 & 255),
                            n.push(255 & e.sps.length),
                            i = 0; i < e.sps.length; i++)
                                a = (s = e.sps[i]).byteLength,
                                n.push(a >>> 8 & 255),
                                n.push(255 & a),
                                n = n.concat(Array.prototype.slice.call(s));
                            var u = []
                              , h = 0;
                            for (i = 0; i < n.length; )
                                s = n[i],
                                2 !== h || 3 !== s ? (0 === s ? h++ : h = 0,
                                u.push(s),
                                ++i) : (++i,
                                h = 0);
                            for (o.push(163),
                            o.push(e.pps.length >>> 8 & 255),
                            o.push(255 & e.pps.length),
                            i = 0; i < e.pps.length; i++)
                                a = (s = e.pps[i]).byteLength,
                                o.push(a >>> 8 & 255),
                                o.push(255 & a),
                                o = o.concat(Array.prototype.slice.call(s));
                            var l = t.box(t.types.hvcC, new Uint8Array([1, u[8], u[9], u[10], u[11], u[12], u[13], u[14], u[15], u[16], u[17], u[18], u[19], 240, 0, 255, 253, 248, 248, 0, 0, 15].concat([3]).concat(r).concat(n).concat(o)))
                              , c = e.width
                              , d = e.height;
                            return t.box(t.types.hvc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, c >> 8 & 255, 255 & c, d >> 8 & 255, 255 & d, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]), l, t.box(t.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])))
                        }
                    }, {
                        key: "esds",
                        value: function(t) {
                            var e = t.config.length;
                            return new Uint8Array([0, 0, 0, 0, 3, 23 + e, 0, 1, 0, 4, 15 + e, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([e]).concat(t.config).concat([6, 1, 2]))
                        }
                    }, {
                        key: "mp4a",
                        value: function(e) {
                            var i = e.audiosamplerate;
                            return t.box(t.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e.channelCount, 0, 16, 0, 0, 0, 0, i >> 8 & 255, 255 & i, 0, 0]), t.box(t.types.esds, t.esds(e)))
                        }
                    }, {
                        key: "stsd",
                        value: function(e) {
                            return "audio" === e.type ? t.box(t.types.stsd, t.STSD, t.mp4a(e)) : e.isHevc ? t.box(t.types.stsd, t.STSD, t.hvc1(e)) : e.isAV01 ? t.box(t.types.stsd, t.STSD, t.av01(e)) : t.box(t.types.stsd, t.STSD, t.avc1(e))
                        }
                    }, {
                        key: "tkhd",
                        value: function(e) {
                            var i = e.id
                              , s = e.duration
                              , a = e.width
                              , r = e.height;
                            return t.box(t.types.tkhd, new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 0, 0, 0, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, a >> 8 & 255, 255 & a, 0, 0, r >> 8 & 255, 255 & r, 0, 0]))
                        }
                    }, {
                        key: "traf",
                        value: function(e, i) {
                            var s = t.sdtp(e)
                              , a = e.id;
                            return t.box(t.types.traf, t.box(t.types.tfhd, new Uint8Array([0, 0, 0, 0, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a])), t.box(t.types.tfdt, new Uint8Array([0, 0, 0, 0, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i])), t.trun(e, s.length + 16 + 16 + 8 + 16 + 8 + 8), s)
                        }
                    }, {
                        key: "trak",
                        value: function(e) {
                            return e.duration = e.duration || 4294967295,
                            t.box(t.types.trak, t.tkhd(e), t.mdia(e))
                        }
                    }, {
                        key: "trex",
                        value: function(e) {
                            var i = e.id;
                            return t.box(t.types.trex, new Uint8Array([0, 0, 0, 0, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]))
                        }
                    }, {
                        key: "trun",
                        value: function(e, i) {
                            var s, a, r, n, o, u, h = e.samples || [], l = h.length, c = 12 + 16 * l, d = new Uint8Array(c);
                            for (i += 8 + c,
                            d.set([0, 0, 15, 1, l >>> 24 & 255, l >>> 16 & 255, l >>> 8 & 255, 255 & l, i >>> 24 & 255, i >>> 16 & 255, i >>> 8 & 255, 255 & i], 0),
                            s = 0; s < l; s++)
                                r = (a = h[s]).duration,
                                n = a.size,
                                o = a.flags,
                                u = a.cts,
                                d.set([r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, 255 & r, n >>> 24 & 255, n >>> 16 & 255, n >>> 8 & 255, 255 & n, o.isLeading << 2 | o.dependsOn, o.isDependedOn << 6 | o.hasRedundancy << 4 | o.paddingValue << 1 | o.isNonSync, 61440 & o.degradPrio, 15 & o.degradPrio, u >>> 24 & 255, u >>> 16 & 255, u >>> 8 & 255, 255 & u], 12 + 16 * s);
                            return t.box(t.types.trun, d)
                        }
                    }, {
                        key: "initSegment",
                        value: function(e) {
                            t.types || t.init();
                            var i, s = t.moov(e);
                            return (i = new Uint8Array(t.FTYP.byteLength + s.byteLength)).set(t.FTYP),
                            i.set(s, t.FTYP.byteLength),
                            i
                        }
                    }]),
                    t
                }()
                  , ps = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.mse = e,
                        this.audioISGenerated = !1,
                        this.videoISGenerated = !1,
                        this.PES2MP4SCALEFACTOR = 1,
                        this.PES_TIMESCALE = 9e4,
                        this.MP4_TIMESCALE = this.PES_TIMESCALE / this.PES2MP4SCALEFACTOR,
                        this._forceFirstIDR = !(!O.a.chrome || !(O.a.version.major < 50 || 50 === O.a.version.major && O.a.version.build < 2661))
                    }
                    return Object(m.a)(t, [{
                        key: "timescale",
                        get: function() {
                            return this.MP4_TIMESCALE
                        }
                    }, {
                        key: "isWebglRender",
                        get: function() {
                            return this.mse.h265Proxy && this.mse.h265Proxy.renderInited
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.insertDiscontinuity(),
                            this.switchLevel()
                        }
                    }, {
                        key: "insertDiscontinuity",
                        value: function() {
                            this._initPTS = this._initDTS = this.nextAacPts = this.nextAvcDts = void 0
                        }
                    }, {
                        key: "getInitDts",
                        value: function() {
                            return void 0 !== this._initDTS ? this._initDTS / 90 : void 0
                        }
                    }, {
                        key: "switchLevel",
                        value: function() {
                            var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
                              , e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                            E.a.log("mp4-remuxer.switchLevel"),
                            t && (this.videoISGenerated = !1),
                            e && (this.audioISGenerated = !1)
                        }
                    }, {
                        key: "remux",
                        value: function(t, e, i, s) {
                            Number(localStorage._printMp4Remux) && E.a.debug("\n### Audio", t, "\n### Video", e),
                            this.audioISGenerated || this.generateAudioIS(t, i),
                            this.videoISGenerated || this.isWebglRender || this.generateVideoIS(e, i),
                            this.initTs(t, e, i),
                            e.samples.length && (this.isWebglRender ? this.renderVideo(e, s) : this.remuxVideo(e, s)),
                            t.samples.length && this.remuxAudio(t, s),
                            this.mse.onFragParsed()
                        }
                    }, {
                        key: "initTs",
                        value: function(t, e, i) {
                            if (null == this._initPTS) {
                                var s = t.samples
                                  , a = e.samples
                                  , r = s.length
                                  , n = a.length
                                  , o = this.PES_TIMESCALE;
                                0 === r && 0 === n ? E.a.warn("mp4-remuxer.initTs have no nbAudio&nbVideo") : 0 === n ? (this._initPTS = s[0].pts - o * i,
                                this._initDTS = s[0].dts - o * i) : 0 === r ? (this._initPTS = a[0].pts - o * i,
                                this._initDTS = a[0].dts - o * i) : (this._initPTS = Math.min(a[0].pts, s[0].pts) - o * i,
                                this._initDTS = Math.min(a[0].dts, s[0].dts) - o * i),
                                E.a.log("mp4-remuxer initDTS/initPTS=[".concat(this._initDTS, ", ").concat(this._initPTS, "]"))
                            }
                        }
                    }, {
                        key: "generateAudioIS",
                        value: function(t, e) {
                            if (t.config) {
                                var i = {
                                    audioMoov: fs.initSegment([t]),
                                    audioCodec: t.codec,
                                    audioChannelCount: t.channelCount
                                };
                                this.mse.onInitSegment(i),
                                this.audioISGenerated = !0
                            }
                        }
                    }, {
                        key: "generateVideoIS",
                        value: function(t, e) {
                            if (t.isAV01 || t.sps && t.pps) {
                                var i = {
                                    videoMoov: fs.initSegment([t]),
                                    videoCodec: t.isAV01 ? t.codec : "avc1.640033",
                                    videoWidth: 1280,
                                    videoHeight: 720
                                };
                                this.mse.onInitSegment(i),
                                this.videoISGenerated = !0
                            }
                        }
                    }, {
                        key: "remuxVideo",
                        value: function(t, e) {
                            var i, s, a, r, n, o, u, h, l, c, d, f, p, m, y = 8, v = this.PES2MP4SCALEFACTOR, _ = [], g = t.isAV01 ? 0 : 4 * t.naluCnt;
                            for (u = new Uint8Array(t.len + g + 8),
                            (i = new DataView(u.buffer)).setUint32(0, u.byteLength),
                            u.set(fs.types.mdat, 4); t.samples.length; ) {
                                for (a = t.samples.shift(),
                                n = 0; a.units.length; )
                                    s = (o = a.units.shift()).data.byteLength,
                                    "av01" != a.type && (i.setUint32(y, s),
                                    y += 4,
                                    n += 4),
                                    u.set(o.data, y),
                                    y += s,
                                    n += s;
                                if (d = a.pts - this._initDTS,
                                ((f = a.dts - this._initDTS) < 0 || d < 0) && E.a.log("warn"),
                                void 0 !== c)
                                    p = this._PTSNormalize(d, c),
                                    m = this._PTSNormalize(f, c),
                                    r.duration = (m - c) / v,
                                    r.duration < 0 && (Number(localStorage._printMp4RemuxVideo) && E.a.warn("mp4-remuxer.remuxVideo invalid sample duration at pts=" + a.pts / 90 + " dts=" + a.dts / 90 + " duration=" + r.duration / 90),
                                    r.duration = 0,
                                    m = c);
                                else {
                                    var S, T = this.nextAvcDts || f;
                                    p = this._PTSNormalize(d, T),
                                    m = this._PTSNormalize(f, T),
                                    S = Math.round((m - T) / 90),
                                    (e || Math.abs(S) < 600) && S && (S > 1 && Number(localStorage._printMp4RemuxVideo) ? E.a.warn("mp4-remuxer.remuxVideo hole=" + S + " filling it") : S < -1 && Number(localStorage._printMp4RemuxVideo) && E.a.warn("mp4-remuxer.remuxVideo overlapping=" + -S + " detected"),
                                    m = T,
                                    p = Math.max(p - S, m)),
                                    Math.max(0, p),
                                    l = Math.max(0, m)
                                }
                                var P = a.key;
                                r = {
                                    size: n,
                                    duration: 0,
                                    cts: (p - m) / v,
                                    flags: {
                                        isLeading: 0,
                                        degradPrio: 0,
                                        hasRedundancy: 0,
                                        dependsOn: P ? 2 : 1,
                                        isDependedOn: P ? 1 : 0,
                                        isNonSync: P ? 0 : 1
                                    }
                                },
                                _.push(r),
                                c = m
                            }
                            this._forceFirstIDR && (_[0].flags.dependsOn = 2,
                            _[0].flags.isNonSync = 0),
                            void 0 !== t.endDts ? (r.duration = (90 * t.endDts - this._initDTS - m) / v,
                            r.duration < 0 ? (r.duration = 0,
                            this.nextAvcDts = m) : this.nextAvcDts = 90 * t.endDts - this._initDTS) : (_.length >= 2 && (r.duration = _[_.length - 2].duration),
                            this.nextAvcDts = m + r.duration * v),
                            t.len = 0,
                            t.naluCnt = 0,
                            t.samples = _,
                            h = fs.moof(t.sn, l / v, t),
                            t.samples = [];
                            var k = {
                                type: "video",
                                data: this._mergeBoxes(h, u)
                            };
                            this.mse.onFragParsing(k)
                        }
                    }, {
                        key: "remuxAudio",
                        value: function(t, e) {
                            var i, s, a, r, n, o, u, h, l, c, d, f = 8, p = this.PES_TIMESCALE, m = this.PES2MP4SCALEFACTOR, y = [];
                            for (r = new Uint8Array(t.len + 8),
                            new DataView(r.buffer).setUint32(0, r.byteLength),
                            r.set(fs.types.mdat, 4); t.samples.length; ) {
                                if (a = (i = t.samples.shift()).unit,
                                r.set(a, f),
                                f += a.byteLength,
                                h = i.pts - this._initDTS,
                                l = i.dts - this._initDTS,
                                void 0 !== u)
                                    c = this._PTSNormalize(h, u),
                                    d = this._PTSNormalize(l, u),
                                    s.duration = (d - u) / m,
                                    s.duration < 0 && (Number(localStorage._printMp4RemuxAudio) && E.a.warn("mp4-remuxer.remuxAudio invalid AAC sample duration at PTS=" + i.pts + " duration=" + s.duration),
                                    s.duration = 0,
                                    c = d = u);
                                else {
                                    var v, _ = this.nextAacPts || h;
                                    c = this._PTSNormalize(h, _),
                                    d = this._PTSNormalize(l, _),
                                    v = Math.round(1e3 * (c - _) / p),
                                    (e || Math.abs(v) < 600) && v && (c = d = _),
                                    Math.max(0, c),
                                    o = Math.max(0, d)
                                }
                                s = {
                                    size: a.byteLength,
                                    cts: 0,
                                    duration: 0,
                                    flags: {
                                        isLeading: 0,
                                        isDependedOn: 0,
                                        hasRedundancy: 0,
                                        degradPrio: 0,
                                        dependsOn: 1
                                    }
                                },
                                y.push(s),
                                u = d
                            }
                            y.length >= 2 && (s.duration = y[y.length - 2].duration),
                            this.nextAacPts = c + s.duration * m,
                            t.len = 0,
                            t.samples = y,
                            n = fs.moof(t.sn, o / m, t),
                            t.samples = [];
                            var g = {
                                type: "audio",
                                data: this._mergeBoxes(n, r)
                            };
                            this.mse.onFragParsing(g)
                        }
                    }, {
                        key: "renderVideo",
                        value: function(t, e) {
                            this.mse.h265Proxy.pushVideoFrame(t, e)
                        }
                    }, {
                        key: "_mergeBoxes",
                        value: function(t, e) {
                            var i = new Uint8Array(t.byteLength + e.byteLength);
                            return i.set(t, 0),
                            i.set(e, t.byteLength),
                            i
                        }
                    }, {
                        key: "_PTSNormalize",
                        value: function(t, e) {
                            var i;
                            if (void 0 === e)
                                return t;
                            for (i = e < t ? -8589934592 : 8589934592; Math.abs(t - e) > 4294967296; )
                                t += i;
                            return t
                        }
                    }]),
                    t
                }()
                  , ms = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.data = e,
                        this.bytesAvailable = this.data.byteLength,
                        this.word = 0,
                        this.bitsAvailable = 0
                    }
                    return Object(m.a)(t, [{
                        key: "loadWord",
                        value: function() {
                            var t = this.data.byteLength - this.bytesAvailable
                              , e = new Uint8Array(4)
                              , i = Math.min(4, this.bytesAvailable);
                            if (0 === i)
                                throw new Error("no bytes available");
                            e.set(this.data.subarray(t, t + i)),
                            this.word = new DataView(e.buffer).getUint32(0),
                            this.bitsAvailable = 8 * i,
                            this.bytesAvailable -= i
                        }
                    }, {
                        key: "skipBits",
                        value: function(t) {
                            var e;
                            this.bitsAvailable > t ? (this.word <<= t,
                            this.bitsAvailable -= t) : (t -= this.bitsAvailable,
                            t -= (e = t >> 3) >> 3,
                            this.bytesAvailable -= e,
                            this.loadWord(),
                            this.word <<= t,
                            this.bitsAvailable -= t)
                        }
                    }, {
                        key: "readBits",
                        value: function(t) {
                            var e = Math.min(this.bitsAvailable, t)
                              , i = this.word >>> 32 - e;
                            return t > 32 && E.a.error("Cannot read more than 32 bits at a time"),
                            this.bitsAvailable -= e,
                            this.bitsAvailable > 0 ? this.word <<= e : this.bytesAvailable > 0 && this.loadWord(),
                            (e = t - e) > 0 ? i << e | this.readBits(e) : i
                        }
                    }, {
                        key: "skipLZ",
                        value: function() {
                            var t;
                            for (t = 0; t < this.bitsAvailable; ++t)
                                if (0 != (this.word & 2147483648 >>> t))
                                    return this.word <<= t,
                                    this.bitsAvailable -= t,
                                    t;
                            return this.loadWord(),
                            t + this.skipLZ()
                        }
                    }, {
                        key: "skipUEG",
                        value: function() {
                            this.skipBits(1 + this.skipLZ())
                        }
                    }, {
                        key: "skipEG",
                        value: function() {
                            this.skipBits(1 + this.skipLZ())
                        }
                    }, {
                        key: "readUEG",
                        value: function() {
                            var t = this.skipLZ();
                            return this.readBits(t + 1) - 1
                        }
                    }, {
                        key: "readEG",
                        value: function() {
                            var t = this.readUEG();
                            return 1 & t ? 1 + t >>> 1 : -1 * (t >>> 1)
                        }
                    }, {
                        key: "readBoolean",
                        value: function() {
                            return 1 === this.readBits(1)
                        }
                    }, {
                        key: "readUByte",
                        value: function() {
                            return this.readBits(8)
                        }
                    }, {
                        key: "skipScalingList",
                        value: function(t) {
                            var e, i = 8, s = 8;
                            for (e = 0; e < t; e++)
                                0 !== s && (s = (i + this.readEG() + 256) % 256),
                                i = 0 === s ? i : s
                        }
                    }, {
                        key: "readSPS",
                        value: function() {
                            var t, e, i, s, a, r, n, o = 0, u = 0, h = 0, l = 0, c = 0;
                            if (this.readUByte(),
                            t = this.readUByte(),
                            this.readBits(5),
                            this.skipBits(3),
                            this.readUByte(),
                            this.skipUEG(),
                            100 === t || 110 === t || 122 === t || 144 === t || 244 === t || 44 === t || 83 === t || 86 === t || 118 === t || 128 === t || 138 === t) {
                                var d = this.readUEG();
                                if (3 === d && this.skipBits(1),
                                this.skipUEG(),
                                this.skipUEG(),
                                this.skipBits(1),
                                this.readBoolean())
                                    for (r = 3 !== d ? 8 : 12,
                                    n = 0; n < r; n++)
                                        this.readBoolean() && (n < 6 ? this.skipScalingList(16) : this.skipScalingList(64))
                            }
                            this.skipUEG();
                            var f = this.readUEG();
                            if (0 === f)
                                this.readUEG();
                            else if (1 === f)
                                for (this.skipBits(1),
                                this.skipEG(),
                                this.skipEG(),
                                e = this.readUEG(),
                                n = 0; n < e; n++)
                                    this.skipEG();
                            if (this.skipUEG(),
                            this.skipBits(1),
                            i = this.readUEG(),
                            s = this.readUEG(),
                            0 === (a = this.readBits(1)) && this.skipBits(1),
                            this.skipBits(1),
                            this.readBoolean() && (o = this.readUEG(),
                            u = this.readUEG(),
                            h = this.readUEG(),
                            l = this.readUEG()),
                            this.readBoolean() && (this.readBoolean() && 255 === this.readUByte() && (this.readBits(16),
                            this.readBits(16)),
                            this.readBoolean() && this.skipBits(1),
                            this.readBoolean() && (this.readBits(3),
                            this.skipBits(1),
                            this.readBoolean() && (this.readUByte(),
                            this.readUByte(),
                            this.readUByte())),
                            this.readBoolean() && (this.readUEG(),
                            this.readUEG()),
                            this.readBoolean())) {
                                var p = this.readBits(32);
                                c = this.readBits(32) / p,
                                this.readBoolean() && (c = Math.ceil(c / 2))
                            }
                            return {
                                fps: c,
                                width: 16 * (i + 1) - 2 * o - 2 * u,
                                height: (2 - a) * (s + 1) * 16 - (h + l) * (a ? 2 : 4)
                            }
                        }
                    }, {
                        key: "readSliceType",
                        value: function() {
                            return this.readUByte(),
                            this.readUEG(),
                            this.readUEG()
                        }
                    }]),
                    t
                }()
                  , ys = function() {
                    function t() {
                        Object(p.a)(this, t)
                    }
                    return Object(m.a)(t, null, [{
                        key: "getSilentFrame",
                        value: function(t, e) {
                            if (2 === t) {
                                if (1 === e)
                                    return new Uint8Array([0, 200, 0, 128, 35, 128]);
                                if (2 === e)
                                    return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                                if (3 === e)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                                if (4 === e)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                                if (5 === e)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                                if (6 === e)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224])
                            } else {
                                if (1 === e)
                                    return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                if (2 === e)
                                    return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                if (3 === e)
                                    return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94])
                            }
                            return null
                        }
                    }]),
                    t
                }();
                ys.emptyAacFrameAdts = [255, 241, 92, 64, 18, 64, 252, 0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0, 26, 37, 65, 0, 13, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28],
                ys.emptyAacFrame = [0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0, 26, 37, 65, 0, 13, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28],
                ys.emptyAacFrame_44_1 = [1, 64, 34, 128, 163, 78, 129, 64, 0, 0, 0, 0, 4, 96, 6, 246, 81, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94];
                var vs = ys
                  , _s = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this.mse = e,
                        this.remuxer = i,
                        this.width = 0,
                        this.height = 0,
                        this.lastSN = 0,
                        this.lastLevel = 0,
                        this.PES_TIMESCALE = 9e4,
                        this.lastTsData = null,
                        this.lastPos = 0,
                        this.hasRemux = !1,
                        this.fragStartTs = 0,
                        this.ignoreSei = !1,
                        this.closeFetch = !1,
                        this.vFps = new ds,
                        this.aFps = new ds,
                        this._initPts = 0,
                        this.nextAudioPts = 0
                    }
                    return Object(m.a)(t, [{
                        key: "getFps",
                        value: function() {
                            return this.vFps && this.vFps.getFps()
                        }
                    }, {
                        key: "getAudioFps",
                        value: function() {
                            return this.aFps && this.aFps.getFps()
                        }
                    }, {
                        key: "getStartTs",
                        value: function() {
                            return this.fragStartTs
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.switchLevel(),
                            this.duration = 0
                        }
                    }, {
                        key: "probe",
                        value: function(t) {
                            return t.length >= 564 && 71 === t[0] && 71 === t[188] && 71 === t[376]
                        }
                    }, {
                        key: "resetAVData",
                        value: function() {
                            this._avcTrack && (this._avcTrack.len = 0,
                            this._avcTrack.naluCnt = 0,
                            this._avcTrack.samples = []),
                            this._aacTrack && (this._aacTrack.len = 0,
                            this._aacTrack.samples = [])
                        }
                    }, {
                        key: "pushAllData",
                        value: function() {
                            this._avcTrack && this._avcTrack.sn > 0 && this.remuxTs(this._aacTrack, this._avcTrack, this._avcTrack.sn)
                        }
                    }, {
                        key: "switchLevel",
                        value: function() {
                            var t = this.createTrack;
                            !this._avcTrack && (this._avcTrack = t("video")),
                            !this._aacTrack && (this._aacTrack = t("audio")),
                            !this._id3Track && (this._id3Track = t("id3")),
                            this.pmtParsed = !1,
                            this._pmtId = -1,
                            this.remuxer.switchLevel()
                        }
                    }, {
                        key: "createTrack",
                        value: function(t) {
                            return {
                                type: t,
                                id: -1,
                                sn: 0,
                                samples: [],
                                len: 0,
                                naluCnt: 0
                            }
                        }
                    }, {
                        key: "insertDiscontinuity",
                        value: function(t) {
                            E.a.log("TsParser.insertDiscontinuity timeOffset=".concat(t)),
                            this.resetTsData(),
                            this.switchLevel(),
                            this.remuxer.insertDiscontinuity(),
                            this.mse.insertDiscontinuity(t)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.vFps.reset(),
                            this.aFps.reset(),
                            this.hasRemux = !1,
                            this.lastTsData = null,
                            this._avcTrack && (this._avcTrack.sps = null,
                            this._avcTrack.pps = null,
                            this._avcTrack.len = 0,
                            this._avcTrack.naluCnt = 0,
                            this._avcTrack.samples = []),
                            this._aacTrack && (this._aacTrack.len = 0,
                            this._aacTrack.naluCnt = 0,
                            this._aacTrack.samples = [])
                        }
                    }, {
                        key: "resetTsData",
                        value: function() {
                            var t = this._avcTrack
                              , e = this._aacTrack
                              , i = this._id3Track;
                            e && (t.pesData = null,
                            e.pesData = null,
                            i.pesData = null,
                            this.lastTsData = null),
                            this.fragStartTs = 0
                        }
                    }, {
                        key: "appendTsData",
                        value: function(t, e) {
                            var i;
                            e && this.resetTsData(),
                            t instanceof Uint8Array || (t = new Uint8Array(t));
                            var s = this.lastTsData
                              , a = this.lastPos;
                            if (s) {
                                var r = s.byteLength - a
                                  , n = r + t.byteLength;
                                (i = new Uint8Array(n)).set(s.slice(a), 0),
                                i.set(t, r)
                            } else
                                i = t;
                            return this.lastPos = 0,
                            this.lastTsData = i,
                            i
                        }
                    }, {
                        key: "syncOffset",
                        value: function(t) {
                            for (var e = Math.min(188, t.length - 564), i = 0; i < e; ) {
                                if (71 === t[i] && 71 === t[i + 188] && 71 === t[i + 376])
                                    return i;
                                i++
                            }
                            return -1
                        }
                    }, {
                        key: "parseTs",
                        value: function(t) {
                            var e = t.data
                              , i = t.audioCodec
                              , s = t.videoCodec
                              , a = t.timeOffset
                              , r = t.duration
                              , n = t.discontinuity
                              , o = t._discontinuity
                              , u = t.level
                              , h = t.sn
                              , l = t.seeking
                              , c = t.hlsDT
                              , d = t.tsDT;
                            this.contiguous = !1,
                            n || o ? (E.a.log("TsParser.parseTs discontinuity detected timeOffset=".concat(a)),
                            this.insertDiscontinuity(a)) : u !== this.lastLevel ? (E.a.log("TsParser.parseTs level switch detected"),
                            this.switchLevel(),
                            this.lastLevel = u) : h === this.lastSN + 1 && (this.contiguous = !0);
                            var f = (e = this.appendTsData(e, l)).length;
                            this.audioCodec = i,
                            this.videoCodec = s,
                            this.timeOffset = a,
                            this.duration = r,
                            this.lastSN = h,
                            this.contiguous || (this.aacOverFlow = null),
                            this._avcTrack || this.insertDiscontinuity(a);
                            var p = this.syncOffset(e);
                            if (!(p < 0)) {
                                this.lastPos = f -= (f + p) % 188,
                                f === e.length && (this.lastTsData = null);
                                for (var m, y, v, _, g, S = this._avcTrack, T = this._aacTrack, P = this._id3Track, k = this.pmtParsed, I = S.pesData, b = T.pesData, C = P.pesData, w = S.id, A = T.id, R = P.id, L = p; L < f; L += 188)
                                    if (71 === e[L]) {
                                        if (m = !!(64 & e[L + 1]),
                                        y = ((31 & e[L + 1]) << 8) + e[L + 2],
                                        (48 & e[L + 3]) >> 4 > 1) {
                                            if ((v = L + 5 + e[L + 4]) === L + 188)
                                                continue
                                        } else
                                            v = L + 4;
                                        if (k)
                                            if (_ = (g = L + 188) - v,
                                            y === w) {
                                                if (this.mse.isPureAudio)
                                                    continue;
                                                m && (I && this._parseAVCPES(this._parsePES(I, a, c, d)),
                                                I = {
                                                    data: [],
                                                    size: 0
                                                }),
                                                I && (I.data.push(e.subarray(v, g)),
                                                I.size += _)
                                            } else if (y === A) {
                                                if (this.mse.isPureVideo)
                                                    continue;
                                                m && (b && (this._parseAACPES(this._parsePES(b, a, c, d)),
                                                !this.closeFetch && !this.hasRemux && S.samples.length > 1 && this.remuxTs(T, S, h)),
                                                b = {
                                                    data: [],
                                                    size: 0
                                                }),
                                                b && (b.data.push(e.subarray(v, g)),
                                                b.size += _)
                                            } else
                                                y === R && (m && (C && this._parseID3PES(this._parsePES(C, a, c, d)),
                                                C = {
                                                    data: [],
                                                    size: 0
                                                }),
                                                C && (C.data.push(e.subarray(v, g)),
                                                C.size += _));
                                        else
                                            m && (v += e[v] + 1),
                                            0 === y ? this._parsePAT(e, v) : y === this._pmtId && (this._parsePMT(e, v),
                                            k = this.pmtParsed = !0,
                                            w = this._avcTrack.id,
                                            A = this._aacTrack.id,
                                            R = this._id3Track.id)
                                    } else
                                        E.a.error("TsParser.parseTs ERROR: TS packet did not start with 0x47");
                                if (I && (S.pesData = I),
                                b && (T.pesData = b),
                                C && (P.pesData = C),
                                T.samples.length > 1 || this.maxVideo() || this.mse.isPureAudio && T.samples.length > 0 || this.mse.isPureVideo && S.samples.length > 0) {
                                    if (0 === T.samples.length && "firefox" === O.a.name && this.mse.reloadInError && !this.mse.isLive)
                                        return void this.mse.reloadInError();
                                    this.remuxTs(T, S, h)
                                }
                            }
                        }
                    }, {
                        key: "maxVideo",
                        value: function() {
                            var t = this._avcTrack;
                            if (t.samples.length > 1) {
                                var e = t.samples[0];
                                return (t.samples[t.samples.length - 1].dts - e.dts) / 90 > 2e3
                            }
                            return !1
                        }
                    }, {
                        key: "remuxTs",
                        value: function(t, e, i) {
                            t.sn = e.sn = i,
                            this.hasRemux = !0;
                            try {
                                if (!this._initPts) {
                                    var s = t.samples.length > 0 ? t.samples[0].pts : 0
                                      , a = e.samples.length > 0 ? e.samples[0].pts : 0;
                                    this._initPts = Math.min(s, a)
                                }
                                this.remuxAudio(t, e.samples.length > 0)
                            } catch (t) {
                                E.a.error("remux ts error: ", t)
                            }
                            this.remuxer.remux(t, e, this.timeOffset, this.contiguous)
                        }
                    }, {
                        key: "remuxAudio",
                        value: function(t, e) {
                            var i = 9216e4 / t.audiosamplerate;
                            0 == this.nextAudioPts && (this.nextAudioPts = this._initPts);
                            for (var s = this.nextAudioPts, a = t.samples, r = 0, n = s; r < a.length; r++) {
                                var o = a[r].pts
                                  , u = o - n
                                  , h = Math.abs(1e3 * u / t.timescale);
                                if (u <= -i && e)
                                    0 === r && (E.a.warn("Audio frame @ ".concat((o / t.timescale).toFixed(3), "s \n                        overlaps nextAudioPts by ").concat(Math.round(1e3 * u / t.timescale), " ms.")),
                                    this.nextAudioPts = s = n = o);
                                else if (u > i && h < 1e4 && e) {
                                    var l = Math.round(u / i);
                                    (n = o - l * i) < 0 && (l--,
                                    n += i),
                                    0 === r && (this.nextAudioPts = s = n),
                                    E.a.warn("[mp4-remuxer]: Injecting ".concat(l, " audio frame nextPts=").concat(n, " @ ").concat((n / t.timescale).toFixed(3), "s \n                    due to ").concat(Math.round(1e3 * u / t.timescale), " ms gap."));
                                    for (var c = 0; c < l; c++) {
                                        var d = Math.max(n, 0)
                                          , f = vs.getSilentFrame(t.config[0], t.channelCount)
                                          , p = {
                                            unit: f,
                                            pts: Math.round(d),
                                            dts: Math.round(d)
                                        };
                                        a.splice(r, 0, p),
                                        t.len += f.length,
                                        n += i,
                                        r++
                                    }
                                }
                                n += i,
                                this.nextAudioPts = n
                            }
                        }
                    }, {
                        key: "_parsePAT",
                        value: function(t, e) {
                            var i = t[e + 8] << 8 | t[e + 9];
                            1 == i && (this._pmtId = (31 & t[e + 10]) << 8 | t[e + 11]),
                            E.a.log("TsParser._parsePAT program_number=".concat(i, " pmtId=").concat(this._pmtId))
                        }
                    }, {
                        key: "_parsePMT",
                        value: function(t, e) {
                            var i = e + 3 + ((15 & t[e + 1]) << 8 | t[e + 2]) - 4;
                            for (e += 12 + ((15 & t[e + 10]) << 8 | t[e + 11]); e < i; ) {
                                var s = t[e]
                                  , a = (31 & t[e + 1]) << 8 | t[e + 2];
                                switch (s) {
                                case 15:
                                    this._aacTrack.id = a;
                                    break;
                                case 21:
                                    this._id3Track.id = a;
                                    break;
                                case 27:
                                    this._avcTrack.id = a;
                                    break;
                                default:
                                    E.a.log("unkown stream type:" + t[e])
                                }
                                e += 5 + ((15 & t[e + 3]) << 8 | t[e + 4])
                            }
                            E.a.log("TsParser._parsePMT aacTrack.id=".concat(this._aacTrack.id, " avcTrack.id=").concat(this._avcTrack.id))
                        }
                    }, {
                        key: "_parsePES",
                        value: function(t) {
                            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                              , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                              , s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0
                              , a = t.data[0];
                            if (1 != (a[0] << 16) + (a[1] << 8) + a[2])
                                return null;
                            var r, n, o = (a[4] << 8) + a[5], u = a[7];
                            192 & u && (r = 536870912 * (14 & a[9]) + 4194304 * (255 & a[10]) + 16384 * (254 & a[11]) + 128 * (255 & a[12]) + (254 & a[13]) / 2,
                            n = 64 & u ? 536870912 * (14 & a[14]) + 4194304 * (255 & a[15]) + 16384 * (254 & a[16]) + 128 * (255 & a[17]) + (254 & a[18]) / 2 : r);
                            var h = a[8] + 9;
                            t.data[0] = t.data[0].subarray(h),
                            t.size -= h;
                            for (var l = 0, c = new Uint8Array(t.size); t.data.length; )
                                a = t.data.shift(),
                                c.set(a, l),
                                l += a.byteLength;
                            return s > i && s - i - 1e3 * e > 0 && (r -= 90 * (s - i - 1e3 * e),
                            n -= 90 * (s - i - 1e3 * e)),
                            {
                                data: c,
                                pts: r,
                                dts: n,
                                len: o
                            }
                        }
                    }, {
                        key: "_parseAVCPES",
                        value: function(t) {
                            if (null != t) {
                                0 === this.fragStartTs && (this.fragStartTs = t.pts / this.PES_TIMESCALE);
                                var e, i = this._avcTrack, s = i.samples, a = this._parseAVCNALu(t.data), r = [], n = 0;
                                0 === a.length && s.length > 0 && this._pushToPreUnit(t.data),
                                t.data = null;
                                var o, u = !1, h = !1, l = "", c = Object(qi.a)(a);
                                try {
                                    for (c.s(); !(o = c.n()).done; ) {
                                        var d = o.value;
                                        switch (d.type) {
                                        case 1:
                                            h = !0;
                                            break;
                                        case 5:
                                            h = !0,
                                            u = !0,
                                            i.idr = !0;
                                            break;
                                        case 6:
                                            h = !0,
                                            (this.ignoreSei || 1 == localStorage._noSei) && (h = !1);
                                            break;
                                        case 7:
                                            if (h = !0,
                                            !i.sps) {
                                                i.sps = [d.data],
                                                i.timescale = this.remuxer.timescale,
                                                i.duration = this.remuxer.timescale * this.duration;
                                                var f = new ms(d.data).readSPS();
                                                this.width = i.width = f.width,
                                                this.height = i.height = f.height,
                                                this.mse && this.mse.setResolution && this.mse.setResolution(this.width, this.height);
                                                for (var p = d.data.subarray(1, 4), m = "avc1.", y = 0; y < 3; y++) {
                                                    var v = p[y].toString(16);
                                                    v.length < 2 && (v = "0" + v),
                                                    m += v
                                                }
                                                i.codec = m
                                            }
                                            break;
                                        case 8:
                                            h = !0,
                                            i.pps || (i.pps = [d.data]);
                                            break;
                                        case 9:
                                            h = !0,
                                            1 == localStorage._noAud && (h = !1);
                                            break;
                                        default:
                                            h = !1,
                                            l += "unknown NAL " + d.type + " "
                                        }
                                        h && (r.push(d),
                                        n += d.data.byteLength)
                                    }
                                } catch (t) {
                                    c.e(t)
                                } finally {
                                    c.f()
                                }
                                if (l.length,
                                i.idr && this.mse.setExceptionStat(Vt.VIDEO_IFRAME, 1),
                                i.codec && this.mse.setExceptionStat(Vt.VIDEO_CONFIG, 1),
                                (!i.sps || !i.pps || i.idr) && r.length && (!0 === u || i.sps)) {
                                    if (1 == localStorage._printVideoTs) {
                                        var _ = t.dts / 90 - this.mse.curVideoDts;
                                        E.a.debug("%cTsParser.parseAvcPes dts=", "color:green", t.dts / 90, _, "pts=".concat(t.pts / 90, " cts=").concat((t.pts - t.dts) / 90)),
                                        _ > 200 && E.a.warn("TsParser.parseAvcPes dts gap=".concat(_))
                                    }
                                    this.mse && (this.mse.curVideoDts = parseInt(t.dts / 90)),
                                    this.mse && this.mse.setExceptionStat(Vt.VIDEO_FRAME, 1),
                                    this.vFps.addDts(t.dts / 90),
                                    e = {
                                        units: r,
                                        dts: t.dts,
                                        pts: t.pts,
                                        key: u
                                    },
                                    s.push(e),
                                    i.len += n,
                                    i.naluCnt += r.length
                                }
                            } else
                                E.a.error("TsParser._parseAVCPES pes is null.")
                        }
                    }, {
                        key: "_parseAVCNALu",
                        value: function(t) {
                            for (var e, i, s, a, r, n, o = 0, u = t.byteLength, h = 0, l = []; o < u; )
                                switch (e = t[o++],
                                h) {
                                case 0:
                                    0 === e && (h = 1);
                                    break;
                                case 1:
                                    h = 0 === e ? 2 : 0;
                                    break;
                                case 2:
                                case 3:
                                    0 === e ? h = 3 : 1 === e ? (a = 31 & t[o],
                                    r ? (s = {
                                        data: t.subarray(r, o - h - 1),
                                        type: n
                                    },
                                    l.push(s)) : (i = o - h - 1) && this._pushToPreUnit(t.subarray(0, i)),
                                    o < u ? (r = o,
                                    n = a,
                                    h = 0) : h = -1) : h = 0
                                }
                            return r && (s = {
                                data: t.subarray(r, u),
                                type: n
                            },
                            l.push(s)),
                            l
                        }
                    }, {
                        key: "_pushToPreUnit",
                        value: function(t) {
                            var e = this._avcTrack.samples.length;
                            if (0 != e) {
                                var i = this._avcTrack.samples[e - 1]
                                  , s = i.units[i.units.length - 1]
                                  , a = new Uint8Array(s.data.byteLength + t.byteLength);
                                a.set(s.data, 0),
                                a.set(t, s.data.byteLength),
                                s.data = a,
                                this._avcTrack.len += t.byteLength
                            }
                        }
                    }, {
                        key: "_parseAACPES",
                        value: function(t) {
                            var e = this;
                            if (null != t) {
                                var i, s, a, r, n, o, u, h, l = this._aacTrack, c = t.data, d = c.length, f = 0;
                                if (this.aacOverFlow) {
                                    var p = new Uint8Array(this.aacOverFlow.byteLength + c.byteLength);
                                    p.set(this.aacOverFlow, 0),
                                    p.set(c, this.aacOverFlow.byteLength),
                                    c = p,
                                    this.aacOverFlow = null
                                }
                                for (s = 0; s < d - 1 && (255 !== c[s] || 240 != (240 & c[s + 1])); s++)
                                    ;
                                if (s && (s < d - 1 ? (u = "AAC PES did not start with ADTS header, offset:".concat(s),
                                h = !1) : (u = "no ADTS header found in AAC PES",
                                h = !0),
                                E.a.error("TsParser._parseAACPES ERROR:".concat(u)),
                                h))
                                    return;
                                var m = function(t) {
                                    l.config = t.config,
                                    l.audiosamplerate = t.samplerate,
                                    l.channelCount = t.channelCount,
                                    l.codec = t.codec,
                                    l.timescale = e.remuxer.timescale,
                                    l.duration = e.remuxer.timescale * e.duration,
                                    e.mse && e.mse.setExceptionStat(Vt.AUDIO_CONFIG, 1),
                                    E.a.log("TsParser._parseAACPES parsed codec:".concat(l.codec, ",rate:").concat(t.samplerate, ",nb channel:").concat(t.channelCount))
                                };
                                if (this.mse && this.mse.isLive)
                                    l.audiosamplerate || m(this._ADTStoAudioConfig(c, s, this.audioCodec));
                                else {
                                    var y = this._ADTStoAudioConfig(c, s, this.audioCodec);
                                    l.audiosamplerate ? l.audiosamplerate !== y.samplerate && this.mse && this.mse.onParseError(99) : m(y)
                                }
                                for (; s + 5 < d; ) {
                                    if (a = 1 & c[s + 1] ? 7 : 9,
                                    r = (3 & c[s + 3]) << 11,
                                    r |= c[s + 4] << 3,
                                    r |= (224 & c[s + 5]) >>> 5,
                                    (r -= a) < 0)
                                        return void E.a.error("TsParser._parseAACPES adtsFrameSize:".concat(r, ", adtsStartOffset:").concat(s, ", len:").concat(d));
                                    if (0 != r) {
                                        if (!((n = s + a) + r <= d))
                                            break;
                                        if (o = Math.round(t.pts + 1024 * f * this.PES_TIMESCALE / l.audiosamplerate),
                                        i = {
                                            unit: c.subarray(n, n + r),
                                            pts: o,
                                            dts: o
                                        },
                                        this.aFps.addDts(o / 90),
                                        1 == localStorage._printAudioTs) {
                                            var v = o / 90 - this.mse.curAudioDts;
                                            E.a.debug("%cTsParser.parseAacPes dts=", "color:red", o / 90, v, "pts=".concat(t.pts / 90, " cts=").concat((t.pts - t.dts) / 90)),
                                            v > 200 && E.a.warn("TsParser.parseAacPes dts gap=".concat(v))
                                        }
                                        for (this.mse && (this.mse.curAudioDts = parseInt(o / 90)),
                                        this.mse && this.mse.setExceptionStat(Vt.AUDIO_FRAME, 1),
                                        l.samples.push(i),
                                        l.len += r,
                                        s += a + r,
                                        f++; s < d - 1 && (255 !== c[s] || 240 != (240 & c[s + 1])); s++)
                                            ;
                                    } else
                                        s += a
                                }
                                s < d && (this.aacOverFlow = c.subarray(s, d))
                            } else
                                E.a.error("TsParser._parseAACPES pes is null.")
                        }
                    }, {
                        key: "_ADTStoAudioConfig",
                        value: function(e, i, s) {
                            var a = t.AdtsSampleingRates
                              , r = 1 + ((192 & e[i + 2]) >>> 6)
                              , n = (60 & e[i + 2]) >>> 2;
                            if (!(n > a.length - 1)) {
                                var o, u, h = (1 & e[i + 2]) << 2 | (192 & e[i + 3]) >>> 6, l = navigator.userAgent.toLowerCase();
                                return -1 !== l.indexOf("firefox") ? n >= 6 ? (r = 5,
                                u = new Array(4),
                                o = n - 3) : (r = 2,
                                u = new Array(2),
                                o = n) : -1 !== l.indexOf("android") ? -1 !== l.indexOf("mqqbrowser") ? (r = 2,
                                u = new Array(2),
                                o = n) : (r = 5,
                                u = new Array(4),
                                o = n) : (r = 5,
                                u = new Array(4),
                                s && (-1 !== s.indexOf("mp4a.40.29") || -1 !== s.indexOf("mp4a.40.5")) || !s && n >= 6 ? o = n - 3 : (s && -1 !== s.indexOf("mp4a.40.2") && (n >= 6 || 1 === h) && (r = 2,
                                u = new Array(2)),
                                o = n)),
                                u[0] = r << 3,
                                u[0] |= (14 & n) >> 1,
                                u[1] |= (1 & n) << 7,
                                u[1] |= h << 3,
                                5 === r && (u[1] |= (14 & o) >> 1,
                                u[2] = (1 & o) << 7,
                                u[2] |= 8,
                                u[3] = 0),
                                {
                                    config: u,
                                    samplerate: a[n],
                                    channelCount: h,
                                    codec: "mp4a.40." + r
                                }
                            }
                            E.a.error("TsParser._ADTStoAudioConfig ERROR:invalid ADTS sampling index:".concat(n))
                        }
                    }, {
                        key: "_parseID3PES",
                        value: function(t) {
                            this._id3Track.samples.push(t)
                        }
                    }]),
                    t
                }();
                _s.AdtsSampleingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
                var gs, Ss = _s, Ts = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.size = 0,
                        this.buffers = []
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            E.a.log("FlvCacher.reset", this.size),
                            this.size = 0,
                            this.buffers = []
                        }
                    }, {
                        key: "append",
                        value: function(t) {
                            0 !== t.length && (this.buffers.push(t),
                            this.size += t.length)
                        }
                    }, {
                        key: "getByte",
                        value: function(t) {
                            for (var e = 0, i = 0; i < this.buffers.length; ++i) {
                                var s = this.buffers[i];
                                if (e + s.length > t)
                                    return s[t - e];
                                e += s.length
                            }
                            return E.a.warn("FlvCacher.getByte has no offset=" + t),
                            0
                        }
                    }, {
                        key: "popFrame",
                        value: function() {
                            if (0 === this.size)
                                return null;
                            if (0 === this.buffers.length)
                                return E.a.error("FlvCacher.popFront error no buffers, size:" + this.size + " not eq 0"),
                                this.reset(),
                                null;
                            if (this.size <= ua.TAG_HEADER_LEN + ua.PREV_TAG_SIZE_LEN)
                                return null;
                            var t = (this.getByte(1) << 16) + (this.getByte(2) << 8) + this.getByte(3)
                              , e = ua.TAG_HEADER_LEN + t + ua.PREV_TAG_SIZE_LEN;
                            if (this.size < e)
                                return null;
                            if (1 === this.buffers.length) {
                                if (this.buffers[0].length === e)
                                    return this.size -= e,
                                    this.buffers.shift();
                                var i = this.buffers[0].slice(0, e);
                                return this.buffers[0] = this.buffers[0].slice(e),
                                this.size -= e,
                                i
                            }
                            for (var s, a = new Uint8Array(e), r = 0, n = 0; r < e; ) {
                                var o = e - r;
                                if (this.buffers[0].length > o) {
                                    s = this.buffers[0].slice(0, o),
                                    a.set(s, n),
                                    n += o,
                                    r += o,
                                    this.buffers[0] = this.buffers[0].slice(o),
                                    this.size -= o;
                                    break
                                }
                                s = this.buffers.shift(),
                                a.set(s, n),
                                n += s.length,
                                r += s.length,
                                this.size -= s.length
                            }
                            return a
                        }
                    }]),
                    t
                }(), Ps = (gs = new ArrayBuffer(2),
                new DataView(gs).setInt16(0, 256, !0),
                256 === new Int16Array(gs)[0]), ks = function() {
                    function t() {
                        Object(p.a)(this, t)
                    }
                    return Object(m.a)(t, null, [{
                        key: "parseObject",
                        value: function(e, i, s) {
                            var a = t.parseString(e, i)
                              , r = t.parseScript(e, i + a.size);
                            return {
                                data: {
                                    name: a.data,
                                    value: r.data
                                },
                                size: r.size
                            }
                        }
                    }, {
                        key: "parseVariable",
                        value: function(e, i, s) {
                            return t.parseObject(e, i, s)
                        }
                    }, {
                        key: "parseDate",
                        value: function(t, e, i) {
                            if (i < 10)
                                throw new Error("Data size invalid when parse Date");
                            var s = new DataView(t,e)
                              , a = s.getFloat64(0, !Ps)
                              , r = s.getInt16(8, !Ps);
                            return {
                                data: new Date(a += 60 * r * 1e3),
                                size: 10
                            }
                        }
                    }, {
                        key: "parseString",
                        value: function(t, e) {
                            var i = new DataView(t,e)
                              , s = i.getUint16(0, !Ps)
                              , a = "";
                            if (s > 0)
                                for (var r = 0; r < s; r++)
                                    a += String.fromCharCode(i.getUint8(r + 2));
                            return {
                                data: a,
                                size: 2 + s
                            }
                        }
                    }, {
                        key: "parseMetadata",
                        value: function(e) {
                            var i = t.parseScript(e, 0);
                            return t.parseScript(e, i.size, e.length - i.size)
                        }
                    }, {
                        key: "parseScript",
                        value: function(e, i, s) {
                            var a = i
                              , r = new Uint8Array(e).buffer
                              , n = new DataView(r,0,s)
                              , o = null
                              , u = n.getUint8(a);
                            switch (a += 1,
                            u) {
                            case 0:
                                o = n.getFloat64(a, !Ps),
                                a += 8;
                                break;
                            case 1:
                                o = !!n.getUint8(a),
                                a += 1;
                                break;
                            case 2:
                                var h = t.parseString(r, a);
                                o = h.data,
                                a += h.size;
                                break;
                            case 3:
                                for (o = {}; a < s - 3; ) {
                                    var l = t.parseObject(r, a, s - i);
                                    if (o[l.data.name] = l.data.value,
                                    a = l.size,
                                    0 === n.getUint8(a) && 0 === n.getUint8(a + 1) && 9 === n.getUint8(a + 2)) {
                                        a += 3;
                                        break
                                    }
                                }
                                break;
                            case 8:
                                for (o = {},
                                a += 4; a < s - 8; ) {
                                    var c = t.parseVariable(r, a);
                                    o[c.data.name] = c.data.value,
                                    a = c.size
                                }
                                a <= s - 3 && 9 == (16777215 & n.getUint32(a - 1, !Ps)) && (a += 3);
                                break;
                            case 10:
                                o = [];
                                var d = n.getUint32(a, !Ps);
                                a += 4;
                                for (var f = 0; f < d; f++) {
                                    var p = t.parseScript(r, a);
                                    o.push(p.data),
                                    a = p.size
                                }
                                break;
                            case 11:
                                var m = t.parseDate(r, a + 1, s - 1);
                                o = m.data,
                                a += m.size;
                                break;
                            case 12:
                                var y = t.parseString(r, a + 1);
                                o = y.data,
                                a += y.size;
                                break;
                            default:
                                a = s,
                                console.log("AMF", "Unsupported AMF value type " + u)
                            }
                            return {
                                data: o,
                                size: a
                            }
                        }
                    }, {
                        key: "getStr",
                        value: function(t, e, i) {
                            for (var s = "", a = 0; a < i; a++)
                                s += String.fromCharCode(t[e++]);
                            return s
                        }
                    }]),
                    t
                }(), Es = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.listeners = {}
                    }
                    return Object(m.a)(t, [{
                        key: "clear",
                        value: function() {
                            this.listeners = {}
                        }
                    }, {
                        key: "has",
                        value: function(t, e, i) {
                            var s = this.listeners[t];
                            if (!s)
                                return !1;
                            for (var a = 0, r = s.length; a < r; a++) {
                                var n = s[a];
                                if (n.callback == e && n.thisObj == i)
                                    return !0
                            }
                            return !1
                        }
                    }, {
                        key: "on",
                        value: function(t, e, i, s) {
                            if (!this.has(t, e, i)) {
                                var a = this.listeners[t] || [];
                                a.push({
                                    priority: s || 0,
                                    callback: e,
                                    thisObj: i,
                                    bindCallback: i ? e.bind(i) : e
                                }),
                                a.sort((function(t, e) {
                                    return e.priority - t.priority
                                }
                                )),
                                this.listeners[t] = a
                            }
                        }
                    }, {
                        key: "off",
                        value: function(t, e, i) {
                            var s = this.listeners[t];
                            if (s)
                                for (var a = s.length - 1; a >= 0; a--) {
                                    var r = s[a];
                                    if (r.callback == e && r.thisObj == i)
                                        return void s.splice(a, 1)
                                }
                        }
                    }, {
                        key: "trigger",
                        value: function(t, e) {
                            var i = this.listeners[t];
                            if (i)
                                for (var s = i.length - 1; s >= 0; s--)
                                    (0,
                                    i[s].bindCallback)(e)
                        }
                    }]),
                    t
                }(), Is = i(23), bs = i(9), Cs = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i() {
                        var t;
                        return Object(p.a)(this, i),
                        (t = e.call(this)).printProtocol = !!Number(localStorage._printProtocol),
                        t
                    }
                    return Object(m.a)(i, [{
                        key: "onData",
                        value: function(t, e) {
                            var i = this.unmarshall(t, e);
                            this.trigger(t, i)
                        }
                    }, {
                        key: "unmarshall",
                        value: function(t, e) {
                            var i = new Is.a(e)
                              , s = bs.a[t]
                              , a = i
                              , r = null;
                            try {
                                r = this.getClass(s)
                            } catch (e) {
                                E.a.warn("%c[x] Unmatched protocol ".concat(t >> 8, " ").concat(s), "color:red;background:#FFF0F0")
                            }
                            return r && (void 0 === (a = new r).unmarshall ? E.a.error("[x]" + s + ".unmarshall undefined!") : a.unmarshall(i)),
                            this.printProtocol && !ws[s] && E.a.debug("%c<<<<< " + s, "font-weight:900;color:#0000E3", a),
                            a
                        }
                    }, {
                        key: "getClass",
                        value: function(t) {
                            return null
                        }
                    }]),
                    i
                }(Es), ws = {
                    PCdnProxyPing: 1,
                    PCdnProxyPingRes: 1,
                    PP2pSliceAudioData: 1,
                    PP2pSliceVideoData: 1,
                    PP2pSliceControlData: 1,
                    PCdnP2pGetNode: 1,
                    PCdnP2pGetNodeRes: 1,
                    P2POffer: 1,
                    P2PAnswer: 1,
                    P2PCandidate: 1,
                    P2POfferReject: 1,
                    P2PRequestOffer: 1,
                    PCdnP2PWSForward: 1,
                    PCdnP2PWSForwardReject: 1,
                    PCdnP2pReportLog: 1,
                    PCDNSubscribeReq: 1,
                    PCDNSubscribeRes: 1,
                    PCDNCompeteSubscribeReq: 1,
                    PCDNCompeteSubscribeRes: 1,
                    P2PPunchBackReq: 1,
                    P2PPunchBackRsp: 1,
                    HuyaDelaySeiData: 1
                }, As = Cs, Rs = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.osTime = 0,
                        this.syncLocalTime = 0,
                        this.rttList = []
                    }
                    return Object(m.a)(t, [{
                        key: "convertToSrvTime",
                        value: function(t) {
                            if (0 === this.osTime)
                                return 0;
                            var e = t - this.osTime;
                            return this.syncLocalTime + e
                        }
                    }, {
                        key: "isFinishNtp",
                        value: function() {
                            return 0 !== this.osTime
                        }
                    }, {
                        key: "ntpProcess",
                        value: function(t, e) {
                            var i = F.a.now()
                              , s = i - t
                              , a = Math.round(e + s / 2);
                            if (0 === this.osTime && 0 === this.syncLocalTime)
                                this.osTime = i,
                                this.syncLocalTime = a,
                                this.rttList.push(s);
                            else if (this.rttList.length < 10)
                                this.osTime = i,
                                this.syncLocalTime = a,
                                this.rttList.push(s);
                            else {
                                for (var r = [], n = 0; n < this.rttList.length; ++n)
                                    r.push(this.rttList[n]);
                                r.sort((function(t, e) {
                                    return t - e
                                }
                                ));
                                for (var o = 0, u = 0; u < 4; ++u)
                                    o += r[u];
                                var h = o >> 2;
                                (4 * s > 3 * h && 4 * s < 5 * h || s > 6e4) && (this.osTime = i,
                                this.syncLocalTime = a),
                                this.rttList.shift(),
                                this.rttList.push(s),
                                r = null
                            }
                        }
                    }]),
                    t
                }(), Ls = i(13).default, Bs = i(26).default, Ds = new (function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._info = new Rs,
                        this._clientTime = 0,
                        this._requestId = 0,
                        this._onWsTimeSyncBind = this._onWsTimeSync.bind(this)
                    }
                    return Object(m.a)(t, [{
                        key: "start",
                        value: function() {
                            this.wsTimeSync(),
                            ls.add(this._onTimer, this, 1e3)
                        }
                    }, {
                        key: "_onTimer",
                        value: function(t, e) {
                            e % 60 == 0 && this.wsTimeSync()
                        }
                    }, {
                        key: "wsTimeSync",
                        value: function() {
                            "" !== L.sGuid && (this._req || (this._req = new Ls.WSTimeSyncReq),
                            this._requestId = Bs.getRequestId(),
                            this._clientTime = F.a.now(),
                            this._req.sGuid = L.sGuid,
                            this._req.lClientTime = this._clientTime,
                            Bs.sendWup("launch", "wsTimeSync", this._req, this._onWsTimeSyncBind, !0, this._requestId))
                        }
                    }, {
                        key: "_onWsTimeSync",
                        value: function(t) {
                            this._info.ntpProcess(this._clientTime, Number(t.lServerTime))
                        }
                    }, {
                        key: "getSyncTime",
                        value: function() {
                            return this._info.convertToSrvTime(F.a.now())
                        }
                    }, {
                        key: "isFinishNtp",
                        value: function() {
                            return this._info.isFinishNtp()
                        }
                    }]),
                    t
                }()), Os = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this._split = e,
                        this._str = ""
                    }
                    return Object(m.a)(t, [{
                        key: "isEmpty",
                        value: function() {
                            return "" === this._str
                        }
                    }, {
                        key: "addStr",
                        value: function(t) {
                            this._str.length > 0 && (this._str += this._split),
                            this._str += t
                        }
                    }, {
                        key: "getStr",
                        value: function() {
                            return this._str
                        }
                    }]),
                    t
                }(), Ms = [72, 85, 89, 65, 58], Fs = [44, 162, 222, 9, 181, 23, 71, 219, 187, 85, 164, 254, 127, 194, 252, 78], Us = {
                    HUMEN: "00000001",
                    DELAY: "00000200",
                    VOLUME: "00000400",
                    IFRAME: "00000600"
                }, Ns = function(t) {
                    Object(Zi.a)(s, t);
                    var e = Object($i.a)(s);
                    function s() {
                        return Object(p.a)(this, s),
                        e.call(this)
                    }
                    return Object(m.a)(s, [{
                        key: "getClass",
                        value: function(t) {
                            return i(38)("./" + t).default
                        }
                    }]),
                    s
                }(As), xs = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this._mse = e,
                        this._protoHandler = new Ns,
                        this._proto = null,
                        this._netDelaySum = 0,
                        this._c2cDelaySum = 0,
                        this._svrDelaySum = 0,
                        this._delayCnt = 0,
                        this._curAnchorDelay = 0,
                        this._offset = 0,
                        this.initDts = 0,
                        this.initSeiDts = 0
                    }
                    return Object(m.a)(t, [{
                        key: "getStat",
                        value: function() {
                            if (0 === this._delayCnt)
                                return null;
                            var t = {
                                fields: {},
                                dims: {}
                            };
                            if (this._delayCnt > 0 && (t.fields[ee] = Math.floor(this._c2cDelaySum / this._delayCnt),
                            t.fields[ie] = Math.floor(this._svrDelaySum / this._delayCnt),
                            t.fields[se] = Math.floor(this._netDelaySum / this._delayCnt),
                            this._proto)) {
                                t.dims[oe] = this._proto.anchorSei.uploadType + "",
                                t.dims[ue] = this._proto.anchorSei.encoderSource + "";
                                var e = new Os(",")
                                  , i = new Os(",")
                                  , s = new Os(",");
                                this._proto.serverSei.serverInfos.forEach((function(t) {
                                    t.enable > 0 && (e.addStr(t.getProxyIdStr() + "-" + t.proxyType),
                                    t.serverDelay > 0 && t.serverDelay < 1e4 && i.addStr(t.proxyType + ":" + t.serverDelay),
                                    t.lastPeriodDelay > 0 && t.lastPeriodDelay < 1e4 && s.addStr(t.proxyType + ":" + t.lastPeriodDelay))
                                }
                                )),
                                e.isEmpty() || (t.dims[re] = e.getStr()),
                                i.isEmpty() || (t.dims[ae] = i.getStr()),
                                s.isEmpty() || (t.dims[ne] = s.getStr())
                            }
                            return this._netDelaySum = 0,
                            this._c2cDelaySum = 0,
                            this._svrDelaySum = 0,
                            this._delayCnt = 0,
                            this._proto = null,
                            t
                        }
                    }, {
                        key: "_record",
                        value: function(t, e) {
                            this._proto = e;
                            var i = Ds.getSyncTime()
                              , s = t - e.serverSei.dtsGapSum - e.anchorSei.frameDts
                              , a = i - e.anchorSei.sendFrameTime - s;
                            if (this.initSeiDts != e.anchorSei.frameDts && (this._mse.offsetDts = t - e.anchorSei.frameDts),
                            this.initSeiDts = e.anchorSei.frameDts,
                            0 < a && a < 3e4) {
                                var r = i - e.anchorSei.caputureTime - s;
                                this._netDelaySum += a,
                                this._c2cDelaySum += r,
                                this._svrDelaySum += a - e.serverSei.delaySum,
                                this._delayCnt++,
                                this._curAnchorDelay = r || this._curAnchorDelay,
                                this._curAnchorDelay > 3e5 && (this._curAnchorDelay = 0),
                                this._mse.setSeiDelay(this._curAnchorDelay)
                            }
                        }
                    }, {
                        key: "parseSei",
                        value: function(e, i, s, a) {
                            if (e += this.initDts,
                            this._offset = 0,
                            s == t.H265_CODEC_TYPE ? (i = this._nalUintExtractRbsp(i),
                            this._offset += 2) : s == t.AV1_CODEC_TYPE || (this._offset += 1),
                            this._getValue(i),
                            this._getValue(i),
                            this._getH265Len(i),
                            this._isHuya(i)) {
                                var r = i.subarray(this._offset)
                                  , n = this._getType(r);
                                a[n] = 1,
                                n === Us.DELAY ? this._parseDelay(e, r) : n === Us.HUMEN ? this._mse.saveH264SeiData(e, r) : n === Us.VOLUME && this._mse.parser && this._mse.parser.parseScriptTagMixAudio && this._mse.parser.parseScriptTagMixAudio(this._getStr(r), e)
                            }
                        }
                    }, {
                        key: "_nalUintExtractRbsp",
                        value: function(t) {
                            for (var e = new Uint8Array(t.length), i = t.length, s = 0, a = 0; s + 2 < i; )
                                t[s] || t[s + 1] || 3 !== t[s + 2] ? e[a++] = t[s++] : (e[a++] = t[s++],
                                e[a++] = t[s++],
                                s++);
                            for (; s < i; )
                                e[a++] = t[s++];
                            return e.subarray(0, a)
                        }
                    }, {
                        key: "_getStr",
                        value: function(t) {
                            for (var e = t.length, i = new Uint8Array(t.length), s = 0; s < e; s++)
                                i[s] = t[s];
                            e = this._getLength(t) + 8 + 16 + 2;
                            for (var a = 26, r = new DataView(i.buffer), n = []; a + 9 <= e; ) {
                                var o = 4294967296 * r.getUint32(a, !1) + r.getUint32(a + 4, !1)
                                  , u = r.getUint8(a + 8);
                                n.push(o + "_" + u),
                                a += 9
                            }
                            return n.join(",")
                        }
                    }, {
                        key: "_getLength",
                        value: function(t) {
                            for (var e = "", i = 9; i < 26; i++)
                                e += String.fromCharCode(t[i]);
                            return parseInt(e)
                        }
                    }, {
                        key: "_getValue",
                        value: function(t) {
                            for (var e = 0, i = t.length; this._offset < i; ) {
                                if (e += t[this._offset],
                                255 !== t[this._offset]) {
                                    this._offset++;
                                    break
                                }
                                this._offset++
                            }
                            return e
                        }
                    }, {
                        key: "_parseDelay",
                        value: function(t, e) {
                            if (Ds.isFinishNtp())
                                for (var i = this._decodeData(e), s = i.length, a = new DataView(i.buffer), r = 0; r + 10 < s; ) {
                                    var n = a.getUint32(r, !0)
                                      , o = a.getUint32(r + 4, !0);
                                    if (0 === n || n > s)
                                        break;
                                    if (o === bs.a.HuyaDelaySeiData) {
                                        var u = new DataView(i.buffer,r,n)
                                          , h = this._protoHandler.unmarshall(o, u);
                                        this._record(t, h)
                                    }
                                    r += n
                                }
                        }
                    }, {
                        key: "_decodeData",
                        value: function(t) {
                            for (var e = this._decodeBase64(t), i = e.length, s = new Uint8Array(i), a = 0; a < i; a++)
                                s[a] = e.charCodeAt(a);
                            return s
                        }
                    }, {
                        key: "_decodeBase64",
                        value: function(t) {
                            for (var e = "", i = this._getPayloadLen(t), s = 0; s < i; s++)
                                e += String.fromCharCode(t[s + 26]);
                            return atob(e)
                        }
                    }, {
                        key: "_getPayloadLen",
                        value: function(t) {
                            for (var e = "", i = 0; i < 16; i++)
                                e += String.fromCharCode(t[i + 9]);
                            return parseInt(e)
                        }
                    }, {
                        key: "_getType",
                        value: function(t) {
                            for (var e = "", i = 0; i < 8; i++)
                                e += String.fromCharCode(t[i]);
                            return e
                        }
                    }, {
                        key: "_getH265Len",
                        value: function(t) {
                            for (var e = 0, i = 0; i < 16 && t[this._offset] === Fs[i]; i++)
                                this._offset++,
                                e++;
                            return e
                        }
                    }, {
                        key: "_isHuya",
                        value: function(t) {
                            for (var e = 0; e < 5; e++) {
                                if (t[this._offset] !== Ms[e])
                                    return !1;
                                this._offset++
                            }
                            return !0
                        }
                    }]),
                    t
                }();
                xs.H264_CODEC_TYPE = 0,
                xs.H265_CODEC_TYPE = 1,
                xs.AV1_CODEC_TYPE = 2,
                xs.SEI_TYPES = Us;
                var Vs = xs
                  , Hs = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this._bytes = e,
                        this._bitIndex = 0,
                        this._bitLen = 8 * e.byteLength
                    }
                    return Object(m.a)(t, [{
                        key: "getBits",
                        value: function(t) {
                            var e = Math.floor(this._bitIndex / 8)
                              , i = 8 - this._bitIndex % 8
                              , s = this._bytes[e] & (1 << i) - 1;
                            if (t <= i)
                                return this._bitIndex += t,
                                s >>> i - t;
                            var a = t - i;
                            return this._bitIndex += i,
                            (s << a | this.getBits(a)) >>> 0
                        }
                    }, {
                        key: "skipBits",
                        value: function(t) {
                            this._bitIndex += t
                        }
                    }, {
                        key: "getBytes",
                        value: function(t) {
                            if (this._bitIndex % 8 != 0)
                                throw new Error("can't get bytes from mid-byte: bit index=" + this._bitIndex);
                            var e = Math.floor(this._bitIndex / 8);
                            return this._bitIndex += 8 * t,
                            this._bytes.subarray(e, e + t)
                        }
                    }, {
                        key: "bytePosition",
                        get: function() {
                            return Math.floor(this._bitIndex / 8)
                        }
                    }, {
                        key: "bitposition",
                        get: function() {
                            return this._bitIndex
                        }
                    }]),
                    t
                }()
                  , Gs = function() {
                    function t() {
                        Object(p.a)(this, t)
                    }
                    return Object(m.a)(t, null, [{
                        key: "leb128",
                        value: function(t) {
                            for (var e = 0, i = 0; i < 8; i++) {
                                var s = t.getBits(8);
                                if (e |= (127 & s) << 7 * i,
                                !(128 & s))
                                    break
                            }
                            return e
                        }
                    }, {
                        key: "parseOBUHeader",
                        value: function(t) {
                            var e = {}
                              , i = t.bits;
                            return e.obu_forbidden_bit = i.getBits(1),
                            e.obu_type = i.getBits(4),
                            e.obu_extension_flag = i.getBits(1),
                            e.obu_has_size_field = i.getBits(1),
                            e.obu_reserved_1bit = i.getBits(1),
                            1 == e.obu_extension_flag && (e.temporal_id = i.getBits(3),
                            e.spatial_id = i.getBits(2),
                            e.extension_header_reserved_3bits = i.getBits(3)),
                            e
                        }
                    }, {
                        key: "uvlc",
                        value: function(t) {
                            for (var e = 0; !t.getBits(1); )
                                ++e;
                            return e >= 32 ? 0 : t.getBits(e) + (1 << e) - 1
                        }
                    }, {
                        key: "color_config",
                        value: function(e) {
                            var i = {};
                            return i.high_bitdepth = e.getBits(1),
                            2 == i.seq_profile && i.high_bitdepth ? (i.twelve_bit = e.getBits(1),
                            i.BitDepth = i.twelve_bit ? 12 : 10) : i.BitDepth = i.high_bitdepth ? 10 : 8,
                            1 == i.seq_profile ? i.mono_chrome = 0 : i.mono_chrome = e.getBits(1),
                            i.color_description_present_flag = e.getBits(1),
                            i.color_description_present_flag ? (i.color_primaries = e.getBits(8),
                            i.transfer_characteristics = e.getBits(8),
                            i.matrix_coefficients = e.getBits(8)) : (i.color_primaries = t.CP_UNSPECIFIED,
                            i.transfer_characteristics = t.TC_UNSPECIFIED,
                            i.matrix_coefficients = t.MC_UNSPECIFIED),
                            i.mono_chrome ? (i.color_range = e.getBits(1),
                            i.subsampling_x = 1,
                            i.subsampling_y = 1,
                            i.chroma_sample_position = t.CSP_UNKNOWN,
                            i.separate_uv_delta_q = 0,
                            i) : (i.color_primaries == t.CP_BT_709 && i.transfer_characteristics == t.TC_SRGB && i.matrix_coefficients == t.MC_IDENTITY ? (i.color_range = 1,
                            i.subsampling_x = 0,
                            i.subsampling_y = 0) : (i.color_range = e.getBits(1),
                            0 == i.seq_profile ? (i.subsampling_x = 1,
                            i.subsampling_y = 1) : 1 == i.seq_profile ? (i.subsampling_x = 0,
                            i.subsampling_y = 0) : 12 == i.BitDepth ? (i.subsampling_x = e.getBits(1),
                            i.subsampling_x ? i.subsampling_y = e.getBits(1) : i.subsampling_y = 0) : (i.subsampling_x = 1,
                            i.subsampling_y = 0),
                            i.subsampling_x && i.subsampling_y && (i.chroma_sample_position = e.getBits(2))),
                            i.separate_uv_delta_q = e.getBits(1),
                            i)
                        }
                    }, {
                        key: "metadata_obu",
                        value: function(e, i) {
                            var s = {}
                              , a = e.bits;
                            if (s.metadata_type = t.leb128(a),
                            s.metadata_type == t.METADATA_TYPE_ITUT_T35) {
                                s.itu_t_t35_country_code = a.getBits(8),
                                255 == s.itu_t_t35_country_code && (s.itu_t_t35_country_code_extension_byte = a.getBits(8));
                                var r = (8 * i - a.bitposition) / 8;
                                s.itu_t_t35_payload_bytes = a.getBytes(r)
                            } else if (s.metadata_type == t.METADATA_TYPE_HDR_CLL)
                                s.max_cll = a.getBits(16),
                                s.max_fall = a.getBits(16);
                            else if (s.metadata_type == t.METADATA_TYPE_HDR_MDCV) {
                                s.primary_chromaticity_x = [],
                                s.primary_chromaticity_y = [];
                                for (var n = 0; n < 3; n++)
                                    s.primary_chromaticity_x[n] = a.getBits(16),
                                    s.primary_chromaticity_y[n] = a.getBits(16);
                                s.white_point_chromaticity_x = a.getBits(16),
                                s.white_point_chromaticity_y = a.getBits(16),
                                s.luminance_max = a.getBits(32),
                                s.luminance_min = a.getBits(32)
                            } else if (s.metadata_type == t.METADATA_TYPE_SCALABILITY) {
                                if (s.scalability_mode_idc = a.getBits(8),
                                s.scalability_mode_idc == t.SCALABILITY_SS) {
                                    if (s.spatial_layers_cnt_minus_1 = a.getBits(2),
                                    s.spatial_layer_dimensions_present_flag = a.getBits(1),
                                    s.spatial_layer_description_present_flag = a.getBits(1),
                                    s.temporal_group_description_present_flag = a.getBits(1),
                                    s.scalability_structure_reserved_3bits = a.getBits(3),
                                    s.spatial_layer_dimensions_present_flag)
                                        for (var o = 0; o <= s.spatial_layers_cnt_minus_1; o++)
                                            s.spatial_layer_max_width[o] = a.getBits(16),
                                            s.spatial_layer_max_height[o] = a.getBits(16);
                                    if (s.spatial_layer_description_present_flag)
                                        for (var u = 0; u <= s.spatial_layers_cnt_minus_1; u++)
                                            s.spatial_layer_ref_id[u] = a.getBits(8);
                                    if (s.temporal_group_description_present_flag) {
                                        s.temporal_group_size = a.getBits(8);
                                        for (var h = 0; h < s.temporal_group_size; h++) {
                                            s.temporal_group_temporal_id[h] = a.getBits(3),
                                            s.temporal_group_temporal_switching_up_point_flag[h] = a.getBits(1),
                                            s.temporal_group_spatial_switching_up_point_flag[h] = a.getBits(1),
                                            s.temporal_group_ref_cnt[h] = a.getBits(3);
                                            for (var l = 0; l < temporal_group_ref_cnt[h]; l++)
                                                s.temporal_group_ref_pic_diff[h][l] = a.getBits(8)
                                        }
                                    }
                                }
                            } else
                                s.metadata_type == t.METADATA_TYPE_TIMECODE && (s.counting_type = a.getBits(5),
                                s.full_timestamp_flag = a.getBits(1),
                                s.discontinuity_flag = a.getBits(1),
                                s.cnt_dropped_flag = a.getBits(1),
                                s.n_frames = a.getBits(9),
                                s.full_timestamp_flag ? (s.seconds_value = a.getBits(6),
                                s.minutes_value = a.getBits(6),
                                s.hours_value = a.getBits(5)) : (s.seconds_flag = a.getBits(1),
                                s.seconds_flag && (s.seconds_value = a.getBits(6),
                                s.minutes_flag = a.getBits(1),
                                s.minutes_flag && (s.minutes_value = a.getBits(6),
                                s.hours_flag = a.getBits(1),
                                s.hours_flag && (s.hours_value = a.getBits(5))))),
                                s.time_offset_length = a.getBits(5),
                                s.time_offset_length > 0 && (s.time_offset_value = a.getBits(s.time_offset_length)));
                            return s
                        }
                    }, {
                        key: "sequence_header_obu",
                        value: function(e) {
                            var i = {}
                              , s = e.bits;
                            if (i.seq_profile = s.getBits(3),
                            i.still_picture = s.getBits(1),
                            i.reduced_still_picture_header = s.getBits(1),
                            i.reduced_still_picture_header)
                                i.timing_info_present_flag = 0,
                                i.decoder_model_info_present_flag = 0,
                                i.initial_display_delay_present_flag = 0,
                                i.operating_points_cnt_minus_1 = 0,
                                i["operating_point_idc[0]"] = 0,
                                i["seq_level_idx[0]"] = s.getBits(5),
                                i["seq_tier[0]"] = 0,
                                i["decoder_model_present_for_this_op[0]"] = 0,
                                i["initial_display_delay_present_for_this_op[0]"] = 0;
                            else {
                                i.timing_info_present_flag = s.getBits(1),
                                i.timing_info_present_flag ? (i.num_units_in_display_tick = s.getBits(32),
                                i.time_scale = s.getBits(32),
                                i.equal_picture_interval = s.getBits(1),
                                i.equal_picture_interval && (i.num_ticks_per_picture_minus_1 = t.uvlc(s)),
                                i.decoder_model_info_present_flag = s.getBits(1),
                                i.decoder_model_info_present_flag && (i.buffer_delay_length_minus_1 = s.getBits(5)),
                                i.num_units_in_decoding_tick = s.getBits(32),
                                i.buffer_removal_time_length_minus_1 = s.getBits(5),
                                i.frame_presentation_time_length_minus_1 = s.getBits(5),
                                i.initial_display_delay_present_flag = s.getBits(1),
                                i.operating_points_cnt_minus_1 = s.getBits(5)) : (i.decoder_model_info_present_flag = 0,
                                i.initial_display_delay_present_flag = s.getBits(1),
                                i.operating_points_cnt_minus_1 = s.getBits(5));
                                for (var a = 0; a <= i.operating_points_cnt_minus_1; a++) {
                                    if (i["operating_point_idc[" + a + "]"] = s.getBits(12),
                                    i["seq_level_idx[" + a + "]"] = s.getBits(5),
                                    i["seq_level_idx[" + a + "]"] > 7 ? i["seq_tier[" + a + "]"] = s.getBits(1) : i["seq_tier[" + a + "]"] = 0,
                                    i.decoder_model_info_present_flag) {
                                        if (i["decoder_model_present_for_this_op[" + a + "]"] = s.getBits(1),
                                        i["decoder_model_present_for_this_op[" + a + "]"]) {
                                            var r = i.buffer_delay_length_minus_1 + 1;
                                            i["decoder_buffer_delay[" + a + "]"] = s.getBits(r),
                                            i["encoder_buffer_delay[" + a + "]"] = s.getBits(r),
                                            i["low_delay_mode_flag[" + a + "]"] = s.getBits(1)
                                        }
                                    } else
                                        i["decoder_model_present_for_this_op[" + a + "]"] = 0;
                                    i.initial_display_delay_present_flag && (i["initial_display_delay_present_for_this_op[" + a + "]"] = s.getBits(1)),
                                    i["initial_display_delay_present_for_this_op[" + a + "]"] && (i["initial_display_delay_minus_1[" + a + "]"] = s.getBits(4))
                                }
                            }
                            return i.frame_width_bits_minus_1 = s.getBits(4),
                            i.frame_height_bits_minus_1 = s.getBits(4),
                            i.max_frame_width_minus_1 = s.getBits(i.frame_width_bits_minus_1 + 1),
                            i.max_frame_height_minus_1 = s.getBits(i.frame_height_bits_minus_1 + 1),
                            i.reduced_still_picture_header ? i.frame_id_numbers_present_flag = 0 : i.frame_id_numbers_present_flag = s.getBits(1),
                            i.frame_id_numbers_present_flag && (i.delta_frame_id_length_minus_2 = s.getBits(4),
                            i.additional_frame_id_length_minus_1 = s.getBits(3)),
                            i.use_128x128_superblock = s.getBits(1),
                            i.enable_filter_intra = s.getBits(1),
                            i.enable_intra_edge_filter = s.getBits(1),
                            i.reduced_still_picture_header ? (i.enable_interintra_compound = 0,
                            i.enable_masked_compound = 0,
                            i.enable_warped_motion = 0,
                            i.enable_dual_filter = 0,
                            i.enable_order_hint = 0,
                            i.enable_jnt_comp = 0,
                            i.enable_ref_frame_mvs = 0,
                            i.seq_force_screen_content_tools = t.SELECT_SCREEN_CONTENT_TOOLS,
                            i.seq_force_integer_mv = 1,
                            i["#OrderHintBits"] = 0) : (i.enable_interintra_compound = s.getBits(1),
                            i.enable_masked_compound = s.getBits(1),
                            i.enable_warped_motion = s.getBits(1),
                            i.enable_dual_filter = s.getBits(1),
                            i.enable_order_hint = s.getBits(1),
                            i.enable_order_hint && (i.enable_jnt_comp = s.getBits(1),
                            i.enable_ref_frame_mvs = s.getBits(1)),
                            i.seq_choose_screen_content_tools = s.getBits(1),
                            i.seq_choose_screen_content_tools ? i.seq_force_screen_content_tools = t.SELECT_SCREEN_CONTENT_TOOLS : i.seq_force_screen_content_tools = s.getBits(1),
                            i.seq_force_screen_content_tools > 0 && (i.seq_choose_integer_mv = s.getBits(1),
                            i.seq_choose_integer_mv ? i.seq_force_integer_mv = 1 : i.seq_force_integer_mv = s.getBits(1)),
                            i.enable_order_hint ? (i.order_hint_bits_minus_1 = s.getBits(3),
                            i["#OrderHintBits"] = i.order_hint_bits_minus_1 + 1) : i["#OrderHintBits"] = 0,
                            i.enable_superres = s.getBits(1),
                            i.enable_cdef = s.getBits(1),
                            i.enable_restoration = s.getBits(1),
                            (0,
                            k.default)(i, t.color_config(s)),
                            i.film_grain_params_present = s.getBits(1)),
                            i
                        }
                    }, {
                        key: "parseOBU",
                        value: function(e, i, s, a) {
                            for (var r = {
                                bits: new Hs(e)
                            }, n = 0; e.length - n > 1; ) {
                                var o;
                                1 == (o = t.parseOBUHeader(r)).obu_extension_flag && n++;
                                var u, h = e.length - n;
                                if (u = o.obu_has_size_field ? t.leb128(r.bits) : h - 1 - o.obu_extension_flag,
                                o.obu_type == t.OBU_SEQUENCE_HEADER && s)
                                    s(t.sequence_header_obu(r));
                                else if (o.obu_type == t.OBU_METADATA && a) {
                                    var l = t.metadata_obu(r, r.bits.bytePosition + u);
                                    l.itu_t_t35_payload_bytes && a(i, l)
                                } else
                                    r.bits.skipBits(8 * u);
                                n = r.bits.bytePosition
                            }
                        }
                    }, {
                        key: "zeroPad",
                        value: function(t, e, i) {
                            t || (t = 0),
                            void 0 === i && (i = 10);
                            for (var s = t.toString(i); s.length < e; )
                                s = "0" + s;
                            return s
                        }
                    }]),
                    t
                }();
                Gs.OBU_SEQUENCE_HEADER = 1,
                Gs.OBU_TEMPORAL_DELIMITER = 2,
                Gs.OBU_FRAME_HEADER = 3,
                Gs.OBU_TILE_GROUP = 4,
                Gs.OBU_METADATA = 5,
                Gs.OBU_FRAME = 6,
                Gs.OBU_REDUNDANT_FRAME_HEADER = 7,
                Gs.OBU_TILE_LIST = 8,
                Gs.OBU_PADDING = 15,
                Gs.SELECT_SCREEN_CONTENT_TOOLS = 2,
                Gs.CP_BT_709 = 1,
                Gs.CP_UNSPECIFIED = 2,
                Gs.TC_SRGB = 13,
                Gs.TC_UNSPECIFIED = 2,
                Gs.MC_IDENTITY = 0,
                Gs.MC_UNSPECIFIED = 2,
                Gs.CSP_UNKNOWN = 0,
                Gs.METADATA_TYPE_HDR_CLL = 1,
                Gs.METADATA_TYPE_HDR_MDCV = 2,
                Gs.METADATA_TYPE_SCALABILITY = 3,
                Gs.METADATA_TYPE_ITUT_T35 = 4,
                Gs.METADATA_TYPE_TIMECODE = 5,
                Gs.SCALABILITY_SS = 14;
                var js = Gs
                  , Ys = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.type = -1,
                        this.sn = 0,
                        this.samples = [],
                        this.firstDts = 0,
                        this.playDts = 0,
                        this.lastSampleDts = 0
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.samples = []
                        }
                    }, {
                        key: "clear",
                        value: function() {
                            this.samples = [],
                            this.firstDts = 0,
                            this.playDts = 0,
                            this.lastSampleDts = 0
                        }
                    }, {
                        key: "addSample",
                        value: function(t) {
                            if (this.lastSampleDts > 0) {
                                var e = t.ts - this.lastSampleDts;
                                (e > 100 || e < -100) && E.a.warn("BufferFrame.addSample type=".concat(this.type, " dis=").concat(e, " lastDts=").concat(this.lastSampleDts, " curDts=").concat(t.ts))
                            }
                            return this.lastSampleDts = t.ts,
                            this.samples.push(t),
                            this._setFirstDts(t.ts),
                            this.setPlayDts(t.ts),
                            t.ts - this.playDts
                        }
                    }, {
                        key: "_setFirstDts",
                        value: function(t) {
                            0 === this.firstDts && (this.firstDts = t)
                        }
                    }, {
                        key: "setPlayDts",
                        value: function(t) {
                            0 === this.playDts && (this.playDts = t)
                        }
                    }, {
                        key: "_createTrack",
                        value: function(e) {
                            return {
                                type: e,
                                id: e === t.TYPES.video ? 1 : 2,
                                sn: 0,
                                samples: [],
                                len: 0,
                                duration: 0,
                                startDts: -1,
                                endDts: 0,
                                naluCnt: 0
                            }
                        }
                    }, {
                        key: "getTrack",
                        value: function(t) {
                            var e = this._createTrack(this.type)
                              , i = this._fillTrack(e, t);
                            return i > 0 && this.samples.splice(0, i),
                            e.endDts > 0 && (e.sn = this.sn,
                            this.sn++),
                            e
                        }
                    }, {
                        key: "_fillTrack",
                        value: function(t, e) {
                            return 0
                        }
                    }, {
                        key: "_addTrack",
                        value: function(t, e) {
                            t.samples.push(e),
                            -1 === t.startDts && (t.startDts = e.ts),
                            t.endDts = e.ts,
                            e.av1Bytes && (t.bytes = e.av1Bytes)
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            var t = this.samples.length;
                            if (t > 1) {
                                var e = this.samples[0];
                                return this.samples[t - 1].ts - e.ts
                            }
                            return 0
                        }
                    }, {
                        key: "getSize",
                        value: function() {
                            return this.samples.length
                        }
                    }]),
                    t
                }();
                Ys.TYPES = {
                    video: "video",
                    audio: "audio"
                };
                var Ws = Ys
                  , qs = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i() {
                        var t;
                        return Object(p.a)(this, i),
                        (t = e.call(this)).type = Ws.TYPES.video,
                        t
                    }
                    return Object(m.a)(i, [{
                        key: "_fillTrack",
                        value: function(t, e) {
                            for (var i = 0, s = this.samples.length, a = this.playDts + e, r = 0; r < s; r++) {
                                var n = this.samples[r];
                                if (n.ts >= a) {
                                    t.endDts = n.ts;
                                    break
                                }
                                i++,
                                this._addTrack(t, n)
                            }
                            return t.endDts > 0 && (this.playDts = t.endDts),
                            i
                        }
                    }, {
                        key: "_addTrack",
                        value: function(t, e) {
                            Qi(Object(Ji.a)(i.prototype), "_addTrack", this).call(this, t, e),
                            t.naluCnt += e.units.length,
                            t.len += e.len
                        }
                    }]),
                    i
                }(Ws)
                  , Ks = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i() {
                        var t;
                        return Object(p.a)(this, i),
                        (t = e.call(this)).type = Ws.TYPES.audio,
                        t.needEmptyAudioFrame = !0,
                        t.isPureAudio = !1,
                        t.lastAacTs = 0,
                        t.audioObjectType = 5,
                        t.audioChannelCount = 1,
                        t.audioSampleRate = 22050,
                        t.aacTimeLen = 1024e3 / t.audioSampleRate,
                        t
                    }
                    return Object(m.a)(i, [{
                        key: "_setFirstDts",
                        value: function(t) {
                            this.playDts > 0 && 0 === this.firstDts && t > this.playDts && t - this.playDts < this.aacTimeLen && (E.a.log("BufferFrameAudio._setFirstDts reset playDts ".concat(this.playDts, " to ").concat(t)),
                            this.playDts = t),
                            Qi(Object(Ji.a)(i.prototype), "_setFirstDts", this).call(this, t)
                        }
                    }, {
                        key: "_fillTrack",
                        value: function(t, e) {
                            for (var i = e, s = this.playDts, a = 0, r = 0, n = 0, o = this.samples.length, u = 0; s < i; s += this.aacTimeLen) {
                                var h = this.samples[a];
                                if (u = Math.round(s),
                                h && h.ts <= u) {
                                    if (a++,
                                    n++,
                                    this._fixDts(h, u),
                                    this._addTrack(t, h),
                                    a >= o) {
                                        s += this.aacTimeLen;
                                        break
                                    }
                                } else if (!this.isPureAudio && this.needEmptyAudioFrame) {
                                    r++;
                                    var l = {
                                        unit: null,
                                        pts: 0,
                                        dts: 0,
                                        ts: 0
                                    };
                                    22050 === this.audioSampleRate && 2 === this.audioObjectType ? l.unit = new Uint8Array(vs.emptyAacFrame) : l.unit = vs.getSilentFrame(this.audioObjectType, this.audioChannelCount),
                                    this._fixDts(l, u),
                                    this._addTrack(t, l)
                                }
                            }
                            return this.playDts = s,
                            r > 0 && E.a.log("BufferFrameAudio add empty frames ".concat(r)),
                            n
                        }
                    }, {
                        key: "_fixDts",
                        value: function(t, e) {
                            t.pts = t.dts = 90 * e,
                            t.ts = e
                        }
                    }, {
                        key: "_addTrack",
                        value: function(t, e) {
                            Qi(Object(Ji.a)(i.prototype), "_addTrack", this).call(this, t, e),
                            t.len += e.unit.length
                        }
                    }]),
                    i
                }(Ws)
                  , zs = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this.popSize = e.bufferSize + e.popDuration,
                        this.waitSize = e.waitSize,
                        this.popDuration = e.popDuration,
                        this.timescale = e.timescale,
                        this.isPureAudio = e.isPureAudio,
                        this.remuxCb = i,
                        this.avcChange = !1,
                        this.inited = !0,
                        this.hasOriginIFrame = !1,
                        this.gop = M.maxGop,
                        this.lastKeyFrameDts = 0,
                        this.paused = !1,
                        this.videoConfig = {
                            isHevc: !1,
                            vps: null,
                            sps: null,
                            pps: null,
                            codec: "",
                            width: 0,
                            height: 0
                        },
                        this.audioConfig = {
                            config: null,
                            codec: "mp4a.40.5",
                            audioSampleRate: 22050,
                            aacTimeLen: 1024e3 / 22050,
                            audioObjectType: 5,
                            audioChannelCount: 1
                        },
                        this.vBuffer = new qs,
                        this.aBuffer = new Ks
                    }
                    return Object(m.a)(t, [{
                        key: "_updateGop",
                        value: function(t) {
                            !t.key || this.hasOriginIFrame && !t.origin_iframe || (this.lastKeyFrameDts > 0 && (this.gop = Math.min(M.maxGop, t.ts - this.lastKeyFrameDts)),
                            this.lastKeyFrameDts = t.ts)
                        }
                    }, {
                        key: "updateVideoConfig",
                        value: function(t, e) {
                            this.videoConfig = t,
                            this.avcChange = e
                        }
                    }, {
                        key: "updateAudioConfig",
                        value: function(t) {
                            this.audioConfig = t,
                            this.aBuffer.audioSampleRate = t.audiosamplerate,
                            this.aBuffer.aacTimeLen = t.aacTimeLen,
                            this.aBuffer.audioObjectType = t.audioObjectType,
                            this.aBuffer.audioChannelCount = t.audioChannelCount
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.remuxCb = null,
                            this.vBuffer.destroy(),
                            this.aBuffer.destroy()
                        }
                    }, {
                        key: "addSample",
                        value: function(e) {
                            this.inited = !1,
                            e.type === t.TYPES.avc || e.type === t.TYPES.av01 ? this._addSampleVideo(e) : e.type === t.TYPES.aac && this._addSmapleAudio(e)
                        }
                    }, {
                        key: "_addSampleVideo",
                        value: function(t) {
                            t.key && t.origin_iframe && !this.hasOriginIFrame && (E.a.log("BufferAv.addSampleVideo find origin_iframe! isIframe=".concat(t.key)),
                            this.hasOriginIFrame = !0),
                            !t.key && t.origin_iframe && E.a.warn("BufferAv.addSampleVideo find origin_iframe sei not in iframe"),
                            this.aBuffer.setPlayDts(t.ts),
                            this._updateGop(t);
                            var e = this.vBuffer.addSample(t);
                            !this.paused && e > this.popSize && (e > this.waitSize || this.aBuffer.getSize() > 0) && this.popBuffer(this.popDuration)
                        }
                    }, {
                        key: "_addSmapleAudio",
                        value: function(t) {
                            var e = this.aBuffer.addSample(t);
                            !this.paused && this.isPureAudio && e > this.popSize && this.popBuffer(this.popDuration)
                        }
                    }, {
                        key: "popBuffer",
                        value: function(t) {
                            var e = this.vBuffer.getTrack(t);
                            e && (0 === e.sn || this.avcChange) && (0,
                            k.default)(e, this.videoConfig),
                            e.timescale = this.timescale,
                            e.duration = Math.round((e.endDts - e.startDts) * (this.timescale / 1e3)),
                            this.avcChange = !1;
                            var i = null;
                            (i = this.isPureAudio ? this.aBuffer.getTrack(this.aBuffer.playDts + t) : this.aBuffer.getTrack(e.endDts)).config = this.audioConfig.config,
                            i.audiosamplerate = this.audioConfig.audiosamplerate,
                            i.channelCount = this.audioConfig.channelCount,
                            i.codec = this.audioConfig.codec,
                            i.timescale = this.timescale,
                            i.duration = Math.round((i.endDts - i.startDts) * (this.timescale / 1e3)),
                            this.remuxCb && this.remuxCb(e, i)
                        }
                    }, {
                        key: "clearBuffer",
                        value: function() {
                            this.vBuffer.clear(),
                            this.aBuffer.clear()
                        }
                    }, {
                        key: "setNeedEmptyAudioFrame",
                        value: function(t) {
                            this.aBuffer.needEmptyAudioFrame = t
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return this.isPureAudio ? this.aBuffer.getBufferLen() : this.vBuffer.getBufferLen()
                        }
                    }, {
                        key: "getSize",
                        value: function() {
                            return this.vBuffer.getSize()
                        }
                    }]),
                    t
                }();
                zs.TYPES = {
                    avc: "avc",
                    av01: "av01",
                    aac: "aac"
                };
                var Xs = zs
                  , Js = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.list = [],
                        this.switchIFrameDts = 0,
                        this.switchIFramePts = 0,
                        this.lastIFrameDts = 0,
                        this.lastIFRamePts = 0
                    }
                    return Object(m.a)(t, [{
                        key: "getDts",
                        value: function() {
                            return this.switchIFrameDts || this.lastIFrameDts
                        }
                    }, {
                        key: "getPts",
                        value: function() {
                            return this.switchIFramePts || this.lastIFRamePts
                        }
                    }, {
                        key: "setSwitchTs",
                        value: function(t, e) {
                            this.switchIFrameDts = t,
                            this.switchIFramePts = e
                        }
                    }, {
                        key: "setLastTs",
                        value: function(t, e) {
                            this.lastIFrameDts = t,
                            this.lastIFRamePts = e
                        }
                    }, {
                        key: "resetPtsSample",
                        value: function() {
                            this.list = []
                        }
                    }, {
                        key: "addPtsSample",
                        value: function(t, e, i, s, a, r) {
                            this.list.push({
                                dts: t,
                                pts: e,
                                dtsGap: i,
                                ptsGap: s,
                                hasOrigin: a,
                                isOrigin: r
                            })
                        }
                    }, {
                        key: "getMetric",
                        value: function() {
                            var t = [0, 0, 0]
                              , e = [0, 0];
                            if (this.list.length > 0) {
                                var i = this.list[0]
                                  , s = this.list[this.list.length - 1];
                                t[0] = i.dtsGap,
                                t[1] = i.ptsGap,
                                t[2] = this.list.length,
                                t[3] = 0,
                                t[4] = s.ptsGap,
                                e[0] = s.hasOrigin ? 1 : 2,
                                e[1] = s.isOrigin ? 1 : 2,
                                e[2] = 0
                            }
                            return {
                                values: t,
                                strs: e
                            }
                        }
                    }]),
                    t
                }()
                  , Qs = 0
                  , Zs = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this.config = e,
                        this.remuxCb = i,
                        this.hasVideoConfig = !1,
                        this.needEmptyAudioFrame = !0,
                        this.timescale = 9e4,
                        this.hasFrame = !1,
                        this.state = 0,
                        this.switchTs = new Js,
                        this.avBuffer = this._createBuffer(),
                        this.evalBw = null,
                        this.callbacks = null,
                        this._buffered = null,
                        this.id = Qs++,
                        E.a.log("CtrlBuffer.constructor(".concat(this.id, ")")),
                        this._curFrameId = 0
                    }
                    return Object(m.a)(t, [{
                        key: "setCurFrameId",
                        value: function(t) {
                            this._curFrameId = t
                        }
                    }, {
                        key: "setBuffered",
                        value: function(t) {
                            this._buffered = t
                        }
                    }, {
                        key: "addBuffered",
                        value: function(t, e, i) {
                            (t.type === Xs.TYPES.avc || t.type === Xs.TYPES.av01 && this._buffered) && this._buffered.addSample(this._curFrameId, t.ts, e, i)
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.remuxCb = null,
                            this.callbacks = null,
                            this._destroyBuffer()
                        }
                    }, {
                        key: "_destroyBuffer",
                        value: function() {
                            this.avBuffer && (this.avBuffer.destroy(),
                            this.avBuffer = null)
                        }
                    }, {
                        key: "_createBuffer",
                        value: function() {
                            this._destroyBuffer();
                            var t = new Xs(this.config,this.remuxCb);
                            return t.timescale = this.timescale,
                            t.setNeedEmptyAudioFrame(this.needEmptyAudioFrame),
                            t
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            this.avBuffer.paused = !0
                        }
                    }, {
                        key: "play",
                        value: function() {
                            this.avBuffer.paused = !1
                        }
                    }, {
                        key: "isPaused",
                        value: function() {
                            return this.avBuffer.paused
                        }
                    }, {
                        key: "isWaitForIFrame",
                        value: function() {
                            return 1 === this.state
                        }
                    }, {
                        key: "switchBitrate",
                        value: function(t, e, i) {
                            E.a.log("CtrlBuffer(".concat(this.id, ").switchBitrate isDown=").concat(t)),
                            this._lastBitrate = e,
                            this._curBitrate = i,
                            this.state = 1
                        }
                    }, {
                        key: "switchBack",
                        value: function() {
                            E.a.log("CtrlBuffer(".concat(this.id, ").switchBack switchIFramePts=").concat(this.switchTs.getDts(), " lastIFramePts=").concat(this.switchTs.getPts())),
                            this.state = 2,
                            this.avBuffer = this._createBuffer(),
                            this.callbacks && this.callbacks.start(this.switchTs.getDts(), this.switchTs.getPts())
                        }
                    }, {
                        key: "setEval",
                        value: function(t) {
                            this.evalBw = t
                        }
                    }, {
                        key: "addSample",
                        value: function(t) {
                            var e = t.key && (!this.avBuffer.hasOriginIFrame || t.origin_iframe);
                            if (e && this.switchTs.setLastTs(t.ts, t.ts + t.cts),
                            t.type !== Xs.TYPES.avc && t.type !== Xs.TYPES.av01 || this.evalBw && this.evalBw.addSample(t),
                            2 === this.state && (this.hasFrame || t.type !== Xs.TYPES.avc && t.type !== Xs.TYPES.av01 || (E.a.log("CtrlBuffer(".concat(this.id, ").addSample first sample dts=").concat(t.ts, " pts=").concat(t.ts + t.cts)),
                            this.hasFrame = !0,
                            this.callbacks && this.callbacks.first())),
                            t.type !== Xs.TYPES.avc && t.type !== Xs.TYPES.av01 || this.hasVideoConfig)
                                if (2 === this.state) {
                                    if (t.key) {
                                        var i = t.ts + t.cts
                                          , s = t.ts - this.switchTs.getDts()
                                          , a = i - this.switchTs.getPts();
                                        E.a.log("CtrlBuffer(".concat(this.id, ").addSample find IFrame origin_iframe=").concat(t.origin_iframe, " dts=").concat(t.ts, " pts=").concat(i, " switchDts=").concat(this.switchTs.switchIFrameDts, " switchPts=").concat(this.switchTs.switchIFramePts, " dtsGap=").concat(s, " ptsGap=").concat(a, " iFrameGap=").concat(this.avBuffer.gop)),
                                        1 === Number(M.autoReportCfg[0]) && 1 === Number(M.autoReportCfg[3]) && a > 0 && (E.a.log("CtrlBuffer.addSample autoReport"),
                                        this.callbacks && this.callbacks.autoReport(Event.P2P_REPORT, 2)),
                                        this.switchTs.addPtsSample(t.ts, i, s, a, this.avBuffer.hasOriginIFrame, t.origin_iframe),
                                        i >= this.switchTs.switchIFramePts && (E.a.log("CtrlBuffer(".concat(this.id, ").addSample find new IFrame, switch done")),
                                        this.state = 0,
                                        this.switchTs.setSwitchTs(0, 0),
                                        this.avBuffer.addSample(t),
                                        this.addBuffered(t, !0, a),
                                        this.callbacks && this.callbacks.done(s, t.ts, a))
                                    }
                                } else
                                    1 === this.state ? e ? (this._popAllBuffer(),
                                    this.avBuffer.hasOriginIFrame = !1,
                                    this.hasVideoConfig = !1,
                                    this.hasFrame = !1,
                                    this.state = 2,
                                    this.switchTs.setSwitchTs(t.ts, t.ts + t.cts),
                                    this.switchTs.resetPtsSample(),
                                    E.a.log("CtrlBuffer(".concat(this.id, ").addSample find next IFrame origin_iframe=").concat(t.origin_iframe, " dts=").concat(this.switchTs.switchIFrameDts, " pts=").concat(this.switchTs.switchIFramePts, " iFrameGap=").concat(this.avBuffer.gop, ", switch start!")),
                                    this.callbacks && this.callbacks.start(this.switchTs.switchIFrameDts, this.switchTs.switchIFramePts)) : (t.key && E.a.log("CtrlBuffer(".concat(this.id, ").addSample find next IFrame fail, origin_iframe=").concat(t.origin_iframe, " dts=").concat(t.ts, " pts=").concat(t.ts + t.cts)),
                                    this.avBuffer.addSample(t),
                                    this.addBuffered(t, !1, 0)) : (this.avBuffer.addSample(t),
                                    this.addBuffered(t, !1, 0))
                        }
                    }, {
                        key: "_popAllBuffer",
                        value: function() {
                            this.avBuffer && (this.avBuffer.getBufferLen() > 0 && this.avBuffer.popBuffer(o.default),
                            this.avBuffer.clearBuffer())
                        }
                    }, {
                        key: "updateVideoConfig",
                        value: function(t, e) {
                            e && this._popAllBuffer(),
                            this.hasVideoConfig = !0,
                            this.avBuffer.updateVideoConfig(t, e)
                        }
                    }, {
                        key: "updateAudioConfig",
                        value: function(t, e) {
                            e && this._popAllBuffer(),
                            this.avBuffer.updateAudioConfig(t)
                        }
                    }, {
                        key: "setNeedEmptyAudioFrame",
                        value: function(t) {
                            this.needEmptyAudioFrame = t,
                            this.avBuffer.setNeedEmptyAudioFrame(t)
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return this.avBuffer.getBufferLen()
                        }
                    }, {
                        key: "getLastIFrameDts",
                        value: function() {
                            return this.switchTs.lastIFrameDts
                        }
                    }, {
                        key: "getSize",
                        value: function() {
                            return this.avBuffer.getSize()
                        }
                    }]),
                    t
                }()
                  , $s = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.hasSample = !1,
                        this.samples = new Ki(e)
                    }
                    return Object(m.a)(t, [{
                        key: "getSamples",
                        value: function() {
                            return this.samples.getSamples()
                        }
                    }, {
                        key: "addCur",
                        value: function(t, e) {
                            this.hasSample = !0
                        }
                    }, {
                        key: "getResult",
                        value: function() {
                            var t = []
                              , e = this.samples.getSamples()
                              , i = e.length;
                            if (i > 0) {
                                t.push("size:" + i);
                                for (var s = 0; s < i; s++)
                                    t.push("".concat(i - s, ":").concat(e[s]))
                            }
                            return t.join(",")
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            var t = this.samples.cur;
                            this.samples.reset(),
                            this.samples.addCur(t)
                        }
                    }]),
                    t
                }()
                  , ta = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i() {
                        var t, s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 100;
                        return Object(p.a)(this, i),
                        (t = e.call(this, s)).lastTs = 0,
                        t
                    }
                    return Object(m.a)(i, [{
                        key: "addCur",
                        value: function(t, e) {
                            Qi(Object(Ji.a)(i.prototype), "addCur", this).call(this, t, e);
                            var s = parseInt(e / 1e3);
                            this.lastTs > 0 && this.lastTs !== s && this.samples.calculate(),
                            this.lastTs = s,
                            this.samples.addCur(t)
                        }
                    }]),
                    i
                }($s)
                  , ea = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.aSample = new ta(20),
                        this.vSample = new ta(20)
                    }
                    return Object(m.a)(t, [{
                        key: "addAudioSample",
                        value: function(t, e) {
                            this.aSample.addCur(t, e)
                        }
                    }, {
                        key: "addVideoSample",
                        value: function(t, e) {
                            this.vSample.addCur(t, e)
                        }
                    }, {
                        key: "getResult",
                        value: function() {
                            var t = []
                              , e = this.aSample.getSamples()
                              , i = this.vSample.getSamples()
                              , s = Math.min(i.length, e.length);
                            if (s > 0) {
                                t.push("size:".concat(s));
                                for (var a = 0; a < s; a++)
                                    t.push("".concat(s - a, ":").concat(i[a] + e[a]))
                            }
                            return t.join(",")
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.aSample.reset(),
                            this.vSample.reset()
                        }
                    }, {
                        key: "recordStat",
                        value: function(t) {
                            var e = this.getResult();
                            "" !== e && (this.reset(),
                            t.setCoreDim(we, e))
                        }
                    }]),
                    t
                }()
                  , ia = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.realFps = 0,
                        this.maxDropCnt = 0,
                        this.curDropCnt = 0,
                        this.startDropDts = 0,
                        this.lastDropDts = 0,
                        this.started = !1,
                        this.dropTime = 0,
                        this.minFps = 1e3
                    }
                    return Object(m.a)(t, [{
                        key: "setConfig",
                        value: function(t) {
                            this.dropTime = t.dropTime || 0;
                            var e = t.minFps || 1e3;
                            this.minFps = Math.max(e, parseInt(2 * this.realFps / 3))
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.realFps = 0,
                            this.maxDropCnt = 0,
                            this.curDropCnt = 0,
                            this.startDropDts = 0,
                            this.lastDropDts = 0,
                            this.started = !1
                        }
                    }, {
                        key: "start",
                        value: function() {
                            E.a.log("DropFrameController.start"),
                            this.started = !0
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.started = !1
                        }
                    }, {
                        key: "setRealFps",
                        value: function(t) {
                            t > 0 && 0 === this.realFps && (this.realFps = t,
                            this.minFps = Math.max(this.minFps, parseInt(2 * t / 3)),
                            this.maxDropCnt = Math.max(0, t - this.minFps),
                            E.a.log("DropFrameController.setRealFps fps=".concat(t, " minFps=").concat(this.minFps, " maxDrop=").concat(this.maxDropCnt)))
                        }
                    }, {
                        key: "isCanDrop",
                        value: function(t, e, i) {
                            return !(!this.started || this.maxDropCnt <= 0 || 0 === this.dropTime) && !e && 0 == (96 & i) && ((0 === this.startDropDts || t - this.startDropDts >= 1e3) && (this.curDropCnt = 0,
                            this.startDropDts = t),
                            this.curDropCnt < this.maxDropCnt && (0 === this.lastDropDts || t - this.lastDropDts >= this.dropTime)) && (this.curDropCnt++,
                            this.lastDropDts = t,
                            !0)
                        }
                    }]),
                    t
                }()
                  , sa = !!Number(localStorage._dropAudio)
                  , aa = !!Number(localStorage._dropVideo)
                  , ra = (Number(localStorage._dropGap),
                function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.lastDts = 0,
                        this.lastPts = 0,
                        this.lastCts = 0,
                        this.dtsStat = [0, 0, 0, 0, 0, 0],
                        this.ptsStat = [0, 0, 0, 0, 0, 0],
                        this.ctsStat = [0, 0, 0, 0, 0, 0],
                        this.playVideoFrameCnt = 0,
                        this.playAudioFrameCnt = 0
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.lastDts = this.lastPts = this.lastCts = 0,
                            this.playVideoFrameCnt = this.playAudioFrameCnt = 0,
                            this.dtsStat = [0, 0, 0, 0, 0, 0],
                            this.ptsStat = [0, 0, 0, 0, 0, 0],
                            this.ctsStat = [0, 0, 0, 0, 0, 0]
                        }
                    }, {
                        key: "setTimeStamp",
                        value: function(t, e, i) {
                            this.addStat(this.dtsStat, this.lastDts, t),
                            this.addStat(this.ptsStat, this.lastPts, e),
                            this.addStat(this.ctsStat, this.lastCts, i),
                            this.lastDts = t,
                            this.lastPts = e,
                            this.lastCts = i
                        }
                    }, {
                        key: "addStat",
                        value: function(t, e, i) {
                            if (e > 0 && i > e) {
                                var s = i - e;
                                s >= 1e3 ? t[4]++ : s >= 800 ? t[3]++ : s >= 600 ? t[2]++ : s >= 400 ? t[1]++ : s >= 200 && t[0]++
                            }
                        }
                    }]),
                    t
                }())
                  , na = [43, 138, 8, 0]
                  , oa = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i(t, s) {
                        var a;
                        return Object(p.a)(this, i),
                        (a = e.call(this)).mse = t,
                        a.remuxer = s,
                        a.flvCacher = new Ts,
                        a.fps = new ds,
                        a.audioFps = new ds,
                        a.sei = new Vs(t),
                        a.avSample = new ea,
                        a.timeStampStat = new ra,
                        a.emptyFrames = 0,
                        a.ctrlBuffer = new Zs({
                            bufferSize: 0,
                            popDuration: 200,
                            timescale: s.timescale,
                            isPureAudio: t.isPureAudio
                        },a._remux.bind(Object(Xi.a)(a))),
                        a.dropFrameCtrl = new ia,
                        a.DEFAULT_GOP = 200,
                        a.bufLen = 400,
                        a.firstBufLen = 400,
                        a.remuxLen = a.firstBufLen,
                        a.maxWaitTime = 2e3,
                        a.pushGop = !1,
                        a.parseFlvHead = !1,
                        a.lengthSizeMinusOne = 0,
                        a.hasRemuxed = !1,
                        a.recvVideoFrameTimeStamp = 0,
                        a.recvVideoFrameNums = 0,
                        a.videoFramePlayDelayTs = 0,
                        a.videoFrameCalculatePlayDelayFrames = 0,
                        a.audioConfig = na.slice(),
                        a.audioSampleRate = 22050,
                        a.aacTimeLen = 1024e3 / a.audioSampleRate,
                        a.validAacTime = 500 * a.aacTimeLen,
                        a.audioChannelCount = 1,
                        a.audioObjectType = 5,
                        a.audioIncreaseTSMap = new v.default,
                        a.firstDemuxAudioTS = -1,
                        a.ctrlBuffer.updateAudioConfig({
                            config: a.audioConfig,
                            codec: "mp4a.40.5",
                            audiosamplerate: a.audioSampleRate,
                            aacTimeLen: a.aacTimeLen,
                            audioObjectType: a.audioObjectType,
                            audioChannelCount: a.audioChannelCount
                        }, !1),
                        a.spsUnit = null,
                        a.ppsUnit = null,
                        a.vpsUnit = null,
                        a.videoConfig = {},
                        a.hasCtsZero = !1,
                        a.paused = !1,
                        a.hasEmptyFrames = !1,
                        a.playVideoFrameCnt = 0,
                        a.playVideoLength = 0,
                        a.playAudioFrameCnt = 0,
                        a.playAudioLength = 0,
                        a.playEmptyAudioFrameCnt = 0,
                        a.beginParseTs = 0,
                        a.hasAudioTag = !1,
                        a.lastAacTs = 0,
                        a.hasKeyFrame = !1,
                        a.lastAudioTs = 0,
                        a.lastVideoTs = 0,
                        a.lastParseDts = 0,
                        a.maxaudioptsList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        a.last10anduiptsList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        a.firstAudioTs = -1,
                        a.showH265Tip = !1,
                        a.appendHighQualityEmptyAudio = !0,
                        a.deleteH264Aud = !1,
                        a.incompleteFlvheaderLen = 0,
                        a.videoFrames = 0,
                        a.audioFrames = 0,
                        a.headCache = null,
                        a.OBUParser = new js,
                        a.seiTypes = {},
                        a.av1Bytes = 0,
                        a.lastDropDts = 0,
                        a.reset(),
                        a.onAV1SequenceHeaderBind = a.onAV1SequenceHeader.bind(Object(Xi.a)(a)),
                        a.onAV1MetaDataBind = a.onAV1MetaData.bind(Object(Xi.a)(a)),
                        a
                    }
                    return Object(m.a)(i, [{
                        key: "printPlayFrameInfo",
                        value: function() {
                            E.a.log("FlvParser.playFrameInfo", this.timeStampStat.playVideoFrameCnt, this.timeStampStat.playAudioFrameCnt)
                        }
                    }, {
                        key: "getLastIFrameDts",
                        value: function() {
                            return this.ctrlBuffer.getLastIFrameDts()
                        }
                    }, {
                        key: "getFrameBufferLen",
                        value: function() {
                            return this.ctrlBuffer.getBufferLen()
                        }
                    }, {
                        key: "getAudioFrames",
                        value: function() {
                            return this.audioFrames
                        }
                    }, {
                        key: "getVideoFrames",
                        value: function() {
                            return this.videoFrames
                        }
                    }, {
                        key: "getFps",
                        value: function() {
                            return this.fps && this.fps.getFps()
                        }
                    }, {
                        key: "getAudioFps",
                        value: function() {
                            return this.audioFps && this.audioFps.getFps()
                        }
                    }, {
                        key: "getFrameReadyed",
                        value: function() {
                            return this.ctrlBuffer.getSize()
                        }
                    }, {
                        key: "setDecoctorTimeAbnormal",
                        value: function() {
                            var t = localStorage.decodeabnormal;
                            if (t && t.split("_").length > 1) {
                                var e = parseInt(t.split("_")[1])
                                  , i = (new Date).getTime() - e;
                                i && i > 864e5 ? (this.appendHighQualityEmptyAudio = !0,
                                localStorage.decodeabnormal = "") : this.appendHighQualityEmptyAudio = !1
                            }
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function(t) {
                            E.a.log("FlvParser.reset"),
                            this.printFirstVideoTs = !1,
                            this.printFirstAudioTs = !1,
                            this.pfvTs = !1,
                            this.pfaTs = !1,
                            this.fps.reset(),
                            this.audioFps.reset(),
                            this.flvCacher.destroy(),
                            this.timeStampStat.reset(),
                            this.dropFrameCtrl.reset(),
                            this.lastParseDts = 0,
                            this.hasAudioTag = !1,
                            this.lastAacTs = 0,
                            this.hasKeyFrame = !1,
                            this.lastAudioTs = 0,
                            this.lastVideoTs = 0,
                            this.lastDropDts = 0,
                            this.showH265Tip = !1,
                            this.bufLen = 400,
                            this.remuxLen = this.firstBufLen,
                            this.hasCtsZero = !1,
                            this.hasRemuxed = !1,
                            this.audioIncreaseTSMap.clear(),
                            this.firstDemuxAudioTS = -1,
                            this.recvVideoFrameTimeStamp = 0,
                            this.recvVideoFrameNums = 0,
                            this.videoFramePlayDelayTs = 0,
                            this.videoFrameCalculatePlayDelayFrames = 0,
                            this.incompleteFlvheaderLen = 0,
                            this.parseFlvHead = !1,
                            this.switchingUrl = !1,
                            this.droppingSample = null,
                            this.decodeIFRTime = 0,
                            this.waitRemuxTime = 0,
                            this.isFirstRemux = !1,
                            this.av1Bytes = 0,
                            this.onAV1SequenceHeaderBind = null,
                            this.onAV1MetaDataBind = null
                        }
                    }, {
                        key: "getPlayStat",
                        value: function() {
                            var t = {
                                videoFrameCnt: this.playVideoFrameCnt,
                                videoLength: this.playVideoLength,
                                audioFrameCnt: this.playAudioFrameCnt,
                                audioLength: this.playAudioLength,
                                emptyAudioFrameCnt: this.playEmptyAudioFrameCnt
                            };
                            return this.playVideoFrameCnt = 0,
                            this.playVideoLength = 0,
                            this.playAudioFrameCnt = 0,
                            this.playAudioLength = 0,
                            this.playEmptyAudioFrameCnt = 0,
                            t
                        }
                    }, {
                        key: "setPaused",
                        value: function(t) {
                            this.paused = t
                        }
                    }, {
                        key: "setPushGop",
                        value: function(t) {
                            this.pushGop = t,
                            E.a.log("FlvParser.setPushGop " + t)
                        }
                    }, {
                        key: "setDeleteH264Aud",
                        value: function(t) {
                            this.deleteH264Aud = t,
                            E.a.log("FlvParser.deleteH264Aud " + t)
                        }
                    }, {
                        key: "setNeedEmptyAudioFrame",
                        value: function(t) {
                            this.ctrlBuffer.setNeedEmptyAudioFrame(t),
                            E.a.log("FlvParser.setNeedEmptyAudioFrame " + t)
                        }
                    }, {
                        key: "getParserBufLen",
                        value: function() {
                            return this.ctrlBuffer.getBufferLen()
                        }
                    }, {
                        key: "setDroppingSample",
                        value: function(t) {
                            this.droppingSample = t
                        }
                    }, {
                        key: "parseFlv",
                        value: function(t) {
                            var e = 0;
                            if (this.headCache) {
                                var s = new Uint8Array(t.length + this.headCache.length);
                                s.set(this.headCache, 0),
                                s.set(t, this.headCache.length),
                                t = s
                            }
                            var a, r = t.length;
                            if (!1 === this.parseFlvHead) {
                                var n = i.FLV_HEADER_LEN + i.PREV_TAG_SIZE_LEN;
                                if (r < n)
                                    return E.a.warn("FlvParser.parseFlv flv has no header len=" + r),
                                    void (this.headCache = t.slice());
                                if (this.headCache = null,
                                e += n,
                                !i.probe(t))
                                    return;
                                this.parseFlvHead = !0,
                                this.beginParseTs = Date.now()
                            }
                            for (0 === e ? this.flvCacher.append(t) : this.flvCacher.append(t.slice(e)); null !== (a = this.flvCacher.popFrame()); )
                                this.parseTag(a)
                        }
                    }, {
                        key: "parseTag",
                        value: function(t) {
                            var e = t.length;
                            if (e < i.TAG_HEADER_LEN + i.PREV_TAG_SIZE_LEN)
                                E.a.warn("FlvParser.parseTag flv has no whole tag len=" + e + " data=" + t);
                            else {
                                var s = 0
                                  , a = t[s++]
                                  , r = (t[s++] << 16) + (t[s++] << 8) + t[s++];
                                if (e - (i.TAG_HEADER_LEN + i.PREV_TAG_SIZE_LEN) < r)
                                    E.a.warn("FlvParser.parseTag flv has no enough data dataLen=" + r + " len=" + e);
                                else if (0 !== r) {
                                    var n = (t[s++] << 16) + (t[s++] << 8) + t[s++] + parseInt(t[s++].toString(16) + "000000", 16);
                                    s += 3,
                                    a === i.VIDEO_TYPE ? (this.avSample.addVideoSample(e, n),
                                    aa || this.mse.isPureAudio || (this.parseVideo(t, 11, r, n),
                                    this.mse.setExceptionStat(Vt.VIDEO_FRAME, 1))) : a === i.AUDIO_TYPE ? (this.avSample.addAudioSample(e, n),
                                    sa || this.mse.isPureVideo || (this.parseAudio(t, 11, r, n),
                                    this.mse.setExceptionStat(Vt.AUDIO_FRAME, 1))) : a === i.SCRIPT_TYPE ? this.parseScriptTag(t, 11, r, n) : (E.a.warn("%cFlvParser.parseTag discard type=" + a + " len=" + r, "color:white;background:black"),
                                    this.mse && this.mse.onVideoParseInvalid && this.mse.onVideoParseInvalid())
                                } else
                                    E.a.warn("FlvParser.parseTag flvtag empty type=" + a)
                            }
                        }
                    }, {
                        key: "parseScriptTag",
                        value: function(t, e, s, a) {
                            if (e + i.SCRIPT_AMF1_HEAD_LEN > s)
                                E.a.log("script too small");
                            else {
                                t[e++];
                                var r = (t[e++] << 8) + t[e++]
                                  , n = ks.getStr(t, e, r);
                                e += r,
                                "onMetaData" === n ? (0,
                                k.default)(this.mse.metadata, ks.parseScript(t, e, t.length).data) : -1 !== n.indexOf("onMixAudio") && this.mse.scriptVolumeInfos.addMixAudio(n.replace("onMixAudio:", ""), a)
                            }
                        }
                    }, {
                        key: "parseVideo",
                        value: function(t, e, s, a) {
                            if (s < 5)
                                E.a.warn("FlvParser.parseVideo avc videotag not enough dataLen=" + s);
                            else {
                                var r = t[e] >> 4;
                                this.codec = 15 & t[e++];
                                var n = t[e++];
                                if (5 !== s)
                                    if (0 === n)
                                        this.parseVideoConfig(t, e, s, a);
                                    else if (1 === n) {
                                        if (r == i.IFRAME)
                                            this.mse.setExceptionStat(Vt.VIDEO_IFRAME, 1),
                                            this.hasKeyFrame || (this.decodeIFRTime = F.a.now()),
                                            this.hasKeyFrame = !0;
                                        else if (!this.hasKeyFrame)
                                            return void E.a.log("-------- drop video tag has no IFrame", a);
                                        Number(localStorage._printVideoTs) && E.a.debug("%cFlvParser video ts", "color:green", a, a - this.lastVideoTs),
                                        this.lastVideoTs > 0 && a - this.lastVideoTs > 200 && E.a.warn("FlvParser video dts jump lastDts=".concat(this.lastVideoTs, " curDts=").concat(a, " gap=").concat(a - this.lastVideoTs)),
                                        this.lastVideoTs = a,
                                        this.parseVideoNalu(t, e, s, a, r)
                                    } else
                                        2 === n ? E.a.info("%cFlvParser.parseVideo avc_end dataLen=" + s, "color:white;background:black") : E.a.warn("%cFlvParser.parseVideo error avc packet type=" + n, "color:white;background:black");
                                else
                                    E.a.log("FlvParser.parseVideo avc_empty frameType=" + r + " avcPacketType=" + n)
                            }
                        }
                    }, {
                        key: "onAV1SequenceHeader",
                        value: function(t) {
                            var e = "av01." + t.seq_profile + "." + js.zeroPad(t["seq_level_idx[0]"], 2) + (t["seq_tier[0]"] ? "H" : "M") + "." + js.zeroPad(t.BitDepth, 2) + "." + t.mono_chrome + "." + t.subsampling_x + t.subsampling_y + (1 === t.subsampling_x && 1 === t.subsampling_y ? t.chroma_sample_position : 0);
                            t.color_description_present_flag && (e += "." + js.zeroPad(t.colorPrimaries, 2) + "." + js.zeroPad(t.transferCharacteristics, 2) + "." + js.zeroPad(t.matrixCoefficients, 2) + "." + t.color_range);
                            var i = t.max_frame_width_minus_1 + 1
                              , s = t.max_frame_height_minus_1 + 1
                              , a = {
                                isHevc: !1,
                                isAV01: !0,
                                width: i,
                                height: s,
                                codec: e
                            };
                            this.mse.setExceptionStat(Vt.VIDEO_CONFIG, 1),
                            this.mse.setResolution(i, s),
                            this.remuxer.switchLevel(!1, !1),
                            this.ctrlBuffer.updateVideoConfig(a, !1)
                        }
                    }, {
                        key: "onAV1MetaData",
                        value: function(t, e) {
                            e.itu_t_t35_payload_bytes && this.sei.parseSei(t, e.itu_t_t35_payload_bytes, Vs.AV1_CODEC_TYPE, this.seiTypes)
                        }
                    }, {
                        key: "parseVideoConfig",
                        value: function(t, e, s, a) {
                            var r, n, o = [], u = [], h = [], l = !1, c = null, d = (e += 3) + s - 5;
                            if (this.isAv01()) {
                                this.av1Bytes = t.subarray(e, e + s - 5);
                                var f = t.subarray(e += 4, e + s);
                                js.parseOBU(f, 0, this.onAV1SequenceHeaderBind)
                            } else {
                                if (this.isHevc()) {
                                    this.showH265Tip || (this.showH265Tip = !0,
                                    E.a.warn("This is a H265 video.")),
                                    this.mse.setExceptionStat(Vt.H265, 1);
                                    for (var p = (126 & t[e += 4]) >> 1, m = e; e < d; ) {
                                        if (this.isHevcNal(t, e) || e + 1 === d) {
                                            switch (p) {
                                            case i.NAL_VPS:
                                                var y = {
                                                    data: t.subarray(m, e),
                                                    type: p
                                                };
                                                this.vpsUnit && this.vpsUnit.data.toString(16) !== y.data.toString(16) && (E.a.log("FlvParser.parseVideoConfig vps changed"),
                                                l = !0),
                                                this.vpsUnit = y,
                                                h.push(y.data);
                                                break;
                                            case i.NAL_SPS:
                                                var v = {
                                                    data: t.subarray(m, e),
                                                    type: p
                                                };
                                                this.spsUnit && this.spsUnit.data.toString(16) !== v.data.toString(16) && (E.a.log("FlvParser.parseVideoConfig sps changed"),
                                                l = !0),
                                                this.spsUnit = v,
                                                o.push(v.data);
                                                break;
                                            case i.NAL_PPS:
                                                var _ = {
                                                    data: t.subarray(m, e),
                                                    type: p
                                                };
                                                this.ppsUnit && this.ppsUnit.data.toString(16) !== _.data.toString(16) && (E.a.log("FlvParser.parseVideoConfig pps changed"),
                                                l = !0),
                                                this.ppsUnit = _,
                                                u.push(_.data)
                                            }
                                            if (e + 4 < d) {
                                                p = (126 & t[e += 4]) >> 1,
                                                m = e;
                                                continue
                                            }
                                        }
                                        e++
                                    }
                                    c = {
                                        isHevc: !0,
                                        isAV01: !1,
                                        vps: h,
                                        sps: o,
                                        pps: u,
                                        codec: "avc1.4d401f",
                                        width: this.mse.width,
                                        height: this.mse.height
                                    },
                                    this.hasCtsZero = !0
                                } else {
                                    e += 4,
                                    this.lengthSizeMinusOne = 3 & t[e++];
                                    for (var g = 0, S = 0, T = "", P = 31 & t[e++], k = 0; k < P; ++k) {
                                        r = (t[e++] << 8) + t[e++];
                                        var I = {
                                            data: t.subarray(e, e + r),
                                            type: 7
                                        };
                                        this.spsUnit && this.spsUnit.data.toString(16) !== I.data.toString(16) && (E.a.log("FlvParser.parseVideoConfig sps changed"),
                                        l = !0),
                                        this.spsUnit = I,
                                        e += r,
                                        o.push(I.data);
                                        var b = new ms(I.data).readSPS();
                                        g = b.width,
                                        S = b.height;
                                        for (var C = I.data.subarray(1, 4), w = "avc1.", A = 0; A < 3; A++) {
                                            var R = C[A].toString(16);
                                            R.length < 2 && (R = "0" + R),
                                            w += R
                                        }
                                        T = w
                                    }
                                    for (var L = t[e++], B = 0; B < L; ++B) {
                                        n = (t[e++] << 8) + t[e++];
                                        var D = {
                                            data: t.subarray(e, e + n),
                                            type: 8
                                        };
                                        this.ppsUnit && this.ppsUnit.data.toString(16) !== D.data.toString(16) && (E.a.log("FlvParser.parseVideoConfig pps changed"),
                                        l = !0),
                                        this.ppsUnit = D,
                                        e += n,
                                        u.push(D.data)
                                    }
                                    c = {
                                        isHevc: !1,
                                        isAV01: !1,
                                        sps: o,
                                        pps: u,
                                        width: g,
                                        height: S,
                                        codec: T
                                    },
                                    this.mse.setExceptionStat(Vt.VIDEO_CONFIG, 1),
                                    this.mse.setResolution(g, S)
                                }
                                this.remuxer.switchLevel(l, !1),
                                this.ctrlBuffer.updateVideoConfig(c, l),
                                E.a.log("FlvParser.parseVideoConfig avccfg dataLen=" + s + " spsLen=" + r + " ppsLen=" + n + " w/h=" + c.width + "/" + c.height + " codec=" + c.codec)
                            }
                        }
                    }, {
                        key: "parseVideoNalu",
                        value: function(t, e, s, a, r) {
                            var n, o, u = [], h = 0, l = r === i.IFRAME, c = (t[e++] << 16) + (t[e++] << 8) + t[e++];
                            0 === c ? this.hasCtsZero || (this.hasCtsZero = !0) : c >= 8388608 ? c -= 16777216 : c > 2500 && c < 3500 ? c = 0 : c > 600 && E.a.warn("FlvParser.parseVideoNalu large cts=" + c + " dts=" + a),
                            l && !this.isAv01() && (this.vpsUnit && (u.push(this.vpsUnit),
                            h += this.vpsUnit.data.length),
                            this.spsUnit && (u.push(this.spsUnit),
                            h += this.spsUnit.data.length),
                            this.ppsUnit && (u.push(this.ppsUnit),
                            h += this.ppsUnit.data.length));
                            var d = e + s - 5
                              , f = !1;
                            if (this.seiTypes = {},
                            this.isAv01()) {
                                var p = t.subarray(e, e + s - 5);
                                u.push({
                                    data: p,
                                    type: 1 === r ? 5 : 1
                                }),
                                js.parseOBU(p, a, null, this.onAV1MetaDataBind),
                                h += p.length,
                                n = 1
                            } else if (this.isHevc()) {
                                var m = this.hevcFindNextStartCode(t, e);
                                if (!m.found)
                                    return E.a.error("hevcFindNextStartCode failed! dataLen", s),
                                    void this.mse.on265StartCodeError();
                                for (var y = (126 & t[e += m.startCodeSize]) >> 1, v = e; e < d; )
                                    ((m = this.hevcFindNextStartCode(t, e)).found || e + 1 === d) && (y < 10 && (f = !((98 & y) >> 1)),
                                    o = {
                                        data: t.subarray(v, e),
                                        type: y
                                    },
                                    39 === y ? this.sei.parseSei(a, o.data, Vs.H265_CODEC_TYPE, this.seiTypes) : (u.push(o),
                                    h += o.data.length),
                                    e + m.startCodeSize < d) ? (y = (126 & t[e += m.startCodeSize]) >> 1,
                                    v = e) : e++
                            } else
                                for (var _ = s - 5; _; ) {
                                    n = 0;
                                    for (var g = t[e + 4], S = 0; S <= this.lengthSizeMinusOne; ++S)
                                        n += t[e++] << 8 * (this.lengthSizeMinusOne - S);
                                    if (_ -= this.lengthSizeMinusOne + 1,
                                    0 !== n) {
                                        if (n < 0 || n > s - 5)
                                            break;
                                        if (n > _) {
                                            e += _;
                                            break
                                        }
                                        _ -= n,
                                        o = {
                                            data: t.subarray(e, e + n),
                                            type: 1 === r ? 5 : 1
                                        },
                                        this.isH264Sei(o.data) ? this.sei.parseSei(a, o.data, Vs.H264_CODEC_TYPE, this.seiTypes) : this.isH264NALUPPS(o.data) ? (u.push(o),
                                        h += o.data.length) : this.isH264Aud(o.data) && this.deleteH264Aud || this.dropFrameCtrl.isCanDrop(a, l, g) || (u.push(o),
                                        h += o.data.length),
                                        e += n
                                    }
                                }
                            if (h > 0) {
                                var T = {
                                    type: this.isAv01() ? "av01" : "avc",
                                    units: u,
                                    len: h,
                                    ts: a,
                                    cts: c,
                                    dts: 90 * a,
                                    pts: 90 * (a + c),
                                    key: r === i.IFRAME,
                                    origin_iframe: 1 === this.seiTypes[Vs.SEI_TYPES.IFRAME],
                                    isBFrameType: f,
                                    av1Bytes: this.av1Bytes
                                };
                                if (this.droppingSample && this.droppingSample(T))
                                    return;
                                this.printFirstVideoTs || (this.printFirstVideoTs = !0,
                                E.a.log("FlvParser.parseVideo dts=".concat(a, " pts=").concat(T.pts / 90, " isIFrame=").concat(l))),
                                this.pfvTs || (this.pfvTs = !0,
                                E.a.log("FlvParser.parseVideo11 dts=".concat(a, " pts=").concat(T.pts / 90, " isIFrame=").concat(l))),
                                this.fps.addDts(a, s),
                                this.dropFrameCtrl.setRealFps(this.fps.realFps),
                                this.mse.curVideoDts = a,
                                this.lastParseDts = a,
                                this.videoFrames++,
                                this.timeStampStat.setTimeStamp(a, a + c, c),
                                this.ctrlBuffer.addSample(T),
                                this.playVideoFrameCnt++,
                                this.timeStampStat.playVideoFrameCnt++,
                                this.playVideoLength += s
                            }
                        }
                    }, {
                        key: "parseAudio",
                        value: function(t, e, s, a) {
                            var r = t[e++] >>> 4
                              , n = !0
                              , o = a;
                            10 != r && E.a.error("FlvParser.parseAudio Unsupported audio codec, soundFormat=" + r),
                            this.calcAudioFrameRate(a),
                            null != this.audioIncreaseTSMap.get(a) && (a = this.audioIncreaseTSMap.get(a)),
                            a < this.lastAudioTs && 0 != this.lastAudioTs && (n = !1);
                            var u = t[e++];
                            if (0 === u)
                                if (s >= 4) {
                                    var h = t[e] >> 3;
                                    this.audioObjectType = h;
                                    var l = ((7 & t[e]) << 1) + ((128 & t[e + 1]) >> 7);
                                    if (l >= i.AdtsSampleingRates.length)
                                        return void E.a.error("FlvParser.parseAudio SampleingRate out of bounds. samplingIndex=" + l);
                                    this.audioChannelCount = (120 & t[e + 1]) >> 3;
                                    var c = !1
                                      , d = this.getAdtsConfig(h, l, this.audioChannelCount);
                                    d.toString(16) !== this.audioConfig.toString(16) && (this.audioConfig.toString(16) === na.toString(16) && this.remuxer.videoISGenerated && (c = !0),
                                    E.a.warn("FlvParser.parseAudio adts changed old=" + this.audioConfig + " new=" + d)),
                                    this.audioConfig = d,
                                    this.ctrlBuffer.updateAudioConfig({
                                        config: d,
                                        codec: "mp4a.40.5",
                                        audiosamplerate: this.audioSampleRate,
                                        aacTimeLen: this.aacTimeLen,
                                        audioObjectType: this.audioObjectType,
                                        audioChannelCount: this.audioChannelCount
                                    }, c),
                                    this.firstAudioTs = -1,
                                    this.firstDemuxAudioTS = -1,
                                    this.lastAudioTs = 0,
                                    this.remuxer.switchLevel(!1, c),
                                    this.mse.setExceptionStat(Vt.AUDIO_CONFIG, 1)
                                } else
                                    E.a.warn("FlvParser.parseAudio adts error dataLen=" + s + " ts=" + a);
                            else if (1 === u) {
                                if (this.last10anduiptsList.shift(),
                                this.last10anduiptsList.push(a),
                                -1 == this.firstAudioTs && (this.firstAudioTs = a),
                                -1 == this.firstDemuxAudioTS)
                                    this.firstDemuxAudioTS = a;
                                else if (a == this.firstDemuxAudioTS)
                                    return void E.a.warn("parseaudio audio too much audio in firstTs ts=" + a);
                                if (!n)
                                    return void E.a.warn("parseaudio audio ts too small maxlist=" + this.maxaudioptsList + "  now=" + a + "  first=" + this.firstAudioTs + "  last=" + this.lastAudioTs);
                                for (var f = 0; f < 10; f++)
                                    this.maxaudioptsList[f] = this.last10anduiptsList[f];
                                if (this.lastAudioTs > 0 && this.lastAudioTs == a) {
                                    var p = a + (0 | this.aacTimeLen);
                                    this.audioIncreaseTSMap.set(o, p),
                                    a = p
                                }
                                if (Number(localStorage._printAudioTs) && E.a.debug("%cFlvParser audio ts", "color:red", a, a - this.lastAudioTs),
                                this.lastAudioTs = a,
                                this.hasAudioTag = !0,
                                !this.validAacSample(a))
                                    return;
                                var m = s - 2
                                  , y = {
                                    type: "aac",
                                    unit: t.subarray(e, e + m),
                                    dts: 90 * a,
                                    pts: 90 * a,
                                    ts: a
                                };
                                if (this.droppingSample && this.droppingSample(y))
                                    return;
                                this.printFirstAudioTs || (this.printFirstAudioTs = !0,
                                E.a.log("FlvParser.parseAudio", a)),
                                this.pfaTs || (this.pfaTs = !0,
                                E.a.log("FlvParser.parseAudio11", a)),
                                this.audioFps.addDts(a),
                                this.mse.curAudioDts = a,
                                this.lastParseDts = a,
                                this.audioFrames++,
                                this.ctrlBuffer.addSample(y)
                            } else
                                E.a.warn("FlvParser.parseAudio error aac packet type=" + u)
                        }
                    }, {
                        key: "validAacSample",
                        value: function(t) {
                            var e = this.ctrlBuffer.avBuffer.aBuffer.samples
                              , i = e.length;
                            if (i > 0) {
                                var s = e[i - 1];
                                return 1 === i && s.ts > t && s.ts - t > this.validAacTime ? (e.shift(),
                                !0) : t - s.ts < this.validAacTime
                            }
                            return !0
                        }
                    }, {
                        key: "getAdtsConfig",
                        value: function(t, e, s) {
                            var a = 0
                              , r = null
                              , n = navigator.userAgent.toLowerCase();
                            return -1 !== n.indexOf("firefox") ? e >= 6 ? (t = 5,
                            r = new Array(4),
                            a = e - 3) : (t = 2,
                            r = new Array(2),
                            a = e) : -1 !== n.indexOf("android") ? -1 !== n.indexOf("mqqbrowser") ? (t = 2,
                            r = new Array(2),
                            a = e) : (t = 5,
                            r = new Array(4),
                            a = e) : (t = 5,
                            r = new Array(4),
                            a = e,
                            e >= 6 ? a = e - 3 : 1 === s && (t = 2,
                            r = new Array(2),
                            a = e)),
                            this.audioSampleRate = i.AdtsSampleingRates[e],
                            this.aacTimeLen = 1024e3 / this.audioSampleRate,
                            E.a.log("FlvParser.getAdtsConfig audioSampleRate=" + this.audioSampleRate + " aacTimeLen=" + this.aacTimeLen),
                            r[0] = t << 3,
                            r[0] |= (14 & e) >> 1,
                            r[1] = (1 & e) << 7,
                            r[1] |= s << 3,
                            5 === t && (r[1] |= (14 & a) >> 1,
                            r[2] = (1 & a) << 7,
                            r[2] |= 8,
                            r[3] = 0),
                            E.a.log("FlvParser.getAdtsConfig type=" + t + " index=" + e + " channel=" + s + " exIndex=" + a + " config=" + r),
                            r
                        }
                    }, {
                        key: "parseOBUHeader",
                        value: function(t) {
                            var e = {};
                            return e.obu_forbidden_bit = t >> 7,
                            e.obu_type = (120 & t) >> 3,
                            e.obu_extension_flag = (4 & t) >> 2,
                            e.obu_has_size_field = (2 & t) >> 1,
                            e.obu_reserved_1bit = 1 & t,
                            e
                        }
                    }, {
                        key: "isHevc",
                        value: function() {
                            return 12 == this.codec
                        }
                    }, {
                        key: "isAv01",
                        value: function() {
                            return 13 == this.codec
                        }
                    }, {
                        key: "hevcFindNextStartCode",
                        value: function(t, e) {
                            return 0 === t[e] && 0 === t[e + 1] ? 1 === t[e + 2] ? {
                                found: !0,
                                startCodeSize: 3
                            } : 0 === t[e + 2] && 1 === t[e + 3] ? {
                                found: !0,
                                startCodeSize: 4
                            } : {
                                found: !1
                            } : {
                                found: !1
                            }
                        }
                    }, {
                        key: "isHevcNal",
                        value: function(t, e) {
                            return 0 === t[e] && 0 === t[e + 1] && 0 === t[e + 2] && 1 === t[e + 3]
                        }
                    }, {
                        key: "isH264Sei",
                        value: function(t) {
                            return 6 === t[0]
                        }
                    }, {
                        key: "isH264Aud",
                        value: function(t) {
                            return 9 === t[0]
                        }
                    }, {
                        key: "isH264NALUPPS",
                        value: function(t) {
                            return 40 === t[0]
                        }
                    }, {
                        key: "getCalculateVideoFramePlayDelay",
                        value: function() {
                            return 0
                        }
                    }, {
                        key: "_remux",
                        value: function(t, e) {
                            this.remuxer.remux(e, t, 0, !1)
                        }
                    }, {
                        key: "calcAudioFrameRate",
                        value: function(t) {
                            this.audioFrameRateTs || (this.audioFrameRateTs = t,
                            this.audioFrameCnt = 0),
                            t - this.audioFrameRateTs < 1e3 ? this.audioFrameCnt++ : (Number(localStorage._printAudioFrameRate) && E.a.log("@@@@@@@@ audioFrameRate=" + this.audioFrameCnt),
                            this.audioFrameRateTs = t,
                            this.audioFrameCnt = 0)
                        }
                    }], [{
                        key: "probe",
                        value: function(t) {
                            return !(70 !== t[0] || 76 !== t[1] || 86 !== t[2] || 1 !== t[3])
                        }
                    }]),
                    i
                }(Es);
                oa.EVENTS = {
                    META_DATA: "meta_data",
                    SWITCH_URL_DONE: "switch_url_done"
                },
                oa.REMUX_TYPE_AUDIO = 0,
                oa.REMUX_TYPE_VIDEO = 1,
                oa.FLV_HEADER_LEN = 9,
                oa.TAG_HEADER_LEN = 11,
                oa.PREV_TAG_SIZE_LEN = 4,
                oa.AUDIO_TYPE = 8,
                oa.VIDEO_TYPE = 9,
                oa.SCRIPT_TYPE = 18,
                oa.SCRIPT_AMF1_HEAD_LEN = 13,
                oa.SCRIPT_AMF2_HEAD_LEN = 5,
                oa.IFRAME = 1,
                oa.NAL_VPS = 32,
                oa.NAL_SPS = 33,
                oa.NAL_PPS = 34,
                oa.H265_SEI_HEAD = [44, 162, 222, 9, 181, 23, 71, 219, 187, 85, 164, 254, 127, 194, 252, 78],
                oa.AdtsSampleingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
                var ua = oa
                  , ha = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.seiList = [],
                        this.player = e,
                        this.lastTs = -1,
                        this.internal = 10,
                        this.timerStart = !1
                    }
                    return Object(m.a)(t, [{
                        key: "add",
                        value: function(t, e) {
                            var i = this.seiList.length;
                            if (this.seiList.length > 0)
                                for (i = this.seiList.length - 1; i > 0 && !(t > this.seiList[i].timeStamp); i--)
                                    ;
                            this.seiList.splice(i + 1, 0, {
                                timeStamp: t,
                                data: e
                            }),
                            this.timerStart || (this.timerStart = !0,
                            setTimeout(this.checkDispatchSei.bind(this), this.internal))
                        }
                    }, {
                        key: "checkDispatchSei",
                        value: function() {
                            if (this.timerStart) {
                                for (var t = this.player.getCurrentRealTime(), e = 0, i = null; e < this.seiList.length - 2; ) {
                                    if (t >= this.seiList[e].timeStamp && this.seiList[e + 1].timeStamp > t) {
                                        i = this.seiList[e + 1].data,
                                        this.player.onH264Sei(i, this.seiList[e + 1].timeStamp),
                                        this.seiList.splice(0, e + 1);
                                        break
                                    }
                                    e++
                                }
                                setTimeout(this.checkDispatchSei.bind(this), this.internal)
                            }
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.seiList = [],
                            this.player = null,
                            this.lastTs = -1,
                            this.timerStart = !1
                        }
                    }]),
                    t
                }()
                  , la = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.volumeList = [],
                        this.player = e,
                        this.lastTs = -1,
                        this.internal = 100,
                        this.timerStart = !1,
                        this.dispatchMap = new v.default
                    }
                    return Object(m.a)(t, [{
                        key: "addMixAudio",
                        value: function(t, e) {
                            if (t.length > 0)
                                for (var i = t.split(","), s = 0; s < i.length; s++)
                                    this.add(e, i[s])
                        }
                    }, {
                        key: "add",
                        value: function(t, e) {
                            var i = this.volumeList.length;
                            if (this.volumeList.length > 0)
                                for (i = this.volumeList.length - 1; i > 0 && !(t > this.volumeList[i].timeStamp); i--)
                                    ;
                            this.volumeList.splice(i + 1, 0, {
                                timeStamp: t,
                                data: e
                            }),
                            this.timerStart || (this.timerStart = !0,
                            setTimeout(this.checkDispatchVolume.bind(this), this.internal))
                        }
                    }, {
                        key: "checkDispatchVolume",
                        value: function() {
                            var t = this;
                            if (this.timerStart) {
                                var e = this.player.getCurrentRealTime()
                                  , i = 0;
                                for (this.dispatchMap.clear(); this.volumeList[i] && this.volumeList[i].timeStamp < e; ) {
                                    var s = this.volumeList[i].data.split("_");
                                    s.length > 1 && this.dispatchMap.set(s[0], s[1]),
                                    i++
                                }
                                this.dispatchMap.forEach((function(e, i, s) {
                                    t.player.onScriptVolumeInfo(i, e)
                                }
                                )),
                                this.dispatchMap.clear(),
                                this.volumeList.splice(0, i),
                                this.volumeList.length > 0 ? setTimeout(this.checkDispatchVolume.bind(this), this.internal) : this.timerStart = !1
                            }
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.volumeList = [],
                            this.player = null,
                            this.lastTs = -1,
                            this.timerStart = !1
                        }
                    }]),
                    t
                }()
                  , ca = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this.mse = e,
                        this.video = i,
                        this.playing = !1,
                        this.seekTime = 0,
                        this.isMuffled = !1,
                        this.cacheVolume = 1,
                        i.addEventListener("pause", e.onVideoPauseBind),
                        i.addEventListener("error", e.onVideoErrorBind),
                        i.addEventListener("play", e.onVideoPlayBind),
                        i.addEventListener("playing", e.onVideoPlayingBind),
                        i.addEventListener("loadeddata", e.onVideoLoadedBind)
                    }
                    return Object(m.a)(t, [{
                        key: "seek",
                        value: function(t) {
                            this.seekTime = t,
                            this.video && (this.video.currentTime = t)
                        }
                    }, {
                        key: "_checkPlay",
                        value: function() {
                            E.a.log("MSEVideo.checkPlay seekTime=".concat(this.seekTime, " playing=").concat(this.playing, " currentTime=").concat(this.video && this.video.currentTime)),
                            this.video && 0 === this.video.currentTime && !this.playing ? (this.seekTime > 0 ? (this.seekTime++,
                            this.video.currentTime = this.seekTime) : this.video.currentTime += 1,
                            this._play()) : ls.remove(this._checkPlay, this)
                        }
                    }, {
                        key: "play",
                        value: function() {
                            "safari" !== O.a.name || this.mse.isLive ? (this._play(),
                            ls.add(this._checkPlay, this, 1e3)) : ls.add(this._checkPlay, this, 1e3)
                        }
                    }, {
                        key: "_play",
                        value: function() {
                            var t = this;
                            if (this.video) {
                                var e = this.video.play();
                                e ? e.then((function() {
                                    ls.remove(t._checkPlay, t),
                                    E.a.log("MSEVideo._play suc currentTime=".concat(t.video && t.video.currentTime)),
                                    t.mse && t.mse.handler.eventEmitter && t.mse.handler.eventEmitter.roomRecordStat && t.mse.handler.eventEmitter.roomRecordStat.roomNoRenderStat.resume(),
                                    M.platform === D.PLATFORM_TYPE_NAME.wap && !t.playing && t.mse && t.mse.triggerH5PlayVideo(),
                                    t.playing = !0
                                }
                                )).catch((function(e) {
                                    t.playing = !1;
                                    var i = e.toString();
                                    E.a.error("MSEVideo.play error: ".concat(i)),
                                    t.mse && (i.indexOf("NotAllowedError") >= 0 || i.indexOf("request was interrupted") >= 0 || t.video.paused) && (t.mse && t.mse.onPauseByBrowser(),
                                    M.platform === D.PLATFORM_TYPE_NAME.wap && ls.remove(t._checkPlay, t))
                                }
                                )) : this.playing = !1
                            } else
                                ls.remove(this._checkPlay, this)
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            this.video.pause()
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            var t = 0;
                            if (this.video) {
                                var e = this.video.buffered;
                                e.length > 0 && (t = 1e3 * (e.end(e.length - 1) - this.video.currentTime) >> 0)
                            }
                            return t
                        }
                    }, {
                        key: "printBuffered",
                        value: function() {
                            for (var t = this.video.buffered, e = [], i = 0; i < t.length; i++)
                                e.push("[".concat(t.start(i), ", ").concat(t.end(i), "]"));
                            E.a.log("video.buffered", e.join(" "), "video.currentTime=", this.video.currentTime)
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return Math.round(1e3 * this.video.currentTime)
                        }
                    }, {
                        key: "setVolume",
                        value: function(t) {
                            this.isMuffled ? this.video.volume = 0 : this.video.volume = t,
                            this.cacheVolume = t
                        }
                    }, {
                        key: "setMuffledVolume",
                        value: function(t) {
                            this.isMuffled = t,
                            this.isMuffled ? this.video.volume = 0 : this.setVolume(this.cacheVolume)
                        }
                    }, {
                        key: "getVolume",
                        value: function() {
                            return this.video.volume
                        }
                    }, {
                        key: "setMuted",
                        value: function(t) {
                            this.video && (this.video.muted = t,
                            E.a.log("MSEVideo.setMuted ".concat(t, " hasVideo=").concat(!!this.videoSourceBuffer, " hasAudio=").concat(!!this.audioSourceBuffer)))
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.video ? this.video.muted : -1
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.video.removeEventListener("error", this.mse.onVideoErrorBind),
                            this.video.removeEventListener("pause", this.mse.onVideoPauseBind),
                            this.video.removeEventListener("play", this.mse.onVideoPlayBind),
                            this.video.removeEventListener("loadeddata", this.mse.onVideoLoadedBind),
                            this.pause(),
                            this.video.removeAttribute("src"),
                            "function" == typeof this.video.load && function() {
                                try {
                                    this.video.load()
                                } catch (t) {}
                            }(),
                            this.video = null,
                            this.mse = null
                        }
                    }]),
                    t
                }()
                  , da = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.emptyTs = 0,
                        this.emptyTime = 0,
                        this.emptyCnt = 0,
                        this.aiEmptyTime = 0,
                        this.aiEmptyCnt = 0
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.emptyTs = 0,
                            this.emptyTime = 0,
                            this.emptyCnt = 0
                        }
                    }, {
                        key: "getStats",
                        value: function() {
                            var t = {
                                emptyTime: this.emptyTime,
                                emptyCnt: this.emptyCnt
                            };
                            return this.emptyTime = 0,
                            this.emptyCnt = 0,
                            t
                        }
                    }, {
                        key: "getAiStats",
                        value: function() {
                            var t = {
                                aiEmptyTime: this.aiEmptyTime,
                                aiEmptyCnt: this.aiEmptyCnt
                            };
                            return this.aiEmptyTime = 0,
                            this.aiEmptyCnt = 0,
                            t
                        }
                    }, {
                        key: "checkBuffer",
                        value: function(t, e) {
                            e < 200 && 0 === this.emptyTs ? this.emptyTs = t : e > 500 && this.emptyTs > 0 && (this.emptyTime += t - this.emptyTs,
                            this.aiEmptyTime += t - this.emptyTs,
                            this.emptyTs = 0,
                            this.emptyCnt++,
                            this.aiEmptyCnt++)
                        }
                    }]),
                    t
                }()
                  , fa = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._cnt = 0,
                        this._duration = 0,
                        this._pauseTs = 0,
                        this._aiCnt = 0,
                        this._aiDuration = 0
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.resetStat(),
                            this.resetAiStat(),
                            this._pauseTs = 0
                        }
                    }, {
                        key: "getCnt",
                        value: function() {
                            return this._cnt
                        }
                    }, {
                        key: "resetStat",
                        value: function() {
                            this._cnt = 0,
                            this._duration = 0
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            0 === this._pauseTs && (this._pauseTs = F.a.now())
                        }
                    }, {
                        key: "resume",
                        value: function() {
                            this.calc(!0)
                        }
                    }, {
                        key: "calc",
                        value: function(t) {
                            if (this._pauseTs > 0) {
                                var e = F.a.now()
                                  , i = e - this._pauseTs;
                                i >= 200 && (this._cnt++,
                                this._aiCnt++,
                                this._duration += i,
                                this._aiDuration += i),
                                this._pauseTs = t ? 0 : e
                            }
                        }
                    }, {
                        key: "resetAiStat",
                        value: function() {
                            this._aiCnt = 0,
                            this._aiDuration = 0
                        }
                    }, {
                        key: "getAiStat",
                        value: function() {
                            var t = {
                                aiCnt: this._aiCnt,
                                aiDuration: this._aiDuration
                            };
                            return this.resetAiStat(),
                            t
                        }
                    }, {
                        key: "record",
                        value: function(t) {
                            this.calc(!1),
                            t.setCore(he, this._cnt),
                            t.setCore(le, this._duration),
                            this.resetStat()
                        }
                    }]),
                    t
                }()
                  , pa = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this._mse = e,
                        this._callbacks = i,
                        this._paused = !1,
                        this._playedTime = 0,
                        this._pausedTs = 0,
                        this._lastPausedTs = 0
                    }
                    return Object(m.a)(t, [{
                        key: "paused",
                        get: function() {
                            return this._paused
                        }
                    }, {
                        key: "pausedTs",
                        get: function() {
                            return this._pausedTs
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this._paused = !1,
                            this._playedTime = 0,
                            this._pausedTs = 0,
                            this._lastPausedTs = 0
                        }
                    }, {
                        key: "check",
                        value: function(t) {
                            var e = this._mse.video.video;
                            !this._mse.isLive && e.currentTime <= 1 || (0 !== this._playedTime && (e.currentTime === this._playedTime ? this._paused ? this._fixedCurrentTime(t, e) : this._setPaused(t, e) : this._paused && this._setResume(t, e)),
                            this._playedTime = e.currentTime)
                        }
                    }, {
                        key: "_setPaused",
                        value: function(t, e) {
                            this._paused = !0,
                            this._pausedTs = t,
                            this._lastPausedTs = t,
                            this._log("_setPaused", e),
                            this._callbacks.pause(t)
                        }
                    }, {
                        key: "_setResume",
                        value: function(t, e) {
                            var i = t - this._pausedTs;
                            this._paused = !1,
                            this._pausedTs = 0,
                            this._lastPausedTs = 0,
                            this._log("_setResume", e),
                            this._callbacks.resume(t, i)
                        }
                    }, {
                        key: "_fixedCurrentTime",
                        value: function(t, e) {
                            t - this._lastPausedTs > 500 && (this._fixedByBuffered(e) || this._fixedByDts(e)) && (this._lastPausedTs = t)
                        }
                    }, {
                        key: "_fixedByBuffered",
                        value: function(t) {
                            if ("flv" === this._mse.videoType) {
                                var e = t.buffered.length;
                                if (e > 0) {
                                    var i = t.buffered.start(e - 1)
                                      , s = t.buffered.end(e - 1);
                                    if (i > t.currentTime && s - i > 1)
                                        return this._log("_fixedByBuffered", t),
                                        t.currentTime = i,
                                        !0
                                }
                            }
                            return !1
                        }
                    }, {
                        key: "_fixedByDts",
                        value: function(t) {
                            return !!(this._mse.getBufferLen() > 2e3 && this._mse.isLive) && (this._log("_fixedByDts", t),
                            t.currentTime += 1,
                            !0)
                        }
                    }, {
                        key: "_log",
                        value: function(t, e, i) {
                            this._mse.video.printBuffered(),
                            E.a.log("MSEPause(".concat(this._mse._num_, ").").concat(t, " readyState=").concat(e.readyState, " currentTime=").concat(e.currentTime, " buf=").concat(this._mse.getBufferLen(), " dts=").concat(this._mse.getCurrentDts(), " ").concat(i || ""))
                        }
                    }]),
                    t
                }()
                  , ma = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.startDts = 0,
                        this.endDts = 0,
                        this.endFrameId = 0
                    }
                    return Object(m.a)(t, [{
                        key: "isDisconnectDts",
                        value: function(t) {
                            return this.endDts > 0 && t - this.endDts > 200
                        }
                    }, {
                        key: "isDisconnectFrame",
                        value: function(t) {
                            return this.endFrameId > 0 && t - this.endFrameId != 1
                        }
                    }, {
                        key: "getContinueBuffer",
                        value: function(t) {
                            return t >= this.startDts && t <= this.endDts ? this.endDts - t : 0
                        }
                    }, {
                        key: "addBuffer",
                        value: function(t, e) {
                            0 === this.startDts && (this.startDts = e),
                            this.endDts = e,
                            this.endFrameId = t
                        }
                    }]),
                    t
                }()
                  , ya = 1
                  , va = 2
                  , _a = 3
                  , ga = 1
                  , Sa = 2
                  , Ta = 3
                  , Pa = 0
                  , ka = 1
                  , Ea = 2
                  , Ia = 3
                  , ba = 4
                  , Ca = 5
                  , wa = 6
                  , Aa = 7
                  , Ra = 9
                  , La = 10
                  , Ba = 0
                  , Da = 1
                  , Oa = 2
                  , Ma = 3
                  , Fa = 4
                  , Ua = "timer"
                  , Na = "record"
                  , xa = "resume"
                  , Va = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._frameId = 0,
                        this._lastFrameId = 0,
                        this._startFrameId = 0
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this._frameId = 0,
                            this._lastFrameId = 0,
                            this._startFrameId = 0
                        }
                    }, {
                        key: "setStartFrameId",
                        value: function(t) {
                            this._startFrameId = t,
                            this._lastFrameId = this._frameId
                        }
                    }, {
                        key: "getFrameId",
                        value: function(t, e) {
                            return 0 === t ? (this._frameId++,
                            e > 0 && this._frameId++) : (e > 0 && this._lastFrameId++,
                            this._frameId = this._lastFrameId + (t - this._startFrameId + 1)),
                            this._frameId
                        }
                    }]),
                    t
                }()
                  , Ha = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._mse = null,
                        this._list = [],
                        this._dtsList = [],
                        this._tsList = [],
                        this._currentBuffered = null,
                        this._continueBuffer = -1,
                        this._lastFrameTs = 0,
                        this._startTs = 0,
                        this._started = !1,
                        this._lastRemoveTs = 0,
                        this._deltaStart = Number(M.continueBufferDeltaStart) || 6e3,
                        this._deltaEnd = Number(M.continueBufferDeltaEnd) || 3e3,
                        this._localFrameId = new Va,
                        this._printContinueBuffer = 1 == localStorage._printContinueBuffer
                    }
                    return Object(m.a)(t, [{
                        key: "continueBuffer",
                        get: function() {
                            return this._continueBuffer
                        },
                        set: function(t) {
                            this._continueBuffer = t
                        }
                    }, {
                        key: "setMse",
                        value: function(t) {
                            this._mse = t
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            E.a.log("VideoBufferedList.stop"),
                            this._startTs = 0,
                            this._list = [],
                            this._dtsList = [],
                            this._continueBuffer = -1,
                            this._currentBuffered = null,
                            this._localFrameId.reset(),
                            ls.remove(this.onCheckFastTimer, this)
                        }
                    }, {
                        key: "printInfo",
                        value: function(t) {
                            var e = [];
                            this._list.forEach((function(t) {
                                e.push("[".concat(t.startDts, ", ").concat(t.endDts, "]"))
                            }
                            )),
                            E.a.log("VideoBufferedList.print dts=".concat(t, " buffered=").concat(e.join(" ")))
                        }
                    }, {
                        key: "record",
                        value: function(t) {
                            this._calc(F.a.now(), Na),
                            t.setCore(de, this._continueBuffer),
                            this._continueBuffer = -1
                        }
                    }, {
                        key: "start",
                        value: function() {
                            0 === this._startTs && (E.a.log("VideoBufferList.start"),
                            this._startTs = F.a.now(),
                            ls.add(this.onCheckFastTimer, this, 50))
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t) {
                            if (0 === this._lastRemoveTs)
                                this._lastRemoveTs = t;
                            else if (this._lastRemoveTs > 0 && t - this._lastRemoveTs > 5e3) {
                                this._lastRemoveTs = t;
                                for (var e = this._mse.getCurrentDts() - 2e4, i = this._dtsList.length - 1; i >= 0; i--)
                                    if (this._dtsList[i] < e) {
                                        this._dtsList = this._dtsList.slice(i),
                                        this._tsList = this._tsList.slice(i);
                                        break
                                    }
                            }
                            var s = t - this._lastFrameTs;
                            this._lastFrameTs > 0 && s > 100 && (this._calc(t, Ua),
                            this._lastFrameTs = t)
                        }
                    }, {
                        key: "addSample",
                        value: function(t, e, i, s) {
                            var a = F.a.now();
                            this._tsList.push(a),
                            this._dtsList.push(e),
                            (0 === this._lastFrameTs || i) && this._localFrameId.setStartFrameId(t),
                            this._lastFrameTs = a;
                            var r = this._localFrameId.getFrameId(t, s);
                            this._currentBuffered && !this._currentBuffered.isDisconnectFrame(r) || (this._currentBuffered = new ma,
                            this._list.push(this._currentBuffered),
                            this._list.length > 10 && e - this._list[0].endDts > 3e5 && this._list.shift()),
                            this._currentBuffered.addBuffer(r, e)
                        }
                    }, {
                        key: "_calc",
                        value: function(t, e) {
                            var i = t - this._deltaStart
                              , s = t - this._deltaEnd;
                            if ((e === Na || e === xa) && -1 === this._continueBuffer)
                                return this._continueBuffer = this._getContinueBuffer(this._mse.getCurrentDts()),
                                void (this._printContinueBuffer && this.printInfo(this._mse.getCurrentDts() + " continueBuffer=".concat(this._continueBuffer, " from=").concat(e, " ")));
                            if (!(0 === this._startTs || i < this._startTs)) {
                                for (var a = this._getDtsBound(i, s), r = a.startDts, n = a.endDts, u = o.default, h = this._dtsList.length, l = 0; l < h; l++) {
                                    var c = this._dtsList[l];
                                    if (c > n)
                                        break;
                                    if (c >= r && c <= n && (u = Math.min(u, this._getContinueBuffer(c))),
                                    0 === u)
                                        break
                                }
                                u === o.default && (u = 0),
                                (-1 === this._continueBuffer || this._continueBuffer > u) && (this._continueBuffer = u,
                                this._printContinueBuffer && this.printInfo(this._mse.getCurrentDts() + " now=".concat(t, " startDts=").concat(r, " endDts=").concat(n, " continueBuffer=").concat(u, " from=").concat(e)))
                            }
                        }
                    }, {
                        key: "_getDtsBound",
                        value: function(t, e) {
                            for (var i = this._tsList.length, s = o.default, a = 0, r = 0; r < i; r++) {
                                var n = this._tsList[r];
                                if (n >= t && n <= e) {
                                    var u = this._dtsList[r];
                                    u < s && (s = u),
                                    u > a && (a = u)
                                } else if (n > e)
                                    break
                            }
                            return {
                                startDts: s,
                                endDts: a
                            }
                        }
                    }, {
                        key: "_getContinueBuffer",
                        value: function(t) {
                            for (var e = 0, i = 0; i < this._list.length && 0 === (e = this._list[i].getContinueBuffer(t)); i++)
                                ;
                            return e
                        }
                    }]),
                    t
                }()
                  , Ga = i(24);
                function ja(t, e) {
                    return function(t) {
                        if (Array.isArray(t))
                            return t
                    }(t) || function(t, e) {
                        if (void 0 !== C.default && (0,
                        c.default)(Object(t))) {
                            var i = []
                              , s = !0
                              , a = !1
                              , r = void 0;
                            try {
                                for (var n, o = (0,
                                _.default)(t); !(s = (n = o.next()).done) && (i.push(n.value),
                                !e || i.length !== e); s = !0)
                                    ;
                            } catch (t) {
                                a = !0,
                                r = t
                            } finally {
                                try {
                                    s || null == o.return || o.return()
                                } finally {
                                    if (a)
                                        throw r
                                }
                            }
                            return i
                        }
                    }(t, e) || Object(Ga.a)(t, e) || function() {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                    }()
                }
                var Ya = localStorage
                  , Wa = [95, 112, 101, 114, 102]
                  , qa = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.bitrate = 4e3,
                        this.blockCount = 1,
                        this.continueBuffer = 2e3,
                        this.map = new v.default,
                        this.key = "",
                        this._initKey(),
                        this._initLocal()
                    }
                    return Object(m.a)(t, [{
                        key: "_initKey",
                        value: function() {
                            for (var t = 0; t < Wa.length; t++)
                                this.key += String.fromCharCode(Wa[t])
                        }
                    }, {
                        key: "setConfig",
                        value: function(t) {
                            this.bitrate = t.perfBitrate || 4e3,
                            this.blockCount = t.perfCnt || 1,
                            this.continueBuffer = t.perfBuf || 2e3
                        }
                    }, {
                        key: "_initLocal",
                        value: function() {
                            if (Ya.hasOwnProperty(this.key)) {
                                for (var t = Ya[this.key].split(","), e = "", i = !0, s = 0; s < t.length; s++) {
                                    var a = Number(t[s]);
                                    if (isNaN(a)) {
                                        i = !1;
                                        break
                                    }
                                    e += String.fromCharCode(Number(t[s]))
                                }
                                i && e.length > 0 && this._parseLocal(e)
                            }
                        }
                    }, {
                        key: "_parseLocal",
                        value: function(t) {
                            for (var e = t.split("|"), i = 0; i < e.length; i++) {
                                var s = e[i].split(":")
                                  , a = Number(s[0])
                                  , r = s[1].split(",");
                                this.map.set(a, r)
                            }
                        }
                    }, {
                        key: "checkLocal",
                        value: function(t, e) {
                            if (t = Number(t),
                            this.map.has(t)) {
                                var i = this.map.get(t);
                                return this._hasBitrate(i, e)
                            }
                            return !1
                        }
                    }, {
                        key: "checkLive",
                        value: function(t, e, i, s) {
                            if (t = Number(t),
                            e >= this.bitrate && i > this.blockCount && s > this.continueBuffer) {
                                var a = this.map.get(t);
                                if (a || (a = [],
                                this.map.set(t, a)),
                                !this._hasBitrate(a, e))
                                    return a.push(e),
                                    this._saveMap(),
                                    E.a.log("PausePerformance.checkLive pid=".concat(t, " bitrate=").concat(e)),
                                    !0
                            }
                            return !1
                        }
                    }, {
                        key: "_hasBitrate",
                        value: function(t, e) {
                            for (var i = 0; i < t.length; i++)
                                if (Number(e) === Number(t[i]))
                                    return !0;
                            return !1
                        }
                    }, {
                        key: "_saveMap",
                        value: function() {
                            var t, e = [], i = Object(qi.a)(this.map.entries());
                            try {
                                for (i.s(); !(t = i.n()).done; ) {
                                    var s = ja(t.value, 2)
                                      , a = s[0]
                                      , r = s[1];
                                    e.push(a + ":" + r.join(","))
                                }
                            } catch (t) {
                                i.e(t)
                            } finally {
                                i.f()
                            }
                            if (e.length > 0) {
                                for (var n = e.join("|"), o = [], u = 0; u < n.length; u++)
                                    o.push(n.charCodeAt(u));
                                Ya[this.key] = o.join(",")
                            }
                        }
                    }]),
                    t
                }()
                  , Ka = 0
                  , za = function() {
                    function t(e, i) {
                        Object(p.a)(this, t);
                        var s = i.videoType
                          , a = void 0 === s ? "flv" : s
                          , r = i.isLive
                          , n = void 0 === r || r
                          , o = i.isPureAudio
                          , u = void 0 !== o && o
                          , h = i.isPureVideo
                          , l = void 0 !== h && h
                          , c = i.h265Proxy
                          , d = void 0 === c ? null : c
                          , f = i.videoElement
                          , m = void 0 === f ? null : f
                          , y = i.ignoreSei
                          , v = void 0 !== y && y
                          , _ = i.closeFetch
                          , g = void 0 !== _ && _;
                        this.handler = e,
                        this.videoType = a,
                        this.isLive = n,
                        this.isPureAudio = u,
                        this.isPureVideo = l,
                        this.pushVideoStartRenderTime = 0,
                        this.h265Proxy = d,
                        this.videoElement = m,
                        this.requestAnimationId = -1,
                        this.pid = 0,
                        this.bitrate = 0,
                        this._num_ = ++Ka,
                        E.a.log("MSEPlayer(".concat(this._num_, ").constructor")),
                        this.buffered = new Ha,
                        this.buffered.setMse(this),
                        this.remuxer = new ps(this),
                        "ts" === a ? (this.parser = new Ss(this,this.remuxer),
                        this.parser.ignoreSei = v,
                        this.parser.closeFetch = g) : (this.parser = new ua(this,this.remuxer),
                        this.parser.ctrlBuffer.setBuffered(this.buffered),
                        this.parser.dropFrameCtrl.setConfig({
                            dropTime: M.dropTime,
                            minFps: M.minFps
                        })),
                        this.JITTER_BUFMIN = 1e3,
                        this.JITTER_BUFLEN = 4e3,
                        this.JITTER_BUFMAX = 8e3,
                        this.latencySeek = 0,
                        this.userPaused = !1,
                        this._triggerPlay = !1,
                        this.hasData = !1,
                        this.playing = !1,
                        this.lastPlayTime = 0,
                        this.lastCheckPlayTime = 0,
                        this.maxGop = 0,
                        this.playStartTime = 0,
                        this.delayReset = !1,
                        this.isPlayerError = !1,
                        this.isErrorEvent = !1,
                        this.startPlayBackRate = .9,
                        this.pausedByBrowser = !1,
                        this.metadata = {},
                        this.bufStat = new da,
                        this.pauseStat = new fa,
                        this.pausePerf = new qa,
                        this.tryPlayAgainTimout = 0,
                        this.onUpdateErrorBind = this.onUpdateError.bind(this),
                        this.onAudioUpdateEndBind = this.onAudioUpdateEnd.bind(this),
                        this.onVideoUpdateEndBind = this.onVideoUpdateEnd.bind(this),
                        this.onMediaSourceOpenBind = this.onMediaSourceOpen.bind(this),
                        this.onVideoErrorBind = this.onVideoError.bind(this),
                        this.onVideoPauseBind = this.onVideoPause.bind(this),
                        this.onVideoPlayBind = this.onVideoPlay.bind(this),
                        this.onVideoLoadedBind = this.onVideoLoaded.bind(this),
                        this.checkVideoPlayingBind = this.checkVideoPlaying.bind(this),
                        this.onVideoPlayingBind = this.onVideoPlaying.bind(this),
                        this.mediaSource = new MediaSource,
                        this.mediaSource.addEventListener("sourceopen", this.onMediaSourceOpenBind),
                        this.h264SeiInfos = new ha(this),
                        this.scriptVolumeInfos = new la(this),
                        this.video = this.createVideo(),
                        this.msePause = new pa(this,{
                            pause: this._msePaused.bind(this),
                            resume: this._mseResume.bind(this)
                        }),
                        this.audioSourceBuffer = null,
                        this.videoSourceBuffer = null,
                        this.audioCodec = null,
                        this.videoCodec = null,
                        this.audioSegments = [],
                        this.videoSegments = [],
                        this.width = 1280,
                        this.height = 720,
                        this.autoJitter = !0,
                        this.autoBitrateJitter = !1,
                        this.playbackrateChangeAccess = !0,
                        this.enableLowLatency = !1,
                        this.sensitivePause = !0,
                        this.waitSwapToPcdn = !1,
                        this.printJitter = !!Number(localStorage._printJitter);
                        var S = navigator.userAgent.toLowerCase();
                        this.isAndroid = -1 !== S.indexOf("Android"),
                        -1 == E.a.getLevel() && window.chrome && (window.chrome.mse = this),
                        this.videoDataAppended = !1,
                        this.avcchangeCheckTimer = 0,
                        this.offsetDts = 0,
                        this.curVideoDts = 0,
                        this.curAudioDts = 0,
                        this.isOnFragParsed = !1,
                        this.onFragParsedTime = 0,
                        this.isH265Play = !1,
                        this.playRateIncrease = 0,
                        this.playRateDecrease = 0,
                        this.startPlayTime = 0,
                        this.isStartBuffer = !0,
                        this.bufferCd = 12e4,
                        this.startCd = 5e3,
                        this.setVideoCurrentTime = 0,
                        this.startMoreBufferTime = 0,
                        this.bufferMoreContinueTime = 6e4,
                        this.maxJumpWaitNow = 0,
                        this.mediaDelay = null,
                        this.seiAnchorDelay = -1,
                        this.discontinuityAudio = !1,
                        this.discontinuityVideo = !1,
                        this.isPlaybackRateNormal = !0,
                        d && d.initRender(this)
                    }
                    return Object(m.a)(t, [{
                        key: "setParams",
                        value: function(t, e) {
                            this.pid = t,
                            this.bitrate = e,
                            this._initPerf()
                        }
                    }, {
                        key: "_initPerf",
                        value: function() {
                            "ts" !== this.videoType && this.pausePerf.checkLocal(this.pid, this.bitrate) && this.parser.dropFrameCtrl.start()
                        }
                    }, {
                        key: "getDelayStat",
                        value: function() {
                            return "ts" !== this.videoType ? this.parser.sei.getStat() : null
                        }
                    }, {
                        key: "getDelayInfo",
                        value: function() {
                            return E.a.log("MSEPlayer.getDelayInfo: delay: ", this.mediaDelay),
                            this.mediaDelay
                        }
                    }, {
                        key: "setSeiDelay",
                        value: function(t) {
                            if (this.seiAnchorDelay !== t || !this.mediaDelay) {
                                var e = this.getBufferLen();
                                this.seiAnchorDelay = t,
                                this.mediaDelay = {
                                    total_delay: this.seiAnchorDelay + e,
                                    buffer_delay: e,
                                    status: 0
                                },
                                0 === this.seiAnchorDelay && (this.mediaDelay.status = 1)
                            }
                        }
                    }, {
                        key: "getRealBitrate",
                        value: function() {
                            var t = 0;
                            return this.parser.fps && (t = this.parser.fps.getRealBitrate()),
                            t
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            if (E.a.log("MSEPlayer(".concat(this._num_, ").destroy")),
                            this.buffered.stop(),
                            this.h265Proxy && this.h265Proxy.stop(),
                            this.playing = !1,
                            this.lastPlayTime = 0,
                            this.playStartTime = 0,
                            this.lastCheckPlayTime = 0,
                            this.hasData = !1,
                            this.handler && (this.handler.onVideoStop(this.video.video, !!this.videoSourceBuffer),
                            this.handler = null),
                            this.remuxer.destroy(),
                            this.parser.destroy(),
                            this.audioCodec = null,
                            this.videoCodec = null,
                            this.audioSegments = [],
                            this.videoSegments = [],
                            this.audioSourceBuffer && (this.audioSourceBuffer.removeEventListener("updateend", this.onAudioUpdateEndBind),
                            this.audioSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                            this.audioSourceBuffer = null),
                            this.videoSourceBuffer && (this.videoSourceBuffer.removeEventListener("updateend", this.onVideoUpdateEndBind),
                            this.videoSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                            this.videoSourceBuffer = null),
                            this.mediaSource) {
                                this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind);
                                for (var t = this.mediaSource.sourceBuffers; t.length; )
                                    this.mediaSource.removeSourceBuffer(t[0]);
                                this.mediaSource = this.onMediaSourceOpenBind = null
                            }
                            this.onAudioUpdateEndBind = this.onVideoUpdateEndBind = this.onUpdateErrorBind = null,
                            this.video && (this.video.destroy(),
                            this.video = null),
                            this.videoElement = null,
                            this.pushVideoStartRenderTime = 0,
                            this.playbackrateChangeAccess = !0,
                            -1 !== this.requestAnimationId && (cancelAnimationFrame(this.requestAnimationId),
                            this.requestAnimationId = -1),
                            this.onFragParsedTime = 0,
                            ls.remove(this.triggerPlayVideo, this)
                        }
                    }, {
                        key: "resetHls",
                        value: function() {
                            this.parser.pushAllData && this.parser.pushAllData(),
                            this.parser.reset && this.parser.reset(),
                            this.remuxer.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            if (E.a.log("MSEPlayer(".concat(this._num_, ").reset")),
                            this.handler.onVideoStop(this.video.video, !!this.videoSourceBuffer),
                            this.JITTER_BUFMIN = 1e3,
                            this.JITTER_BUFLEN = 4e3,
                            this.JITTER_BUFMAX = 8e3,
                            this.userPaused = !1,
                            this.playing = !1,
                            this.lastPlayTime = 0,
                            this.playStartTime = 0,
                            this.lastCheckPlayTime = 0,
                            this.hasData = !1,
                            this.audioCodec = null,
                            this.videoCodec = null,
                            this.audioSegments = [],
                            this.videoSegments = [],
                            this.discontinuityAudio = !1,
                            this.discontinuityVideo = !1,
                            this.metadata = {},
                            this.msePause.paused && this.handler.onPlayResume(F.a.now()),
                            this.pauseStat.reset(),
                            this.bufStat.reset(),
                            this.msePause.reset(),
                            this.maxGop = 0,
                            this.isPlaybackRateNormal = !0,
                            clearTimeout(this.tryPlayAgainTimout),
                            this.audioSourceBuffer && (this.audioSourceBuffer.removeEventListener("updateend", this.onAudioUpdateEndBind),
                            this.audioSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                            this.audioSourceBuffer = null),
                            this.videoSourceBuffer && (this.videoSourceBuffer.removeEventListener("updateend", this.onVideoUpdateEndBind),
                            this.videoSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                            this.videoSourceBuffer = null),
                            this.mediaSource) {
                                this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind);
                                for (var t = this.mediaSource.sourceBuffers; t.length; )
                                    this.mediaSource.removeSourceBuffer(t[0])
                            }
                            this.mediaSource = new MediaSource,
                            this.mediaSource.addEventListener("sourceopen", this.onMediaSourceOpenBind),
                            this.video && (this.video.destroy(),
                            this.video = null),
                            this.video = this.createVideo(),
                            this.playbackrateChangeAccess = !0,
                            this.videoDataAppended = !1,
                            this.onFragParsedTime = 0,
                            this.startPlayTime = 0,
                            this.isStartBuffer = !0,
                            this.setVideoCurrentTime = 0,
                            this.startMoreBufferTime = 0,
                            this.maxJumpWaitNow = 0
                        }
                    }, {
                        key: "resetVideo",
                        value: function() {
                            if (this.audioSourceBuffer && (this.audioSourceBuffer.removeEventListener("updateend", this.onAudioUpdateEndBind),
                            this.audioSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                            this.audioSourceBuffer = null),
                            this.videoSourceBuffer && (this.videoSourceBuffer.removeEventListener("updateend", this.onVideoUpdateEndBind),
                            this.videoSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                            this.videoSourceBuffer = null),
                            this.mediaSource) {
                                this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind);
                                for (var t = this.mediaSource.sourceBuffers; t.length; )
                                    this.mediaSource.removeSourceBuffer(t[0])
                            }
                            this.mediaSource = new MediaSource,
                            this.mediaSource.addEventListener("sourceopen", this.onMediaSourceOpenBind),
                            this.video && (this.video.destroy(),
                            this.video = null),
                            this.video = this.createVideo(),
                            this.videoCodec = null,
                            this.audioCodec = null,
                            this.lastPlayTime = 0
                        }
                    }, {
                        key: "createVideo",
                        value: function() {
                            this._triggerPlay = !1;
                            var t = this.videoElement ? this.videoElement : document.createElement("video");
                            return t.src = URL.createObjectURL(this.mediaSource),
                            new ca(this,t)
                        }
                    }, {
                        key: "insertDiscontinuity",
                        value: function(t) {
                            t > 0 && (this.resetVideo(),
                            this.playing = !1,
                            this.seek(t))
                        }
                    }, {
                        key: "setPushGop",
                        value: function(t) {
                            this.parser.setPushGop(t)
                        }
                    }, {
                        key: "setDeleteH264Aud",
                        value: function(t) {
                            this.parser.setDeleteH264Aud(t)
                        }
                    }, {
                        key: "setNeedEmptyAudioFrame",
                        value: function(t) {
                            this.parser.setNeedEmptyAudioFrame(t)
                        }
                    }, {
                        key: "getPlayStat",
                        value: function() {
                            return this.parser.getPlayStat()
                        }
                    }, {
                        key: "getPlayVideo",
                        value: function() {
                            return this.video ? this.video.video : null
                        }
                    }, {
                        key: "getFrameReadyed",
                        value: function() {
                            return this.parser && this.parser.getFrameReadyed ? this.parser.getFrameReadyed() : 0
                        }
                    }, {
                        key: "getFramePlayDelays",
                        value: function() {
                            return this.parser.getCalculateVideoFramePlayDelay ? this.parser.getCalculateVideoFramePlayDelay() : 0
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return this.video ? this.video.getBufferLen() : 0
                        }
                    }, {
                        key: "getFrameBufferLen",
                        value: function() {
                            return this.parser.getFrameBufferLen ? this.parser.getFrameBufferLen() : 0
                        }
                    }, {
                        key: "getContinueBuffer",
                        value: function() {
                            return this.buffered.continueBuffer
                        }
                    }, {
                        key: "setSensitivePause",
                        value: function(t) {
                            this.sensitivePause = t
                        }
                    }, {
                        key: "getParserBufLen",
                        value: function() {
                            return this.parser.getParserBufLen()
                        }
                    }, {
                        key: "getCurrentDts",
                        value: function() {
                            return void 0 === this.remuxer.getInitDts() ? 0 : this.video.getCurrentTime() + this.remuxer.getInitDts()
                        }
                    }, {
                        key: "getCurrentSeiOffsetDts",
                        value: function() {
                            return this.offsetDts || 0
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.video ? this.video.getCurrentTime() : 0
                        }
                    }, {
                        key: "getCurrentRealTime",
                        value: function() {
                            return this.video ? this.getCurrentDts() : 0
                        }
                    }, {
                        key: "isMediaSourceOpen",
                        get: function() {
                            return this.mediaSource && "open" === this.mediaSource.readyState
                        }
                    }, {
                        key: "appendFlv",
                        value: function(t) {
                            this.addPlayEvent(),
                            this.parser.parseFlv(t)
                        }
                    }, {
                        key: "addPlayEvent",
                        value: function() {
                            this.hasData || (this.hasData = !0,
                            this.videoElement && (this.videoElement.addEventListener("loadeddata", this.onVideoLoadedBind),
                            this.requestAnimationId = requestAnimationFrame(this.checkVideoPlayingBind)))
                        }
                    }, {
                        key: "appendTs",
                        value: function(t) {
                            this.addPlayEvent(),
                            this.parser.parseTs(t)
                        }
                    }, {
                        key: "saveH264SeiData",
                        value: function(t, e) {
                            this.h264SeiInfos.add(t, e)
                        }
                    }, {
                        key: "setPlaybackrateAccess",
                        value: function(t) {
                            this.playbackrateChangeAccess = t
                        }
                    }, {
                        key: "checkBuffer",
                        value: function() {
                            if (!this.video.video.paused) {
                                var t = F.a.now()
                                  , e = this.video.video.buffered
                                  , i = e.length
                                  , s = this.getBufferLen();
                                if (this.bufStat.checkBuffer(t, s),
                                0 === this.video.video.currentTime && 0 !== this.lastPlayTime)
                                    return E.a.warn("MSEPlayer.checkBuffer onPlayerError(true) lastPlayTime=" + this.lastPlayTime + " bufLen=" + s),
                                    this._onPlayerError(!0),
                                    this._onErrorEvent(9),
                                    void (this.lastPlayTime = 0);
                                if (this.lastPlayTime = this.video.video.currentTime,
                                t > this.playStartTime + 3e3 && s > 4e3 && 0 == this.video.currentTime && (i > 0 && e.start(0) <= 4 && (E.a.log("MSEPlayer.checkBuffer buffer full but can not play"),
                                this.video.currentTime = Math.round(e.start(0) + 1)),
                                this.video.play()),
                                0 !== this.playStartTime && t > this.playStartTime + 5e3 && (s > 5e3 || 0 === s))
                                    if (0 == this.video.video.currentTime && s > 2e3)
                                        E.a.log("MSEPlayer(".concat(this._num_, ") ####### currentTime=0 ++ bufLen=").concat(s, " paused=").concat(this.video.video.paused)),
                                        this.video.play();
                                    else if (this.playStartTime = 0,
                                    0 === this.video.video.currentTime && !this.isAndroid)
                                        return E.a.warn("MSEPlayer(".concat(this._num_, ").checkBuffer onPlayerError(true) playTime=") + this.video.video.currentTime + " bufLen=" + s),
                                        this._onErrorEvent(6),
                                        void this._onPlayerError(!0);
                                null == this.videoElement && i && this.video.video.currentTime - e.start(0) > 20 && (this.audioSourceBuffer && !this.audioSourceBuffer.updating && this.audioSourceBuffer.remove(0, this.video.video.currentTime - 10),
                                this.videoSourceBuffer && !this.videoSourceBuffer.updating && this.videoSourceBuffer.remove(0, this.video.video.currentTime - 10))
                            }
                        }
                    }, {
                        key: "_onPlayerError",
                        value: function(t) {
                            !this.isPlayerError && this.handler && (this.isPlayerError = !0,
                            this.handler.onPlayerError(t))
                        }
                    }, {
                        key: "_onErrorEvent",
                        value: function(t) {
                            this.isErrorEvent || (this.isErrorEvent = !0,
                            this.handler && this.handler.onErrorEvent && this.handler.onErrorEvent({
                                type: t
                            }))
                        }
                    }, {
                        key: "onParseError",
                        value: function(t) {
                            this._onErrorEvent(t)
                        }
                    }, {
                        key: "onAvcCfgChange",
                        value: function() {
                            return E.a.log("MSEPlayer(".concat(this._num_, ").onAvcCfgChange")),
                            this.getBufferLen() < 500 ? (E.a.log("MSEPlayer(".concat(this._num_, ").onAvcCfgChange reset player")),
                            this.remuxer.reset(),
                            this.parser.setPaused(!1),
                            !1) : (this.delayReset = !0,
                            !0)
                        }
                    }, {
                        key: "onRestart",
                        value: function() {
                            E.a.log("MSEPlayer(".concat(this._num_, ").onRestart")),
                            this.reset()
                        }
                    }, {
                        key: "onVideoParseInvalid",
                        value: function() {
                            this.handler && this.handler.onVideoParseInvalid && this.handler.onVideoParseInvalid()
                        }
                    }, {
                        key: "onGop",
                        value: function(t) {
                            this.handler.onGop && this.handler.onGop(t),
                            t > this.maxGop && (this.maxGop = t,
                            E.a.log("MSEPlayer(".concat(this._num_, ").onGop update maxGop=") + this.maxGop))
                        }
                    }, {
                        key: "getMaxGop",
                        value: function() {
                            return this.maxGop
                        }
                    }, {
                        key: "setVolume",
                        value: function(t) {
                            this.video.setVolume(t)
                        }
                    }, {
                        key: "setEnableLowLatency",
                        value: function(t) {
                            this.enableLowLatency = t
                        }
                    }, {
                        key: "getVolume",
                        value: function() {
                            return this.video ? this.video.getVolume() : -1
                        }
                    }, {
                        key: "setMuted",
                        value: function(t) {
                            this.video && (this.video.setMuted(t),
                            E.a.log("MSEPlayer.setMuted ".concat(t, " hasVideo=").concat(!!this.videoSourceBuffer, " hasAudio=").concat(!!this.audioSourceBuffer)))
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.video ? this.video.getMuted() : -1
                        }
                    }, {
                        key: "setResolution",
                        value: function(t, e) {
                            E.a.log("MSEPlayer(".concat(this._num_, ").setResolution w/h=") + t + "/" + e),
                            this.width = t,
                            this.height = e
                        }
                    }, {
                        key: "getWidth",
                        value: function() {
                            return this.width
                        }
                    }, {
                        key: "getHeight",
                        value: function() {
                            return this.height
                        }
                    }, {
                        key: "setExceptionStat",
                        value: function(t, e) {
                            this.handler && this.handler.exceptionStat && this.handler.exceptionStat.setStat(t, e)
                        }
                    }, {
                        key: "turnToH264",
                        value: function() {
                            this.h265Proxy && this.h265Proxy.stop(),
                            this.handler && this.handler.turnToH264()
                        }
                    }, {
                        key: "on265StartCodeError",
                        value: function() {
                            this.h265Proxy && this.h265Proxy.on265StartCodeError(14)
                        }
                    }, {
                        key: "h265Retry",
                        value: function() {
                            this.h265Proxy && this.h265Proxy.stop(),
                            this.handler.h265Retry()
                        }
                    }, {
                        key: "onInitSegment",
                        value: function(t) {
                            t.audioCodec && (this.audioCodec = t.audioCodec),
                            t.videoCodec && (this.videoCodec = t.videoCodec),
                            this.isMediaSourceOpen && this.initSourceBuffer(),
                            t.audioMoov && this.audioSegments.push(t.audioMoov),
                            t.videoMoov && this.videoSegments.push(t.videoMoov),
                            this.playStartTime = 0
                        }
                    }, {
                        key: "onFragParsing",
                        value: function(t) {
                            "audio" === t.type ? this.audioSegments.push(t.data) : "video" === t.type && this.videoSegments.push(t.data)
                        }
                    }, {
                        key: "onFragParsed",
                        value: function() {
                            this.audioSourceBuffer && this.appendBuffer("audio"),
                            this.videoSourceBuffer && this.appendBuffer("video"),
                            null == this.videoElement && this.isLive && (this.isOnFragParsed || (this.onFragParsedTime = F.a.now(),
                            E.a.log("MSEPlayer.onFragParsed", this.onFragParsedTime),
                            this.isOnFragParsed = !0),
                            this.triggerPlay())
                        }
                    }, {
                        key: "checkVideoPlaying",
                        value: function() {
                            0 == this.pushVideoStartRenderTime && this.video && this.video.video && this.video.video.videoWidth > 0 && this.video.video.videoHeight > 0 ? this.pushVideoStartRenderTime = F.a.now() : this.requestAnimationId = requestAnimationFrame(this.checkVideoPlayingBind)
                        }
                    }, {
                        key: "onVideoLoaded",
                        value: function() {
                            E.a.log("MSEPlayer.onVideoLoaded"),
                            this.triggerPlay()
                        }
                    }, {
                        key: "reloadInError",
                        value: function() {
                            this.handler.reloadInError && this.handler.reloadInError()
                        }
                    }, {
                        key: "initSourceBuffer",
                        value: function() {
                            if (this.audioCodec && !this.audioSourceBuffer) {
                                E.a.log("MSEPlayer(".concat(this._num_, ").initSourceBuffer audio codec=") + this.audioCodec);
                                try {
                                    this.audioSourceBuffer = this.mediaSource.addSourceBuffer("video/mp4;codecs=".concat(this.audioCodec)),
                                    this.audioSourceBuffer.addEventListener("updateend", this.onAudioUpdateEndBind),
                                    this.audioSourceBuffer.addEventListener("error", this.onUpdateErrorBind)
                                } catch (t) {
                                    return E.a.warn("MSEPlayer.initSourceBuffer audio err=" + t.message),
                                    t.message && -1 != t.message.indexOf("No additional SourceBuffer objects may be added") && (E.a.log("MSEPlayer.initSourceBuffer resetMediasource in audio"),
                                    this.handler.resetMediasource) ? void this.handler.resetMediasource() : (this._onErrorEvent(4),
                                    void this._onPlayerError(!0))
                                }
                            } else
                                this.audioCodec && this.audioSourceBuffer && this.discontinuityAudio && (E.a.log("MSEPlayer(".concat(this._num_, ").initSourceBuffer reset audio codec=") + this.audioCodec),
                                this.audioSourceBuffer.changeType("video/mp4;codecs=".concat(this.audioCodec)));
                            if (this.videoCodec && !this.videoSourceBuffer) {
                                E.a.log("MSEPlayer(".concat(this._num_, ").initSourceBuffer video codec=") + this.videoCodec);
                                try {
                                    this.videoSourceBuffer = this.mediaSource.addSourceBuffer("video/mp4;codecs=".concat(this.videoCodec)),
                                    this.videoSourceBuffer.addEventListener("updateend", this.onVideoUpdateEndBind),
                                    this.videoSourceBuffer.addEventListener("error", this.onUpdateErrorBind)
                                } catch (t) {
                                    if (t.message && -1 != t.message.indexOf("No additional SourceBuffer objects may be added") && (E.a.log("MSEPlayer.initSourceBuffer resetMediasource in video"),
                                    this.handler.resetMediasource))
                                        return void this.handler.resetMediasource();
                                    E.a.warn("MSEPlayer(".concat(this._num_, ").initSourceBuffer video err=") + t.message),
                                    this._onErrorEvent(5),
                                    this._onPlayerError(!0)
                                }
                            } else
                                this.videoCodec && this.videoSourceBuffer && this.discontinuityVideo && (E.a.log("MSEPlayer(".concat(this._num_, ").initSourceBuffer reset video codec=") + this.videoCodec),
                                this.videoSourceBuffer.changeType("video/mp4;codecs=".concat(this.videoCodec)));
                            this.discontinuityVideo = !1,
                            this.discontinuityAudio = !1
                        }
                    }, {
                        key: "appendBuffer",
                        value: function(t) {
                            if (0 != this.mediaSource.sourceBuffers.length && !this.isPlayerError)
                                if ("audio" == t) {
                                    if (this.audioSegments.length > 0 && this.audioSourceBuffer && !this.audioSourceBuffer.updating) {
                                        var e = this.audioSegments.shift();
                                        try {
                                            this.audioSourceBuffer.appendBuffer(e),
                                            this.videoDataAppended = !0
                                        } catch (t) {
                                            E.a.warn("MSEPlayer(".concat(this._num_, ").appendBuffer audio err=") + t.message),
                                            this._onErrorEvent(7),
                                            this._onPlayerError(!0)
                                        }
                                    }
                                } else {
                                    if ("video" != t)
                                        throw new Error("MSEPlayer(".concat(this._num_, ").appendBuffer type error! Valide type is audio or video."));
                                    if (this.videoSegments.length > 0 && this.videoSourceBuffer && !this.videoSourceBuffer.updating) {
                                        var i = this.videoSegments.shift();
                                        try {
                                            this.videoSourceBuffer.appendBuffer(i),
                                            this.videoDataAppended = !0
                                        } catch (t) {
                                            E.a.warn("MSEPlayer(".concat(this._num_, ").appendBuffer video err=") + t.message),
                                            this._onErrorEvent(8),
                                            this._onPlayerError(!0)
                                        }
                                    }
                                }
                        }
                    }, {
                        key: "recvDataFull",
                        value: function() {
                            this.handler && this.handler.recvDataFull && this.handler.recvDataFull()
                        }
                    }, {
                        key: "getVideoFrames",
                        value: function() {
                            return this.parser && this.parser.getVideoFrames ? this.parser.getVideoFrames() : 0
                        }
                    }, {
                        key: "getAudioFrames",
                        value: function() {
                            return this.parser && this.parser.getAudioFrames ? this.parser.getAudioFrames() : 0
                        }
                    }, {
                        key: "triggerH265Play",
                        value: function(t, e) {
                            this.isH265Play || (E.a.log("MSEPlayer.triggerH265Play"),
                            this.isH265Play = !0,
                            this.h265Proxy && this.h265Proxy.reportDecodeRenderTime(t, e))
                        }
                    }, {
                        key: "triggerPlay",
                        value: function() {
                            if (!this.playing && this.isMediaSourceOpen) {
                                if (this.playing = !0,
                                this.playStartTime = F.a.now(),
                                this.videoElement && !this.videoElement.autoplay || this.video.play(),
                                M.platform === D.PLATFORM_TYPE_NAME.wap)
                                    return;
                                "safari" === O.a.name ? M.safariFirstLoad ? (M.safariFirstLoad = !1,
                                this.triggerPlayVideo()) : ls.once(this.triggerPlayVideo, this, M.safariPlayDelay) : this.triggerPlayVideo()
                            }
                        }
                    }, {
                        key: "triggerPlayVideo",
                        value: function() {
                            var t = !!this.videoSourceBuffer
                              , e = "h264";
                            13 == this.parser.codec ? e = "av1" : 12 == this.parser.codec && (e = "h265"),
                            E.a.log("MSEPlayer.onPlayVideo codec: ", e),
                            0 == this.parser.decodeIFRTime && 1 == Number(M.isNoVideoReport) && this.handler.eventEmitter && this.handler.eventEmitter.trigger(y.P2P_REPORT),
                            this.h265Proxy && this.h265Proxy.isReady ? this.handler.onPlayVideo(this.video.video, this.width, this.height, t, this.h265Proxy.canvas, this.onFragParsedTime, e) : this.handler.onPlayVideo(this.video.video, this.width, this.height, t, null, this.onFragParsedTime, e),
                            this.startPlayTime = F.a.now()
                        }
                    }, {
                        key: "triggerH5PlayVideo",
                        value: function() {
                            if (E.a.log("trigger h5 video play"),
                            this.pausedByBrowser)
                                this.pausedByBrowser = !1;
                            else {
                                this.startPlayTime = F.a.now();
                                var t = !!this.videoSourceBuffer;
                                this.handler.onPlayVideo(this.video.video, this.width, this.height, t, null, this.onFragParsedTime)
                            }
                        }
                    }, {
                        key: "onH264Sei",
                        value: function(t, e) {
                            this.handler.onSendSeiData(t, e, this.video.video.currentTime)
                        }
                    }, {
                        key: "onScriptVolumeInfo",
                        value: function(t, e) {
                            this.handler.onSendScriptVolumeInfo(t, e)
                        }
                    }, {
                        key: "onMediaSourceOpen",
                        value: function() {
                            this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind),
                            (this.audioSegments.length > 0 || this.videoSegments.length > 0) && (this.initSourceBuffer(),
                            this.appendBuffer("audio"),
                            this.appendBuffer("video"),
                            E.a.log("MSEPlayer.onMediaSourceOpen"),
                            0 == this.onFragParsedTime && (this.onFragParsedTime = F.a.now()),
                            null == this.videoElement && this.triggerPlay())
                        }
                    }, {
                        key: "onAudioUpdateEnd",
                        value: function() {
                            this.appendBuffer("audio"),
                            this.checkAppendOver()
                        }
                    }, {
                        key: "onVideoUpdateEnd",
                        value: function() {
                            this.appendBuffer("video"),
                            this.checkAppendOver()
                        }
                    }, {
                        key: "checkAppendOver",
                        value: function() {
                            0 === this.videoSegments.length && 0 === this.audioSegments.length && (this.videoSourceBuffer && this.videoSourceBuffer.updating || this.audioSourceBuffer && this.audioSourceBuffer.updating || this.handler && this.handler.onSBUpdateEnd && this.handler.onSBUpdateEnd())
                        }
                    }, {
                        key: "onUpdateError",
                        value: function(t) {
                            E.a.warn("MSEPlayer.onUpdateError", t)
                        }
                    }, {
                        key: "onVideoPause",
                        value: function(t) {
                            this.userPaused = !0
                        }
                    }, {
                        key: "onPauseByBrowser",
                        value: function() {
                            this.handler && (this.handler.onPauseByBrowser && this.handler.onPauseByBrowser(),
                            this.handler.updateStatus && this.handler.updateStatus("BROWSER_PAUSE"),
                            this.pausedByBrowser = !0,
                            this.handler.eventEmitter && this.handler.eventEmitter.trigger(y.BROWSER_PAUSE, {
                                video: this.video.video
                            }))
                        }
                    }, {
                        key: "onVideoPlaying",
                        value: function() {
                            if (this.handler && this.handler.updateStatus) {
                                if (this.video.video && this.video.video.paused)
                                    return void E.a.log("video is playing, video.paused=", this.video.video.paused);
                                E.a.log("video is playing", this.isPureAudio);
                                var t = this.isPureAudio ? "AUDIO_PLAYING" : g;
                                this.handler.updateStatus(t)
                            }
                        }
                    }, {
                        key: "onVideoPlay",
                        value: function(t) {
                            this.userPaused = !1
                        }
                    }, {
                        key: "onVideoError",
                        value: function(t) {
                            var e = "";
                            if (this.video.video.error) {
                                var i = this.video.video.error.code;
                                e = " errCode=" + i + " " + ["Unknow", "用户终止", "网络错误", "解码错误", "格式不支持"][i],
                                3 != i && 4 != i || (this._onErrorEvent(3 == i ? 1 : 2),
                                this._onPlayerError(!0),
                                localStorage.decodeabnormal = "abnormal_" + (new Date).getTime())
                            }
                            E.a.warn("MSEPlayer.onVideoError" + e)
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            E.a.info("MSEPlayer.pause"),
                            this.userPaused = !0,
                            this.video && this.video.pause(),
                            this.handler.eventEmitter && this.handler.eventEmitter.roomRecordStat && this.handler.eventEmitter.roomRecordStat.roomNoRenderStat.pause()
                        }
                    }, {
                        key: "play",
                        value: function() {
                            E.a.info("MSEPlayer.play"),
                            this.userPaused = !1,
                            this.video && this.video.play()
                        }
                    }, {
                        key: "seek",
                        value: function(t) {
                            this.lastPlayTime = t,
                            E.a.info("MSEPlayer.seek seekTime=" + t, "currentTime=" + this.video.video.currentTime),
                            this.video && this.video.seek(t)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            if (this.playing && this.isMediaSourceOpen) {
                                this.parser && this.parser.fps && (this.metadata.fps = this.parser.fps.getFps(),
                                this.metadata.recvVideoFps = this.parser.fps.getRecvFps()),
                                this.parser && this.parser.audioFps && (this.metadata.audioFps = this.parser.audioFps.getFps(),
                                this.metadata.recvAudioFps = this.parser.audioFps.getRecvFps());
                                var i = this.getBufferLen()
                                  , s = Number(localStorage._printBufferLen);
                                if (-1 == s || s > 0 && s == this._num_) {
                                    var a = Math.max(0, i / 100);
                                    E.a.debug(this._getTag(), "bufLen", "-".repeat(a), i)
                                }
                                if (Number(localStorage._printMseLog) && this.audioSegments && this.videoSegments && E.a.debug("MSE aSegments=".concat(this.audioSegments.length, " vSegments=").concat(this.videoSegments.length, " bufLen=").concat(this.getBufferLen())),
                                !this.video.video.paused && !this.userPaused) {
                                    if (null == this.videoElement && this.isLive && e % 4 == 0 && i > M.jitJump[0] && !Number(localStorage._localFlvTest)) {
                                        var r = .001 * (M.jitJump[0] - M.jitJump[1]);
                                        this.video.video.currentTime += r,
                                        E.a.warn("MSEPlayer.onCheckTimer jumpTs=".concat(r, " bufLen=").concat(this.getBufferLen()))
                                    }
                                    this.checkBuffer(),
                                    this.onJitterTimer();
                                    var n = (this.handler ? this.handler.lastEmptySliceTs : 0) || 0
                                      , o = n > 0 && t - n < 3e3
                                      , u = !!this.videoSourceBuffer;
                                    this.isLive && u && this.msePause.pausedTs > 0 && t - this.msePause.pausedTs > 5e3 && !o && this.sensitivePause && (E.a.warn("MSEPlayer.onCheckTimer paused 5 sec."),
                                    this._onErrorEvent(3),
                                    this._onPlayerError(!0),
                                    this.handler && this.handler.onPause5Sec && this.handler.onPause5Sec())
                                }
                            } else
                                this.parser && this.parser.printPlayFrameInfo && this.parser.printPlayFrameInfo()
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            if (1 === Number(M.isMute) && this.muffledVoice(),
                            this.playing && this.isMediaSourceOpen && !this.video.video.paused && !this.userPaused) {
                                this.checkEmptyFrames(),
                                this.checkDelayReset(),
                                this.msePause.check(t);
                                var i = (this.handler ? this.handler.lastEmptySliceTs : 0) || 0
                                  , s = i > 0 && t - i < 3e3
                                  , a = !!this.videoSourceBuffer;
                                if (null == this.videoElement && !this.pause500checked && a && this.msePause.pausedTs > 0 && t - this.msePause.pausedTs > 500 && !s) {
                                    this.pause500checked = !0;
                                    var r = this.bufferedInfo()
                                      , n = r.bufferLen.toFixed(2)
                                      , o = (r.nextStart - r.end).toFixed(2);
                                    if (E.a.info("MSEPlayer(".concat(this._num_, ").onCheckFastTimer paused"), "bufferLen=" + n, "hole=" + o, "nextStart=" + r.nextStart.toFixed(2), "currentTime=" + this.video.video.currentTime),
                                    this.isLive && "ts" != this.videoType) {
                                        this.video.printBuffered();
                                        var u = Number(r.nextStart);
                                        this.video.video && u && o > 0 && o < 3 && u - this.video.video.currentTime > .5 && (this.video.video.currentTime = u,
                                        E.a.log("MSEPlayer(".concat(this._num_, ").onCheckFastTimer try jump currentTime=") + this.video.video.currentTime))
                                    }
                                }
                            }
                        }
                    }, {
                        key: "checkEmptyFrames",
                        value: function() {
                            this.handler.hasOwnProperty("hasEmptyFrames") && this.parser.hasEmptyFrames && (this.handler.hasEmptyFrames = this.parser.hasEmptyFrames)
                        }
                    }, {
                        key: "checkDelayReset",
                        value: function() {
                            this.delayReset && this.getBufferLen() < 500 && (E.a.log("MSEPlayer(".concat(this._num_, ").checkDelayReset reset player")),
                            this.remuxer.reset(),
                            this.parser.setPaused(!1),
                            this.delayReset = !1)
                        }
                    }, {
                        key: "_msePaused",
                        value: function(t) {
                            this.pauseStat.pause(),
                            this.handler.eventEmitter && this.handler.eventEmitter.roomRecordStat && this.handler.eventEmitter.roomRecordStat.roomNoRenderStat.pause(),
                            this.handler.onPlayPause(t, !!this.videoSourceBuffer)
                        }
                    }, {
                        key: "_mseResume",
                        value: function(t, e) {
                            this.pause500checked = !1,
                            this.pauseStat.resume(),
                            this.handler.eventEmitter && this.handler.eventEmitter.roomRecordStat && this.handler.eventEmitter.roomRecordStat.roomNoRenderStat.resume(),
                            this.parser.dropFrameCtrl && this.pausePerf.checkLive(this.pid, this.bitrate, this.pauseStat.getCnt(), this.buffered.continueBuffer) && this.parser.dropFrameCtrl.start(),
                            this.handler.onPlayResume(t, !!this.videoSourceBuffer)
                        }
                    }, {
                        key: "bufferedInfo",
                        value: function() {
                            var t, e, i, s, a, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : .2, n = [], o = [], u = this.video.video.buffered;
                            for (a = 0; a < u.length; a++)
                                n.push({
                                    start: u.start(a),
                                    end: u.end(a)
                                });
                            for (n.sort((function(t, e) {
                                return t.start - e.start || e.end - t.end
                            }
                            )),
                            a = 0; a < n.length; a++) {
                                var h = o.length;
                                if (h) {
                                    var l = o[h - 1].end;
                                    n[a].start - l < r ? n[a].end > l && (o[h - 1].end = n[a].end) : o.push(n[a])
                                } else
                                    o.push(n[a])
                            }
                            var c = this.video.video.currentTime;
                            for (a = 0,
                            t = 0,
                            e = i = c; a < o.length; a++) {
                                var d = o[a].start
                                  , f = o[a].end;
                                if (c + r >= d && c < f)
                                    e = d,
                                    t = (i = f) - c;
                                else if (c + r < d) {
                                    s = d;
                                    break
                                }
                            }
                            return s || (s = i),
                            {
                                bufferLen: t,
                                start: e,
                                end: i,
                                nextStart: s
                            }
                        }
                    }, {
                        key: "printBuffer",
                        value: function(t) {
                            if (this.video.video) {
                                var e = this.video.video.buffered
                                  , i = "buffered=[" + (1e3 * e.start(0) | 0) + "," + (1e3 * e.end(0) | 0) + "]"
                                  , s = 1e3 * this.video.video.currentTime >> 0
                                  , a = this.getBufferLen();
                                E.a.log("MSEPlayer(".concat(this._num_, ").printBuffer ").concat(t, " currentTime=").concat(s, " bufLen=").concat(a, " ").concat(i))
                            }
                        }
                    }, {
                        key: "playbackRateSet",
                        value: function(t) {
                            var e = this
                              , i = this.getPlayVideo();
                            if (i) {
                                var s = function(t) {
                                    if (e.playRateIncrease % 2 == 0) {
                                        var s = t < 1 && t + .02 > 1 ? 1 : t + .02;
                                        s > M.playbackrateMax && (s = M.playbackrateMax),
                                        e.playRateDecrease = 0,
                                        i.playbackRate = s
                                    }
                                }
                                  , a = function(t) {
                                    if (e.playRateDecrease % 2 == 0) {
                                        var s = t > 1 && t - .02 < 1 ? 1 : t - .02;
                                        s < M.playbackrateMin && (s = M.playbackrateMin),
                                        e.playRateIncrease = 0,
                                        i.playbackRate = s
                                    }
                                }
                                  , r = this.getBufferLen()
                                  , n = i.playbackRate;
                                t < 0 ? a(n) : t > 0 ? s(n) : 1 !== n && (n < 1 && r < this.JITTER_BUFLEN ? a(n) : n > 1 && r > this.JITTER_BUFLEN ? s(n) : i.playbackRate = 1),
                                this.playRateDecrease++,
                                this.playRateIncrease++
                            }
                        }
                    }, {
                        key: "setPlaybackRate",
                        value: function(t) {
                            var e = this.getPlayVideo();
                            e && (e.playbackRate = t)
                        }
                    }, {
                        key: "onJitterTimer",
                        value: function(t, e) {
                            if (this.playing && ("ts" != this.videoType || this.isLive) && this.autoJitter && !this.autoBitrateJitter) {
                                var i = this.getPlayVideo();
                                if (i) {
                                    var s = this.getBufferLen();
                                    if (M.getEnableJumpBuffer()) {
                                        var a = F.a.now();
                                        if (this.latencySeek > 0 && s > 4e3)
                                            return void (i.currentTime += s - this.latencySeek);
                                        if (this.enableLowLatency && s > Number(M.jitLowLatency))
                                            i.currentTime += s - M.jitLowLatency;
                                        else {
                                            var r = s - this.JITTER_BUFLEN;
                                            if (a - this.startPlayTime < this.startCd)
                                                return;
                                            if (s >= (M.setVideoCTCfg[2] || 1e4))
                                                return void this.setJumpBufferCurrentTime(r, s, 0, a);
                                            if (this.isStartBuffer && a - this.startPlayTime > this.startCd)
                                                r >= M.setVideoCTCfg[1] && this.setJumpBufferCurrentTime(r, s, 1, a),
                                                this.isStartBuffer = !1;
                                            else if (a - this.setVideoCurrentTime >= this.bufferCd || 0 == this.setVideoCurrentTime) {
                                                if (a - this.startMoreBufferTime >= this.bufferMoreContinueTime && 0 != this.startMoreBufferTime)
                                                    return this.setJumpBufferCurrentTime(r, s, 2, a),
                                                    void (this.startMoreBufferTime = 0);
                                                r >= M.setVideoCTCfg[1] ? 0 == this.startMoreBufferTime && (this.startMoreBufferTime = a) : this.startMoreBufferTime = 0
                                            }
                                        }
                                    } else if (this.latencySeek > 0 && s > 4e3)
                                        i.currentTime += s - this.latencySeek;
                                    else
                                        try {
                                            var n = 0;
                                            s < this.JITTER_BUFMIN ? n = s - this.JITTER_BUFLEN : s > this.JITTER_BUFMAX && (n = s - this.JITTER_BUFMAX),
                                            this.enableLowLatency && s > Number(M.jitLowLatency) ? i.playbackRate = 1.1 : this.playbackrateChangeAccess ? (n = Number(localStorage.ab_adjust) || n,
                                            1 != i.playbackRate && this.isPlaybackRateNormal && E.a.log("MSEPlayer.onJitterTimer.playbackRate=", i.playbackRate),
                                            1 != i.playbackRate ? this.isPlaybackRateNormal = !1 : this.isPlaybackRateNormal = !0,
                                            this.playbackRateSet(n)) : i.playbackRate = 1,
                                            -1 === Number(localStorage._print_ab_log) && E.a.log("BUFMIN: %d, BUFMAX: %d, BUFLEN:%d, bufLen: %d, adjust: %d, playbackRate: %f", this.JITTER_BUFMIN, this.JITTER_BUFMAX, this.JITTER_BUFLEN, s, n, i.playbackRate)
                                        } catch (t) {
                                            E.a.error("MSEPlayer.onJitterTimer set playbackRateSet error", t)
                                        }
                                }
                            }
                        }
                    }, {
                        key: "setJumpBufferCurrentTime",
                        value: function(t, e, i, s) {
                            this.h265Proxy && this.h265Proxy.isReady ? this.h265Proxy.jumpBuffer(t, e, i, s) : this.setVideoCurrentTimeHand(t, e, i, s)
                        }
                    }, {
                        key: "setVideoCurrentTimeHand",
                        value: function(t, e, i, s) {
                            var a = this.getPlayVideo();
                            if (a) {
                                var r = "";
                                0 === i ? r = "maxBuffer" : 1 === i ? r = "fiveJump" : 2 === i && (r = "ContinueJudgeJump"),
                                E.a.log("MSEPlayer.onJitterTimer.jumpBuffer ".concat(r, " video.currentTime before=").concat(a.currentTime, " bufLen=").concat(e, " minusBuffer=").concat(t, " curDts=").concat(this.getCurrentDts())),
                                a.currentTime += t / 1e3,
                                this.setVideoCurrentTime = s,
                                E.a.log("MSEPlayer.onJitterTimer.jumpBuffer ".concat(r, " video.currentTime now=").concat(a.currentTime, " curDts=").concat(this.getCurrentDts(), " bufLen=").concat(this.getBufferLen()))
                            }
                        }
                    }, {
                        key: "setJitter",
                        value: function() {
                            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3e3
                              , e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3
                              , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5e3;
                            this.JITTER_BUFLEN = t,
                            this.JITTER_BUFMIN = e,
                            this.JITTER_BUFMAX = i,
                            E.a.info("".concat(this._getTag(), " MSEPlayer.setJitter bufMin=").concat(e, " bufLen=").concat(t, " bufMax=").concat(i))
                        }
                    }, {
                        key: "_getTag",
                        value: function() {
                            var t = this.handler.constructor.name;
                            return this._num_ + " " + t
                        }
                    }, {
                        key: "muffledVoice",
                        value: function() {
                            var t = this;
                            if (this.handler && this.handler.voiceEliminationData) {
                                var e = this.handler.voiceEliminationData
                                  , i = !1;
                                if (e && 0 !== e.length) {
                                    var s = this.getCurrentDts()
                                      , a = 0
                                      , r = 0;
                                    [].slice.call(e).map((function(e, n) {
                                        a = e.begin,
                                        r = e.end,
                                        0 == e.type && (a += t.offsetDts,
                                        r += t.offsetDts),
                                        s >= a && s <= r ? (i = !0,
                                        E.a.log("MSEPlayer.muffledVoice data", (0,
                                        d.default)(e))) : s > r && (E.a.log("MSEPlayer.muffledVoice stop muffle audio"),
                                        t.handler.voiceEliminationData.splice(n, 1))
                                    }
                                    )),
                                    i ? this.video.setMuffledVolume(!0) : this.video.setMuffledVolume(!1)
                                }
                            }
                        }
                    }]),
                    t
                }()
                  , Xa = {
                    isMacChrome72: function() {
                        return "mac" === O.a.platform && "chrome" === O.a.name && 72 === Number(O.a.version.major)
                    },
                    isNeedAud: function() {
                        return O.a.chrome && O.a.version.major >= 73
                    },
                    isBrowserSupport: function() {
                        return O.a.firefox || O.a.opera || O.a.chrome && 53 != O.a.version.major || O.a.safari || O.a.edge || O.a.edg
                    },
                    isP2PCooling: function() {
                        return 1 === Number(M.needCooling) && 1 === Number(localStorage.getItem("__p2p_cooling_play"))
                    },
                    isSupportP2P: function() {
                        return this.isBrowserSupport() && !this.isP2PCooling()
                    },
                    isWebrtcSupport: function() {
                        try {
                            var t = navigator.userAgent
                              , e = {
                                Trident: t.indexOf("Trident") > 0 || t.indexOf("NET CLR") > 0,
                                Presto: t.indexOf("Presto") > 0,
                                WebKit: t.indexOf("AppleWebKit") > 0,
                                Gecko: t.indexOf("Gecko/") > 0,
                                UC: t.indexOf("UC") > 0 || t.indexOf(" UBrowser") > 0,
                                BaiDu: t.indexOf("Baidu") > 0 || t.indexOf("BIDUBrowser") > 0,
                                Maxthon: t.indexOf("Maxthon") > 0,
                                LBBROWSER: t.indexOf("LBBROWSER") > 0,
                                SouGou: t.indexOf("MetaSr") > 0 || t.indexOf("Sogou") > 0,
                                IE: t.indexOf("MSIE") > 0 || t.indexOf("Trident") > 0,
                                Firefox: t.indexOf("Firefox") > 0,
                                Opera: t.indexOf("Opera") > 0 || t.indexOf("OPR") > 0,
                                Safari: t.indexOf("Safari") > 0,
                                Chrome: t.indexOf("Chrome") > 0 || t.indexOf("CriOS") > 0,
                                Wechat: t.indexOf("MicroMessenger") > 0,
                                Windows: t.indexOf("Windows") > 0,
                                Linux: t.indexOf("Linux") > 0,
                                Mac: t.indexOf("Macintosh") > 0,
                                Android: t.indexOf("Android") > 0 || t.indexOf("Adr") > 0,
                                WP: t.indexOf("IEMobile") > 0,
                                BlackBerry: t.indexOf("BlackBerry") > 0 || t.indexOf("RIM") > 0 || t.indexOf("BB") > 0,
                                MeeGo: t.indexOf("MeeGo") > 0,
                                Symbian: t.indexOf("Symbian") > 0,
                                iOS: t.indexOf("like Mac OS X") > 0,
                                iPhone: t.indexOf("iPh") > 0,
                                iPad: t.indexOf("iPad") > 0,
                                Mobile: t.indexOf("Mobi") > 0 || t.indexOf("iPh") > 0 || t.indexOf("480") > 0,
                                Tablet: t.indexOf("Tablet") > 0 || t.indexOf("iPad") > 0 || t.indexOf("Nexus 7") > 0
                            };
                            return e.Chrome && (e.Chrome = !(e.Opera || e.BaiDu || e.Maxthon || e.SouGou || e.UC || e.LBBROWSER)),
                            e.Chrome
                        } catch (t) {
                            return !1
                        }
                    }
                }
                  , Ja = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.flvPlayer = e,
                        this.eventEmitter = e.eventEmitter,
                        this.jumpToP2PCd = 1e3 * (Math.floor(120 * Math.random()) + 180),
                        this.nextJumpToP2PTs = 0,
                        this.waitPlayEnd = !1,
                        this.lastP2PInfo = null
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.waitPlayEnd = !1
                        }
                    }, {
                        key: "initJumpTs",
                        value: function(t) {
                            0 == this.nextJumpToP2PTs && (this.nextJumpToP2PTs = t + this.jumpToP2PCd)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            if (!this.waitPlayEnd && Xa.isSupportP2P() && !(t < this.nextJumpToP2PTs)) {
                                var i = this.flvPlayer;
                                if (this.lastP2PInfo && !M.isCloseP2P(this.lastP2PInfo.uid) && this.lastP2PInfo.lineType == i.lineType) {
                                    var s = this.lastP2PInfo.sStreamName;
                                    s && i.url && -1 != i.url.indexOf(s) && (i.getBufferLen() < i.mse.JITTER_BUFLEN || (i.loader && (E.a.warn("BackToP2P.tryPlayP2P"),
                                    i.loader.close()),
                                    this.waitPlayEnd = !0))
                                }
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            var i = this.flvPlayer.getBufferLen();
                            this.waitPlayEnd && i < 1e3 && (this.waitPlayEnd = !1,
                            this.jumpToP2PCd < 18e5 && (this.jumpToP2PCd += 12e4),
                            this.nextJumpToP2PTs = t + this.jumpToP2PCd,
                            this.flvPlayer.getRecSysRsp({
                                info: this.flvPlayer.info,
                                type: "flv",
                                metadata: this.flvPlayer.mse.metadata,
                                isBackToP2P: !0
                            }))
                        }
                    }, {
                        key: "recSysRspHandler",
                        value: function(t, e, i) {
                            t && e && e.tRecSysInfo && 0 == e.tRecSysInfo.lAction || (E.a.warn("BackToP2P.onCheckFastTimer jumpToP2PCd=".concat(this.jumpToP2PCd / 6e4, "min")),
                            this.eventEmitter.trigger(y.FLV_TRY_TO_P2P),
                            this.lastP2PInfo = null)
                        }
                    }]),
                    t
                }()
                  , Qa = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.flvPlayer = e,
                        this.stat = e.stat,
                        this.tsdb = e.tsdb,
                        this.img = null,
                        this.isPaused = !1,
                        this.isFirstReport = !0
                    }
                    return Object(m.a)(t, [{
                        key: "sendFlow",
                        value: function(t, e, i, s, a, r) {
                            var n = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
                            this.record(t, e, i, s, a, r, n)
                        }
                    }, {
                        key: "getUserProperty",
                        value: function() {
                            var t = this.tsdb;
                            return M[100] ? M[101] ? Xa.isBrowserSupport() ? Xa.isP2PCooling() ? D.userProperty.P2P_COOLING : 1 == t.turnToFlvTimes && 0 == t.restartTimes ? t.turnToFlvReason == D.turnToFlvReason.FULL_CONNECT_TIMEOUT ? D.userProperty.FIRST_FULL_CONNECT_TIMEOUT : t.turnToFlvReason == D.turnToFlvReason.FULL_NO_DATA ? D.userProperty.FIRST_FULL_NO_DATA : t.turnToFlvReason == D.turnToFlvReason.FULL_PLAY_FAIL ? D.userProperty.FIRST_FULL_PLAY_FAIL : t.turnToFlvReason == D.turnToFlvReason.SUB_CONNECT_TIMEOUT ? D.userProperty.SUB_CONNECT_TIMEOUT : t.turnToFlvReason == D.turnToFlvReason.SUB_NO_DATA ? D.userProperty.SUB_NO_DATA : t.turnToFlvReason == D.turnToFlvReason.P2P_ARGS_ERROR ? D.userProperty.P2P_ARGS_ERROR : t.turnToFlvReason == D.turnToFlvReason.P2P_COOLING ? D.userProperty.P2P_COOLING : t.turnToFlvReason == D.turnToFlvReason.IS_NOT_FIRST_FETCH ? D.userProperty.IS_NOT_FIRST_FETCH : t.turnToFlvReason == D.turnToFlvReason.VIDEO_BUFFER_EMPTY ? D.userProperty.VIDEO_BUFFER_EMPTY : D.userProperty.UNKNOW : t.turnToFlvReason == D.turnToFlvReason.FULL_CONNECT_TIMEOUT || t.turnToFlvReason == D.turnToFlvReason.FULL_NO_DATA || t.turnToFlvReason == D.turnToFlvReason.FULL_PLAY_FAIL ? t.restartReason == D.restartReason.RANGE_SEQ_MAX ? D.userProperty.RESTART_RANGE_MAX : t.restartReason == D.restartReason.RANGE_SEQ_LARGE ? D.userProperty.RESTART_RANGE_LARGE : t.restartReason == D.restartReason.CONNECT ? D.userProperty.RESTART_CONNECT : t.restartReason == D.restartReason.MULTI_CDN ? D.userProperty.RESTART_MUTI_CDN : t.restartReason == D.restartReason.PLAYER_NO_DATA ? D.userProperty.RESTART_PLAYER_NO_DATA : t.restartReason == D.restartReason.PLAYER_ERROR ? D.userProperty.RESTART_PLAYER_ERROR : t.restartReason == D.restartReason.FLV_TO_P2P ? D.userProperty.FLV_TO_P2P : t.restartReason == D.restartReason.LOST_SEQ ? D.userProperty.LOST_SEQ : D.userProperty.UNKNOW : t.turnToFlvReason == D.turnToFlvReason.SUB_CONNECT_TIMEOUT ? D.userProperty.SUB_CONNECT_TIMEOUT : t.turnToFlvReason == D.turnToFlvReason.SUB_NO_DATA ? D.userProperty.SUB_NO_DATA : t.turnToFlvReason == D.turnToFlvReason.P2P_ARGS_ERROR ? D.userProperty.P2P_ARGS_ERROR : t.turnToFlvReason == D.turnToFlvReason.P2P_COOLING ? D.userProperty.P2P_COOLING : t.turnToFlvReason == D.turnToFlvReason.IS_NOT_FIRST_FETCH ? D.userProperty.IS_NOT_FIRST_FETCH : t.turnToFlvReason == D.turnToFlvReason.VIDEO_BUFFER_EMPTY ? D.userProperty.VIDEO_BUFFER_EMPTY : D.userProperty.UNKNOW : D.userProperty.BROWSER_UN_SUPPORT : D.userProperty.CLIENT_CLOSE : D.userProperty.SERVER_CLOSE
                        }
                    }, {
                        key: "record",
                        value: function(t, e, i, s, a, r) {
                            var n = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
                            this.volumeEnergy = r,
                            i && (this.isPaused = !0);
                            var o = this.getUserProperty();
                            this.stat.setCoreDim(At, o),
                            this.stat.setCoreDim(Lt, 0),
                            this.stat.setComDim(It, this.flvPlayer.mse.JITTER_BUFLEN);
                            var u = [];
                            this.flvPlayer.mse.parser.timeStampStat.reset();
                            var h = this.flvPlayer.info;
                            this.stat.setCoreDim(bt, i ? 100 : 0),
                            this.stat.setCoreDim(Ct, i || t > 0 ? 100 : 0),
                            this.stat.setCoreDim(wt, a),
                            this.stat.setCore($t, this.flvPlayer.getBufferLen() + this.flvPlayer.getFrameBufferLen()),
                            this.stat.setCore(te, this.flvPlayer.getBufferLen()),
                            this.stat.setCore(Be, this.flvPlayer.getFrameBufferLen()),
                            this.recordSample(),
                            this.recordAuto(),
                            this.flvPlayer.recSysStat.recordHeart(this.stat),
                            this.flvPlayer.mse.buffered.record(this.stat),
                            this.flvPlayer.mse.pauseStat.record(this.stat),
                            this.flvPlayer.autoMonitor.recordHeartType();
                            var l = this.flvPlayer.mse.metadata
                              , c = l.recvVideoFps
                              , d = l.recvAudioFps;
                            this.stat.setComp(Ht, Yt, d),
                            this.stat.setComp(Ht, Wt, c);
                            var f = this.flvPlayer.mse.bufStat.getStats()
                              , p = f.emptyTime
                              , m = f.emptyCnt;
                            if (this.stat.setComp(Ht, Kt, m),
                            this.stat.setComp(Ht, qt, p),
                            this.flvPlayer.h265Proxy.rendering) {
                                var y = this.flvPlayer.h265Proxy.getStats()
                                  , v = y.statProps
                                  , _ = y.h265PauseCnt;
                                for (var g in v)
                                    "toDecode" == g ? this.recordH265Frame(v[g], _t) : "decoded" == g ? this.recordH265Frame(v[g], gt) : "render" == g ? this.recordH265Frame(v[g], St) : "rawList" == g ? this.recordH265Frame(v[g], vt) : "frameList" == g ? this.recordH265Frame(v[g], Tt) : this.stat.setComp(Xt, g, v[g].join("|"));
                                this.stat.setCoreDim(Bt, _ > 0 ? 100 : 0)
                            }
                            this.flvPlayer.eventEmitter && this.flvPlayer.eventEmitter.costUs > 0 && this.stat.setComp(Xt, "costUs", this.flvPlayer.eventEmitter.costUs);
                            var S = this.flvPlayer.loader.speed;
                            this.stat.setComp(Ht, zt, S);
                            var T = this.flvPlayer.mse.curVideoDts
                              , P = this.flvPlayer.mse.curAudioDts;
                            this.stat.setComp(Ht, jt, T),
                            this.stat.setComp(Ht, Gt, P),
                            this.stat.setCompFormat(Ht, ":", ","),
                            this.recordC2CDelay(),
                            this.flvPlayer.mse.metadata && this.flvPlayer.mse.metadata.codecname && this.stat.setComDim(tt, this.flvPlayer.mse.metadata.codecname),
                            this.isFirstReport ? this.isFirstReport = !1 : u.push({
                                sMetricName: Wi.METRIC.VIDEO_BAD_QUALITY_RATIO,
                                vField: {
                                    value: this.isPaused ? 100 : 0,
                                    pausecnt: t
                                },
                                vDimension: {
                                    p2p: 0,
                                    originalBitrate: 0 === h.originalBitrate ? 1 : 0,
                                    p2pCooling: L.p2pCooling ? 1 : 0,
                                    topSid: h.sid,
                                    reason: a,
                                    quality: i || t > 0 ? 100 : 0
                                },
                                vExLog: {
                                    cdnip: this.flvPlayer.cdnip
                                }
                            }),
                            this.stat.setComDim(it, this.flvPlayer.cdnip),
                            this.recordAiData(),
                            this.recordMuteData(),
                            this.stat.fill(u, n),
                            this.tsdb.sendMetrics(u),
                            this.isPaused = !1
                        }
                    }, {
                        key: "recordSample",
                        value: function(t) {
                            this.flvPlayer.sampleController.recordStat(this.stat, t),
                            this.flvPlayer.mse.parser.avSample.recordStat(this.stat)
                        }
                    }, {
                        key: "recordAuto",
                        value: function() {
                            var t = this.flvPlayer.ctrlBitrate;
                            t && (this.stat.setCoreDim(Dt, t._switchUpReason),
                            this.stat.setCoreDim(Ot, t._switchDownReason))
                        }
                    }, {
                        key: "recordH265Frame",
                        value: function(t, e) {
                            var i = this;
                            this.stat.setComp(e, "size", t.length),
                            t.map((function(t, s) {
                                i.stat.setComp(e, "k" + (s + 1), t),
                                i.stat.setCompFormat(e, ":", ",")
                            }
                            ))
                        }
                    }, {
                        key: "recordAiData",
                        value: function() {
                            var t = this.flvPlayer.getAiStat()
                              , e = t.aiP2PCnt
                              , i = t.aiFlvCnt
                              , s = t.aiP2PTimeoutCnt
                              , a = t.aiFlvTimeoutCnt
                              , r = t.aiP2PErrorCnt
                              , n = t.aiFlvErrorCnt
                              , o = t.aiP2PSwitchCnt
                              , u = t.aiFlvSwitchCnt
                              , h = t.aiP2PNotSwitchCnt
                              , l = t.aiFlvNotSwitchCnt
                              , c = t.aiFlvErrorSwitchCnt
                              , d = t.aiFlvErrorNotSwitchCnt
                              , f = t.aiStartP2PCnt
                              , p = t.aiStartFlvCnt;
                            this.stat.setComp(Ze, $e, e),
                            this.stat.setComp(Ze, ti, i),
                            this.stat.setComp(Ze, ei, s),
                            this.stat.setComp(Ze, ii, a),
                            this.stat.setComp(Ze, si, r),
                            this.stat.setComp(Ze, ai, n),
                            this.stat.setComp(Ze, ri, o),
                            this.stat.setComp(Ze, ni, u),
                            this.stat.setComp(Ze, oi, h),
                            this.stat.setComp(Ze, ui, l),
                            this.stat.setComp(Ze, hi, c),
                            this.stat.setComp(Ze, li, d),
                            this.stat.setComp(Ze, ci, f),
                            this.stat.setComp(Ze, di, p),
                            this.stat.setCompFormat(Ze, ":", ",")
                        }
                    }, {
                        key: "recordMuteData",
                        value: function() {
                            if (this.flvPlayer.eventEmitter && this.flvPlayer.eventEmitter.getMuteStat && this.flvPlayer.eventEmitter.getMuteStat) {
                                var t = this.flvPlayer.eventEmitter.getMuteStat().muteData
                                  , e = [];
                                t.map((function(t) {
                                    var i = [];
                                    i.push(t.value),
                                    i.push(t.type),
                                    i.push(t.currentDts),
                                    i.push(t.reqKey),
                                    i.push(t.begin),
                                    i.push(t.end),
                                    e.push(i.join(":"))
                                }
                                )),
                                this.stat.setCoreDim(kt, e.join(","))
                            }
                        }
                    }, {
                        key: "recordC2CDelay",
                        value: function() {
                            var t = this.flvPlayer.mse.getDelayStat();
                            if (t) {
                                for (var e in t.fields)
                                    this.stat.setCore(e, t.fields[e]);
                                for (var i in t.dims)
                                    this.stat.setCoreDim(i, t.dims[i])
                            }
                        }
                    }]),
                    t
                }()
                  , Za = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this.hyPlayer = e,
                        this.mse = i,
                        this.tickCnt = 0
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.tickCnt = 0
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            this.tickCnt++,
                            4 !== this.tickCnt && this.tickCnt % 10 != 0 || this.trigger()
                        }
                    }, {
                        key: "trigger",
                        value: function() {
                            var t = {};
                            (0,
                            k.default)(t, this.mse.metadata),
                            this.hyPlayer.trigger(P.METADATA, t)
                        }
                    }]),
                    t
                }()
                  , $a = i(16)
                  , tr = i.n($a);
                window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
                var er = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i() {
                        var t;
                        return Object(p.a)(this, i),
                        (t = e.call(this)).audioContext = null,
                        t.playing = !1,
                        t.audio = null,
                        t.analyser = null,
                        t.source = null,
                        t.timer = 0,
                        t
                    }
                    return Object(m.a)(i, [{
                        key: "reset",
                        value: function() {
                            this.playing = !1
                        }
                    }, {
                        key: "createAudioContext",
                        value: function(t) {
                            if (t)
                                try {
                                    this.audio != t && (this.audio = t,
                                    this.audioContext = new AudioContext,
                                    this.source = this.audioContext.createMediaElementSource(t),
                                    this.analyser = this.audioContext.createAnalyser(),
                                    this.analyser.fftSize = 2048,
                                    this.source.connect(this.analyser),
                                    this.analyser.connect(this.audioContext.destination)),
                                    this.playing = !0,
                                    this.loop(2e3)
                                } catch (t) {
                                    E.a.log("createAudioContext err:" + t)
                                }
                        }
                    }, {
                        key: "loop",
                        value: function(t) {
                            if (this.playing && this.analyser && this.analyser.fftSize) {
                                this.audio && !this.audio.error && this.playing && (clearTimeout(this.timer),
                                this.timer = setTimeout(this.loop.bind(this), t, t));
                                var e = this.analyser.fftSize
                                  , s = new Uint8Array(e);
                                this.analyser.getByteFrequencyData(s),
                                s.some((function(t) {
                                    return t
                                }
                                )) ? this.emit(i.AUDIO_FREQUENCY, {
                                    value: 1
                                }) : this.emit(i.AUDIO_FREQUENCY, {
                                    value: 0
                                })
                            }
                        }
                    }]),
                    i
                }($a.EventEmitter)
                  , ir = er;
                function sr(t, e) {
                    var i = (65535 & t) + (65535 & e);
                    return (t >> 16) + (e >> 16) + (i >> 16) << 16 | 65535 & i
                }
                function ar(t, e, i, s, a, r) {
                    return sr((n = sr(sr(e, t), sr(s, r))) << (o = a) | n >>> 32 - o, i);
                    var n, o
                }
                function rr(t, e, i, s, a, r, n) {
                    return ar(e & i | ~e & s, t, e, a, r, n)
                }
                function nr(t, e, i, s, a, r, n) {
                    return ar(e & s | i & ~s, t, e, a, r, n)
                }
                function or(t, e, i, s, a, r, n) {
                    return ar(e ^ i ^ s, t, e, a, r, n)
                }
                function ur(t, e, i, s, a, r, n) {
                    return ar(i ^ (e | ~s), t, e, a, r, n)
                }
                function hr(t, e) {
                    var i, s, a, r, n;
                    t[e >> 5] |= 128 << e % 32,
                    t[14 + (e + 64 >>> 9 << 4)] = e;
                    var o = 1732584193
                      , u = -271733879
                      , h = -1732584194
                      , l = 271733878;
                    for (i = 0; i < t.length; i += 16)
                        s = o,
                        a = u,
                        r = h,
                        n = l,
                        o = rr(o, u, h, l, t[i], 7, -680876936),
                        l = rr(l, o, u, h, t[i + 1], 12, -389564586),
                        h = rr(h, l, o, u, t[i + 2], 17, 606105819),
                        u = rr(u, h, l, o, t[i + 3], 22, -1044525330),
                        o = rr(o, u, h, l, t[i + 4], 7, -176418897),
                        l = rr(l, o, u, h, t[i + 5], 12, 1200080426),
                        h = rr(h, l, o, u, t[i + 6], 17, -1473231341),
                        u = rr(u, h, l, o, t[i + 7], 22, -45705983),
                        o = rr(o, u, h, l, t[i + 8], 7, 1770035416),
                        l = rr(l, o, u, h, t[i + 9], 12, -1958414417),
                        h = rr(h, l, o, u, t[i + 10], 17, -42063),
                        u = rr(u, h, l, o, t[i + 11], 22, -1990404162),
                        o = rr(o, u, h, l, t[i + 12], 7, 1804603682),
                        l = rr(l, o, u, h, t[i + 13], 12, -40341101),
                        h = rr(h, l, o, u, t[i + 14], 17, -1502002290),
                        o = nr(o, u = rr(u, h, l, o, t[i + 15], 22, 1236535329), h, l, t[i + 1], 5, -165796510),
                        l = nr(l, o, u, h, t[i + 6], 9, -1069501632),
                        h = nr(h, l, o, u, t[i + 11], 14, 643717713),
                        u = nr(u, h, l, o, t[i], 20, -373897302),
                        o = nr(o, u, h, l, t[i + 5], 5, -701558691),
                        l = nr(l, o, u, h, t[i + 10], 9, 38016083),
                        h = nr(h, l, o, u, t[i + 15], 14, -660478335),
                        u = nr(u, h, l, o, t[i + 4], 20, -405537848),
                        o = nr(o, u, h, l, t[i + 9], 5, 568446438),
                        l = nr(l, o, u, h, t[i + 14], 9, -1019803690),
                        h = nr(h, l, o, u, t[i + 3], 14, -187363961),
                        u = nr(u, h, l, o, t[i + 8], 20, 1163531501),
                        o = nr(o, u, h, l, t[i + 13], 5, -1444681467),
                        l = nr(l, o, u, h, t[i + 2], 9, -51403784),
                        h = nr(h, l, o, u, t[i + 7], 14, 1735328473),
                        o = or(o, u = nr(u, h, l, o, t[i + 12], 20, -1926607734), h, l, t[i + 5], 4, -378558),
                        l = or(l, o, u, h, t[i + 8], 11, -2022574463),
                        h = or(h, l, o, u, t[i + 11], 16, 1839030562),
                        u = or(u, h, l, o, t[i + 14], 23, -35309556),
                        o = or(o, u, h, l, t[i + 1], 4, -1530992060),
                        l = or(l, o, u, h, t[i + 4], 11, 1272893353),
                        h = or(h, l, o, u, t[i + 7], 16, -155497632),
                        u = or(u, h, l, o, t[i + 10], 23, -1094730640),
                        o = or(o, u, h, l, t[i + 13], 4, 681279174),
                        l = or(l, o, u, h, t[i], 11, -358537222),
                        h = or(h, l, o, u, t[i + 3], 16, -722521979),
                        u = or(u, h, l, o, t[i + 6], 23, 76029189),
                        o = or(o, u, h, l, t[i + 9], 4, -640364487),
                        l = or(l, o, u, h, t[i + 12], 11, -421815835),
                        h = or(h, l, o, u, t[i + 15], 16, 530742520),
                        o = ur(o, u = or(u, h, l, o, t[i + 2], 23, -995338651), h, l, t[i], 6, -198630844),
                        l = ur(l, o, u, h, t[i + 7], 10, 1126891415),
                        h = ur(h, l, o, u, t[i + 14], 15, -1416354905),
                        u = ur(u, h, l, o, t[i + 5], 21, -57434055),
                        o = ur(o, u, h, l, t[i + 12], 6, 1700485571),
                        l = ur(l, o, u, h, t[i + 3], 10, -1894986606),
                        h = ur(h, l, o, u, t[i + 10], 15, -1051523),
                        u = ur(u, h, l, o, t[i + 1], 21, -2054922799),
                        o = ur(o, u, h, l, t[i + 8], 6, 1873313359),
                        l = ur(l, o, u, h, t[i + 15], 10, -30611744),
                        h = ur(h, l, o, u, t[i + 6], 15, -1560198380),
                        u = ur(u, h, l, o, t[i + 13], 21, 1309151649),
                        o = ur(o, u, h, l, t[i + 4], 6, -145523070),
                        l = ur(l, o, u, h, t[i + 11], 10, -1120210379),
                        h = ur(h, l, o, u, t[i + 2], 15, 718787259),
                        u = ur(u, h, l, o, t[i + 9], 21, -343485551),
                        o = sr(o, s),
                        u = sr(u, a),
                        h = sr(h, r),
                        l = sr(l, n);
                    return [o, u, h, l]
                }
                function lr(t) {
                    var e, i = "", s = 32 * t.length;
                    for (e = 0; e < s; e += 8)
                        i += String.fromCharCode(t[e >> 5] >>> e % 32 & 255);
                    return i
                }
                function cr(t) {
                    var e, i = [];
                    for (i[(t.length >> 2) - 1] = void 0,
                    e = 0; e < i.length; e += 1)
                        i[e] = 0;
                    var s = 8 * t.length;
                    for (e = 0; e < s; e += 8)
                        i[e >> 5] |= (255 & t.charCodeAt(e / 8)) << e % 32;
                    return i
                }
                function dr(t) {
                    var e, i, s = "";
                    for (i = 0; i < t.length; i += 1)
                        e = t.charCodeAt(i),
                        s += "0123456789abcdef".charAt(e >>> 4 & 15) + "0123456789abcdef".charAt(15 & e);
                    return s
                }
                function fr(t) {
                    return unescape(encodeURIComponent(t))
                }
                function pr(t) {
                    return function(t) {
                        return lr(hr(cr(t), 8 * t.length))
                    }(fr(t))
                }
                function mr(t, e) {
                    return function(t, e) {
                        var i, s, a = cr(t), r = [], n = [];
                        for (r[15] = n[15] = void 0,
                        a.length > 16 && (a = hr(a, 8 * t.length)),
                        i = 0; i < 16; i += 1)
                            r[i] = 909522486 ^ a[i],
                            n[i] = 1549556828 ^ a[i];
                        return s = hr(r.concat(cr(e)), 512 + 8 * e.length),
                        lr(hr(n.concat(s), 640))
                    }(fr(t), fr(e))
                }
                er.AUDIO_FREQUENCY = "AUDIO_FREQUENCY";
                var yr, vr, _r, gr = function(t, e, i) {
                    return e ? i ? mr(e, t) : dr(mr(e, t)) : i ? pr(t) : dr(pr(t))
                }, Sr = A("X2Zt"), Tr = A("Zm0="), Pr = A("X3dzVGltZQ=="), kr = A("d3NUaW1l"), Er = A("X2ludmFsaWRUaW1l"), Ir = A("X25leHRSZWZyZXNoVGltZQ=="), br = A("X2N0eXBl"), Cr = A("Y3R5cGU="), wr = A("d3NTZWNyZXQ="), Ar = A("X3BhcmFtcw=="), Rr = A("X3NGbHZBbnRpY29kZQ=="), Lr = A("X3NGbHZVcmw="), Br = A("X3NTdHJlYW1OYW1l"), Dr = A("X3JlcQ=="), Or = A("c2VxaWQ="), Mr = A("X3NlcWlk"), Fr = A("X3BjZG4="), Ur = A("JDA="), Nr = A("JDE="), xr = A("JDI="), Vr = A("JDM="), Hr = A("aW5pdA=="), Gr = A("aXNJbnZhbGlk"), jr = A("Z2V0QW50aWNvZGU="), Yr = A("cGFyc2VBbnRpY29kZQ=="), Wr = A("aGFzQW50aWNvZGU="), qr = A("b25DaGVja1RpbWVy"), Kr = A("X29uUmVmcmVzaA=="), zr = A("X29uUmVmcmVzaEJpbmQ="), Xr = A("dmFsaWQ="), Jr = A("Z2V0VG9rZW4="), Qr = A("X2dldFRva2Vu"), Zr = A("bGl2ZXVp"), $r = A("Z2V0Q2RuVG9rZW5JbmZvRXg="), tn = (A("MTAw"),
                A("dmVyPTE=")), en = A("Jg=="), sn = A("PQ=="), an = A("UkVGUkVTSA=="), rn = A("cmVmcmVzaA=="), nn = (A("ZGVjb2RlVVJJ"),
                A("dW5lc2NhcGU="),
                A("Z2V0U2VxaWQ=")), on = i(13).default, un = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i() {
                        var t;
                        return Object(p.a)(this, i),
                        (t = e.call(this))[Pr] = "",
                        t[Sr] = "",
                        t[br] = "",
                        t[Ar] = [],
                        t[Rr] = "",
                        t[Lr] = "",
                        t[Br] = "",
                        t[Mr] = "",
                        t[Er] = o.default,
                        t[Ir] = o.default,
                        t[zr] = t[Kr].bind(Object(Xi.a)(t)),
                        t
                    }
                    return Object(m.a)(i, [{
                        key: Wr,
                        value: function() {
                            return "" !== this[Rr]
                        }
                    }, {
                        key: Hr,
                        value: function(t, e, i) {
                            this[Lr] = t,
                            this[Br] = e,
                            this[Yr](i)
                        }
                    }, {
                        key: Yr,
                        value: function(t) {
                            var e = this;
                            this[Sr] = "",
                            this[Pr] = "",
                            this[br] = "",
                            this[Ar] = [],
                            this[Rr] = t,
                            t.split(en).forEach((function(t) {
                                var i = ja(t.split(sn), 2)
                                  , s = i[0]
                                  , a = i[1];
                                if (s === Tr)
                                    a = decodeURI(a),
                                    a = unescape(a),
                                    a = atob(a),
                                    e[Sr] = a;
                                else if (s === kr) {
                                    e[Pr] = a;
                                    var r = 1e3 * parseInt(a, 16) + 3e5;
                                    e[Er] = F.a.now() + (r - Date.now()),
                                    e[Ir] = e[Er] - 3e4
                                } else
                                    s == Cr ? e[br] = a : s !== wr && e[Ar].push(t)
                            }
                            ))
                        }
                    }, {
                        key: Gr,
                        value: function(t) {
                            return t > this[Er]
                        }
                    }, {
                        key: jr,
                        value: function(t) {
                            if ("" === this[Sr])
                                return this[Rr];
                            var e = M.platform
                              , i = D.PLATFORM_TYPE[e] || D.PLATFORM_TYPE.web;
                            this[Mr] = L.uid + Date.now();
                            var s = gr("".concat(this[Mr], "|").concat(this[br], "|").concat(i))
                              , a = e === D.PLATFORM_TYPE_NAME.wap ? L.uid : L.convertUid
                              , r = this[Sr].replace(Ur, a).replace(Nr, this[Br]).replace(xr, s).replace(Vr, this[Pr]);
                            t && (r += Fr);
                            var n = "".concat(wr).concat(sn).concat(gr(r)).concat(en).concat(kr).concat(sn).concat(this[Pr]).concat(en).concat(Or).concat(sn).concat(this[Mr]).concat(en).concat(Cr).concat(sn).concat(this[br]).concat(en).concat(tn);
                            return this[Ar].length > 0 && (n += en + this[Ar].join(en)),
                            n
                        }
                    }, {
                        key: nn,
                        value: function() {
                            return this[Mr]
                        }
                    }, {
                        key: qr,
                        value: function(t, e) {
                            t >= this[Ir] && this[Jr]().then(this[zr])
                        }
                    }, {
                        key: Kr,
                        value: function() {
                            this.trigger(i.Events[an])
                        }
                    }, {
                        key: Xr,
                        value: function() {
                            var t = this;
                            return new n.default((function(e) {
                                t[Gr](F.a.now()) ? t[Jr]().then(e) : e()
                            }
                            ))
                        }
                    }, {
                        key: Jr,
                        value: function() {
                            var t = this;
                            return new n.default((function(e) {
                                Bs.connected ? t[Qr](e) : Bs.on(Bs.TAFLINK_INITED, (function() {
                                    t[Qr](e)
                                }
                                ))
                            }
                            ))
                        }
                    }, {
                        key: Qr,
                        value: function(t) {
                            var e = this;
                            this[Dr] || (this[Dr] = new on.GetCdnTokenExReq),
                            this[Dr].sFlvUrl = this._sFlvUrl,
                            this[Dr].sStreamName = this._sStreamName,
                            this[Dr].tId = Bs.getUserId(),
                            this[Dr].iAppId = L.appid,
                            this[Ir] = o.default,
                            Bs.sendWup(Zr, $r, this._req, (function(s) {
                                E.a.log("".concat(i.name, ".").concat(Jr, "="), s.sFlvToken),
                                e[Yr](s.sFlvToken),
                                t()
                            }
                            ), !0, Bs.getRequestId())
                        }
                    }]),
                    i
                }(Es);
                un.Events = (_r = rn,
                (vr = an)in (yr = {}) ? (0,
                w.default)(yr, vr, {
                    value: _r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : yr[vr] = _r,
                yr);
                var hn = un
                  , ln = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.player = e,
                        this.recordMap = new v.default,
                        this.init(),
                        this.reset()
                    }
                    return Object(m.a)(t, [{
                        key: "init",
                        value: function() {
                            this.keys = (0,
                            r.default)(Vt);
                            var t = this.keys.indexOf(Vt.name);
                            -1 !== t && this.keys.splice(t, 1)
                        }
                    }, {
                        key: "setStat",
                        value: function(t, e) {
                            this.recordMap.has(t) || (this.recordMap.set(t, 1),
                            this.exceptionStat[t] = e)
                        }
                    }, {
                        key: "getStat",
                        value: function() {
                            var t = this;
                            this.player.getDurationTime && this.player.getDurationTime() > 2 && this.setStat(Vt.DATA_ENOUGH, 1);
                            var e = [];
                            return (0,
                            f.default)(this.exceptionStat).forEach((function(i) {
                                e.push("".concat(i, ":").concat(t.exceptionStat[i]))
                            }
                            )),
                            e.join(",")
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            var t = this;
                            this.recordMap.clear(),
                            this.exceptionStat = {},
                            this.keys.forEach((function(e) {
                                t.exceptionStat[e] = 0
                            }
                            ))
                        }
                    }]),
                    t
                }()
                  , cn = function(t, e, i) {
                    i = i || "";
                    var s = "cdndomain"
                      , a = (e = e || "").match(/\/\/(.+?)\//i);
                    a && a.length > 1 && (s = a[1]),
                    t.setComDim(K, s),
                    t.setComDim(z, i || "stream")
                }
                  , dn = function() {
                    function t(e) {
                        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                          , s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10;
                        Object(p.a)(this, t),
                        this.linkHandler = e,
                        this.ws = null,
                        this.connected = !1,
                        this.isYY = i,
                        this.url = null,
                        this.avgSpeed = new Ki(s)
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.linkHandler = null,
                            this.reset(),
                            ls.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "connect",
                        value: function(t) {
                            this.reset(),
                            ls.add(this.onCheckTimer, this, 1e3),
                            this.url = t,
                            this.ws = new WebSocket(t),
                            this.ws.binaryType = "arraybuffer",
                            this.ws.onopen = this.onopen.bind(this),
                            this.ws.onerror = this.onerror.bind(this),
                            this.ws.onclose = this.onclose.bind(this),
                            this.ws.onmessage = this.onmessage.bind(this)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.ws && (this.connected = !1,
                            this.ws.onopen = null,
                            this.ws.onerror = null,
                            this.ws.onclose = null,
                            this.ws.onmessage = null,
                            this.ws.close(),
                            this.ws = null),
                            this.url = null,
                            this.avgSpeed.reset()
                        }
                    }, {
                        key: "send",
                        value: function(t) {
                            this.ws && this.connected && this.ws.send(t)
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            this.connected = !0,
                            this.linkHandler && this.linkHandler.onopen()
                        }
                    }, {
                        key: "onerror",
                        value: function(t) {
                            E.a.log("ProtoLink.onerror event=" + t),
                            this.connected = !1,
                            this.ws = null,
                            this.linkHandler && (this.linkHandler.onerror(t),
                            this.linkHandler = null)
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            this.connected = !1,
                            this.ws = null,
                            this.linkHandler && (this.linkHandler.onclose(),
                            this.linkHandler = null)
                        }
                    }, {
                        key: "onmessage",
                        value: function(t) {
                            this.avgSpeed.addCur(t.data.byteLength),
                            t.data instanceof ArrayBuffer ? this.processArrayBuffer(t.data) : this.processText(t.data)
                        }
                    }, {
                        key: "processText",
                        value: function(t) {
                            E.a.log("ProtoLink.processText data=" + t)
                        }
                    }, {
                        key: "processArrayBuffer",
                        value: function(t) {
                            if (this.isYY)
                                for (var e = new DataView(t), i = 0, s = 0, a = 0; i + 10 < t.byteLength; ) {
                                    if (i + (s = e.getUint32(i, !0)) > t.byteLength || s < 10)
                                        return void E.a.error("ProtoLink.processArrayBuffer length error pktLen=" + s + " bufferLen=" + t.byteLength);
                                    a = e.getUint32(i + 4, !0);
                                    var r = new DataView(t,i,s);
                                    this.linkHandler && this.linkHandler.onData(a, r),
                                    i += s
                                }
                            else
                                this.linkHandler && this.linkHandler.onData(t)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            this.connected && this.avgSpeed.calculate()
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            return this.avgSpeed.average()
                        }
                    }]),
                    t
                }()
                  , fn = function() {
                    function t(e) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
                        Object(p.a)(this, t),
                        this.linkHandler = e,
                        this.connected = !1,
                        this.url = null,
                        this.xhr = null,
                        this.avgSpeed = new Ki(i)
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.reset(),
                            this.linkHandler = null,
                            ls.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.abort(),
                            this.url = null,
                            this.xhr = null,
                            this.connected = !1,
                            this.avgSpeed.reset()
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this.xhr && (E.a.log("ProtoLinkXhrFF abort"),
                            this.xhr.abort())
                        }
                    }, {
                        key: "connect",
                        value: function(t) {
                            this.reset(),
                            this.url = t;
                            var e = this.xhr = new XMLHttpRequest;
                            e.responseType = "moz-chunked-arraybuffer",
                            e.open("GET", this.url, !0),
                            e.onerror = this.onerror.bind(this),
                            e.onprogress = this.onprogress.bind(this),
                            e.onloadend = this.loadend.bind(this),
                            e.onload = this.onclose.bind(this),
                            e.send(),
                            ls.add(this.onCheckTimer, this, 1e3)
                        }
                    }, {
                        key: "onprogress",
                        value: function(t) {
                            this.connected || this.onopen();
                            var e = t.target.response;
                            this.linkHandler.onData(e),
                            this.avgSpeed.addCur(e.byteLength)
                        }
                    }, {
                        key: "onreadystatechange",
                        value: function(t) {}
                    }, {
                        key: "onopen",
                        value: function() {
                            this.connected = !0,
                            this.linkHandler && this.linkHandler.onopen()
                        }
                    }, {
                        key: "onerror",
                        value: function(t) {
                            E.a.log("ProtoLinkXhrFF.onerror " + t);
                            var e = t.currentTarget.status;
                            this.connected = !1,
                            this.linkHandler && (this.linkHandler.onerror(t, e),
                            this.linkHandler = null)
                        }
                    }, {
                        key: "loadend",
                        value: function(t) {
                            404 === t.currentTarget.status && this.onerror(t)
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            E.a.log("ProtoLinkXhrFF.onclose"),
                            this.connected = !1,
                            this.linkHandler && (this.linkHandler.onclose(),
                            this.linkHandler = null)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            this.connected && this.avgSpeed.calculate()
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            return this.avgSpeed.average()
                        }
                    }], [{
                        key: "isSupported",
                        value: function() {
                            try {
                                var t = new XMLHttpRequest;
                                return t.open("GET", "https://example.com", !0),
                                t.responseType = "moz-chunked-arraybuffer",
                                "moz-chunked-arraybuffer" === t.responseType
                            } catch (t) {
                                return E.a.warn("MozChunkedLoader", t.message),
                                !1
                            }
                        }
                    }]),
                    t
                }()
                  , pn = function() {
                    function t(e) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
                        Object(p.a)(this, t),
                        this.linkHandler = e,
                        this.connected = !1,
                        this.url = null,
                        this.requestAbort = !1,
                        this.avgSpeed = new Ki(i)
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.abort(),
                            this.linkHandler = null,
                            this.reset(),
                            ls.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.url = null,
                            this.connected = !1,
                            this.avgSpeed.reset()
                        }
                    }, {
                        key: "pump",
                        value: function(t) {
                            var e = this;
                            t.read().then(function(i) {
                                if (i.done)
                                    e.onclose();
                                else if (!e.checkAbort(t)) {
                                    var s = i.value.buffer;
                                    e.avgSpeed.addCur(s.byteLength),
                                    e.linkHandler && e.linkHandler.onData(s),
                                    e.pump(t)
                                }
                            }
                            .bind(this))
                        }
                    }, {
                        key: "checkAbort",
                        value: function(t) {
                            return !!this.requestAbort && (this.requestAbort = !1,
                            t.cancel(),
                            !0)
                        }
                    }, {
                        key: "connect",
                        value: function(t) {
                            var e = this;
                            ls.add(this.onCheckTimer, this, 1e3),
                            this.url = t,
                            fetch(t).then((function(t) {
                                Number(localStorage._printFetchUrl) && E.a.log("FetchUrl", t.url);
                                var i = t.body.getReader();
                                e.checkAbort(i) || (e.linkHandler && e.linkHandler.onstatus && e.linkHandler.onstatus(t.status),
                                t.ok && t.status >= 200 && t.status < 300 ? (e.onheader(t),
                                e.onopen(),
                                e.pump.call(e, i)) : (E.a.log("ProtoLinkFetch http code invalid status:" + t.status),
                                e.onerror(t.statusText, t.status)))
                            }
                            )).catch((function(t) {
                                E.a.log("ProtoLinkFetch exception"),
                                e.onerror(t.message)
                            }
                            ))
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this.requestAbort = !0
                        }
                    }, {
                        key: "onheader",
                        value: function(t) {
                            var e, i = {}, s = [], a = Object(qi.a)(t.headers);
                            try {
                                for (a.s(); !(e = a.n()).done; ) {
                                    var r = ja(e.value, 2)
                                      , n = r[0]
                                      , o = r[1];
                                    i[n] = o,
                                    s.push(n + ":" + o)
                                }
                            } catch (t) {
                                a.e(t)
                            } finally {
                                a.f()
                            }
                            E.a.log("ProtoLinkFetch.onheader", s.join(" | ")),
                            this.linkHandler.onheader && this.linkHandler.onheader(i)
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            this.connected = !0,
                            this.linkHandler && this.linkHandler.onopen()
                        }
                    }, {
                        key: "onerror",
                        value: function(t, e) {
                            E.a.log("ProtoLinkFetch.onerror " + t),
                            this.connected = !1,
                            this.linkHandler && (this.linkHandler.onerror(t, e),
                            this.linkHandler = null)
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            this.connected = !1,
                            this.linkHandler && (this.linkHandler.onclose(),
                            this.linkHandler = null)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            this.connected && this.avgSpeed.calculate()
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            return this.avgSpeed.average()
                        }
                    }]),
                    t
                }()
                  , mn = function() {
                    function t(e) {
                        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        Object(p.a)(this, t),
                        this.flvPlayer = e,
                        e.hyPlayer && (this.hyPlayer = e.hyPlayer,
                        this.stat = e.hyPlayer.stat),
                        this._newLink(),
                        this.needRetry = i,
                        this.status = 0,
                        this.url = null,
                        this.started = !1,
                        this.lastGetProxyTime = 0,
                        this.getProxyPeriod = t.DEFAULT_GET_PROXY_PERIOD,
                        this.headers = null
                    }
                    return Object(m.a)(t, [{
                        key: "_newLink",
                        value: function() {
                            O.a.firefox && fn.isSupported() ? this.link = new fn(this) : Xa.isMacChrome72() ? this.link = new dn(this) : this.link = new pn(this)
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this.link.destroy()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.lastGetProxyTime = 0,
                            this.status = 0,
                            this.url = null,
                            this.started && (E.a.log("FlvLoader.reset"),
                            this.link.destroy(),
                            this._newLink())
                        }
                    }, {
                        key: "connect",
                        value: function(t) {
                            t ? (this.link instanceof dn && (t = t.replace("http", "ws")),
                            this.reset(),
                            this.lastGetProxyTime = F.a.now() - 2e3,
                            E.a.log("FlvLoader.connect url=" + t, this.lastGetProxyTime),
                            this.headers = null,
                            this.url = t,
                            this.link.connect(this.url),
                            this.started = !0) : E.a.warn("FlvLoader.connect url is null")
                        }
                    }, {
                        key: "close",
                        value: function() {
                            E.a.log("FlvLoader.close"),
                            this.reset(),
                            this.started = !1
                        }
                    }, {
                        key: "onstatus",
                        value: function(t) {
                            this.status = t
                        }
                    }, {
                        key: "onheader",
                        value: function(t) {
                            this.headers = t,
                            E.a.log("FlvLoader.onheader", t),
                            this.flvPlayer && this.flvPlayer.onHeader && this.flvPlayer.onHeader(t)
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            E.a.log("FlvLoader.onopen"),
                            this.getProxyPeriod = t.DEFAULT_GET_PROXY_PERIOD,
                            this.flvPlayer.onConnected()
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            localStorage.hasOwnProperty("_toPcdn") || (E.a.log("FlvLoader.onclose"),
                            this.flvPlayer.onClosed(),
                            this.lastGetProxyTime = 0,
                            this.needRetry && this.getProxy())
                        }
                    }, {
                        key: "onerror",
                        value: function(t, e) {
                            E.a.log("FlvLoader.onerror", e),
                            this.lastGetProxyTime = 0,
                            this.needRetry && this.getProxy(),
                            this.flvPlayer.onLoadError && this.flvPlayer.onLoadError(t)
                        }
                    }, {
                        key: "onData",
                        value: function(t) {
                            this.flvPlayer.onData(t, 1)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            if (this.started && (this.onCheckConnect(t),
                            e % 10 == 0)) {
                                var i = this.link.speed;
                                i != R.UintMax && (i = R.formatByteSize(i),
                                E.a.log("FlvLoader speed ".concat(i, "/s")))
                            }
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            var t = this.link.speed;
                            return t == R.UintMax && (t = 0),
                            t
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.link && this.link.connected
                        }
                    }, {
                        key: "onCheckConnect",
                        value: function(t) {
                            this.connected || (this.needRetry ? this.getProxy() : t - this.lastGetProxyTime > 15e3 && 0 != this.lastGetProxyTime && this.flvPlayer && this.flvPlayer.onLoadTimeout && (this.flvPlayer.onLoadTimeout(),
                            this.lastGetProxyTime = 0))
                        }
                    }, {
                        key: "getProxy",
                        value: function() {
                            var t = F.a.now();
                            t - this.lastGetProxyTime < this.getProxyPeriod || (E.a.log("FlvLoader.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + t + " period=" + this.getProxyPeriod),
                            this.reset(),
                            this.lastGetProxyTime = t,
                            this.getProxyPeriod = Math.min(2 * this.getProxyPeriod, 128e3),
                            this.flvPlayer.requestUrl())
                        }
                    }]),
                    t
                }();
                mn.DEFAULT_GET_PROXY_PERIOD = 4e3;
                var yn = mn
                  , vn = "loaded"
                  , _n = "error"
                  , gn = "timeout"
                  , Sn = new v.default
                  , Tn = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i(t) {
                        var s;
                        return Object(p.a)(this, i),
                        (s = e.call(this))._libName = t,
                        s._script = null,
                        s._loaded = !1,
                        s._onLoadBind = s._onLoad.bind(Object(Xi.a)(s)),
                        s._onErrorBind = s._onError.bind(Object(Xi.a)(s)),
                        s
                    }
                    return Object(m.a)(i, [{
                        key: "load",
                        value: function(t) {
                            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 6e4;
                            if (this._loaded)
                                this.trigger(vn);
                            else {
                                var i = this._script;
                                i || ((i = document.createElement("script")).async = !0,
                                i.onload = i.onreadystatechange = this._onLoadBind,
                                i.onerror = this._onErrorBind,
                                i.src = t.endsWith("/") ? t + this._libName : t + "/" + this._libName,
                                document.getElementsByTagName("head")[0].appendChild(i),
                                this._script = i,
                                ls.once(this._onTimeout, this, e))
                            }
                        }
                    }, {
                        key: "_onLoad",
                        value: function() {
                            var t = this._script
                              , e = t.readyState;
                            e && "loaded" !== e && "complete" !== e || (t.onload = t.onreadystatechange = null,
                            this._loaded = !0,
                            ls.remove(this._onTimeout, this),
                            this.trigger(vn))
                        }
                    }, {
                        key: "_onTimeout",
                        value: function() {
                            this._clear(),
                            this.trigger(gn)
                        }
                    }, {
                        key: "_onError",
                        value: function() {
                            this._clear(),
                            this.trigger(_n)
                        }
                    }, {
                        key: "_clear",
                        value: function() {
                            var t = this._script;
                            t && (t.onload = t.onreadystatechange = t.onerror = null,
                            t.src = "",
                            t.parentNode && t.parentNode.removeChild(t),
                            this._script = null)
                        }
                    }]),
                    i
                }(Es)
                  , Pn = {
                    ppio: "ppio",
                    xy: "xy"
                }
                  , kn = {
                    ppio: "EcdnLive.js",
                    xy: "XYLive.js"
                }
                  , En = {}
                  , In = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i() {
                        var t;
                        return Object(p.a)(this, i),
                        (t = e.call(this))._pcdnName = "",
                        t._loader = null,
                        t._lastDataTs = 0,
                        t._started = !1,
                        t._speed = new Ki(10),
                        t._callbacks = {
                            onLoaded: t._onLoadLibSUc,
                            onError: t._onLoadLibErr,
                            thisObj: Object(Xi.a)(t)
                        },
                        t._binds = {},
                        t._binds.LOAD_FAIL = t._onLoadFail.bind(Object(Xi.a)(t)),
                        t._binds.GATHER_SUC = t._onGatherSuc.bind(Object(Xi.a)(t)),
                        t._binds.GATHER_FAIL = t._onGatherFail.bind(Object(Xi.a)(t)),
                        t._binds.DATA = t._onData.bind(Object(Xi.a)(t)),
                        t._binds.LOAD_STOP = t._onLoadStop.bind(Object(Xi.a)(t)),
                        t._binds.LOAD_FINISH = t._onLoadFinish.bind(Object(Xi.a)(t)),
                        t._binds.SDK_DESTROYED = t._sdkDestroy.bind(Object(Xi.a)(t)),
                        t
                    }
                    return Object(m.a)(i, [{
                        key: "setPcdnName",
                        value: function(t) {
                            this._pcdnName = t
                        }
                    }, {
                        key: "isLibReady",
                        value: function() {
                            return En[this._pcdnName]
                        }
                    }, {
                        key: "loadLib",
                        value: function(t) {
                            this.isLibReady() ? this.trigger(i.BaseEvents.LIB_READY, {
                                type: i.BaseEvents.LIB_READY,
                                isFirst: !1
                            }) : function(t, e, i) {
                                var s = i.onLoaded
                                  , a = void 0 === s ? null : s
                                  , r = i.onError
                                  , n = void 0 === r ? null : r
                                  , o = i.onTimeout
                                  , u = void 0 === o ? null : o
                                  , h = i.thisObj
                                  , l = void 0 === h ? null : h
                                  , c = i.timeout
                                  , d = void 0 === c ? 6e4 : c
                                  , f = Sn.get(e);
                                f || (f = new Tn(e),
                                Sn.set(e, f)),
                                a && f.on(vn, a, l),
                                n && f.on(_n, n, l),
                                u && f.on(gn, u, l),
                                f.load(t, d)
                            }(t, kn[this._pcdnName], this._callbacks)
                        }
                    }, {
                        key: "_onLoadLibSUc",
                        value: function() {
                            (function(t, e) {
                                var i = e.onLoaded
                                  , s = void 0 === i ? null : i
                                  , a = e.onError
                                  , r = void 0 === a ? null : a
                                  , n = e.onTimeout
                                  , o = void 0 === n ? null : n
                                  , u = e.thisObj
                                  , h = void 0 === u ? null : u
                                  , l = Sn.get(t);
                                l && (s && l.off(vn, s, h),
                                r && l.off(_n, r, h),
                                o && l.off(gn, o, h))
                            }
                            )(kn[this._pcdnName], this._callbacks),
                            this._hasInterface() ? (En[this._pcdnName] = 1,
                            this.trigger(i.BaseEvents.LIB_READY, {
                                type: i.BaseEvents.LIB_READY,
                                isFirst: !0
                            })) : this.trigger(i.BaseEvents.LIB_ERR, {
                                type: i.BaseEvents.LIB_ERR,
                                msg: "".concat(this._pcdnName, " has no constructor!")
                            })
                        }
                    }, {
                        key: "_hasInterface",
                        value: function() {
                            return this._pcdnName === Pn.ppio ? !!window.EcdnLive : this._pcdnName === Pn.xy && !!window.xyvp && !!window.xyvp.Loader
                        }
                    }, {
                        key: "_createLoader",
                        value: function() {
                            this._pcdnName === Pn.ppio ? this._loader = new window.EcdnLive({
                                appId: "huya",
                                debug: !1,
                                logLevel: ""
                            }) : this._pcdnName === Pn.xy && (this._loader = new window.xyvp.Loader),
                            this._doPcdnEvents(!0)
                        }
                    }, {
                        key: "_destroyLoader",
                        value: function() {
                            this._loader && (this._doPcdnEvents(!1),
                            this._loader.stopLoad(),
                            this._loader.stopPeerGather(),
                            this._loader.destroy(),
                            this._loader = null)
                        }
                    }, {
                        key: "_doPcdnEvents",
                        value: function(t) {
                            if (this._loader)
                                for (var e in this._binds)
                                    t ? this._loader.on(e, this._binds[e]) : this._loader.off(e, this._binds[e])
                        }
                    }, {
                        key: "_onLoadLibErr",
                        value: function() {
                            this.trigger(i.BaseEvents.LIB_ERR, {
                                type: i.BaseEvents.LIB_ERR,
                                msg: "".concat(this._pcdnName, " load_fail")
                            })
                        }
                    }, {
                        key: "_onLoadFail",
                        value: function() {
                            this.trigger(i.LoadEvents.LOAD_FAIL, {
                                type: i.LoadEvents.LOAD_FAIL
                            })
                        }
                    }, {
                        key: "_onData",
                        value: function(t) {
                            0 === this._lastDataTs && (this.trigger(i.LoadEvents.LOAD_SUC, {
                                type: i.LoadEvents.LOAD_SUC
                            }),
                            ls.remove(this.onConnectTimeout, this));
                            var e = "xy" === this._pcdnName ? t : t.data;
                            this._lastDataTs = F.a.now(),
                            this._speed.addCur(e.byteLength),
                            this.trigger(i.LoadEvents.DATA, {
                                type: i.LoadEvents.DATA,
                                data: e
                            })
                        }
                    }, {
                        key: "_onGatherSuc",
                        value: function() {
                            this.trigger(i.BaseEvents.GATHER_SUC, {
                                type: i.BaseEvents.GATHER_SUC
                            })
                        }
                    }, {
                        key: "_onGatherFail",
                        value: function() {
                            this.trigger(i.BaseEvents.GATHER_FAIL, {
                                type: i.BaseEvents.GATHER_FAIL
                            })
                        }
                    }, {
                        key: "_onLoadStop",
                        value: function() {
                            this.trigger(i.LoadEvents.LOAD_STOP, {
                                type: i.LoadEvents.LOAD_STOP
                            })
                        }
                    }, {
                        key: "_onLoadFinish",
                        value: function() {
                            this.trigger(i.LoadEvents.LOAD_FINISH, {
                                type: i.LoadEvents.LOAD_FINISH
                            })
                        }
                    }, {
                        key: "_sdkDestroy",
                        value: function() {
                            this.trigger(i.LoadEvents.SDK_DESTROYED, {
                                type: i.LoadEvents.SDK_DESTROYED
                            })
                        }
                    }, {
                        key: "getName",
                        value: function() {
                            return this._pcdnName
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            var t = this._speed.average();
                            return t === R.UintMax && (t = 0),
                            t
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this._lastDataTs > 0
                        }
                    }, {
                        key: "create",
                        value: function() {
                            this._destroyLoader(),
                            this._createLoader()
                        }
                    }, {
                        key: "startPeerGather",
                        value: function(t) {
                            this._callPcdn("startPeerGather", [t])
                        }
                    }, {
                        key: "stopPeerGather",
                        value: function() {
                            this._callPcdn("stopPeerGather")
                        }
                    }, {
                        key: "refreshUrl",
                        value: function(t) {
                            this._callPcdn("refreshUrl", [t])
                        }
                    }, {
                        key: "startLoad",
                        value: function(t, e) {
                            E.a.log("PcdnLoader.startLoad url=" + t, (0,
                            d.default)(e)),
                            this._started = !0,
                            this._lastDataTs = 0,
                            ls.once(this.onConnectTimeout, this, 3e3),
                            this._callPcdn("startLoad", [t, e])
                        }
                    }, {
                        key: "onConnectTimeout",
                        value: function() {
                            this.trigger(i.LoadEvents.CONNECT_TIMEOUT, {
                                type: i.LoadEvents.CONNECT_TIMEOUT
                            })
                        }
                    }, {
                        key: "stopLoad",
                        value: function(t) {
                            this._started && (this._lastDataTs = 0,
                            this._started = !1,
                            this._speed.reset(),
                            ls.remove(this.onConnectTimeout, this),
                            this._callPcdn("stopLoad", {
                                reason: t
                            }))
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.clear(),
                            this._lastDataTs = 0,
                            this._started = !1,
                            ls.remove(this.onConnectTimeout, this),
                            this._doPcdnEvents(!1),
                            this._callPcdn("destroy")
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this.clear(),
                            this._doPcdnEvents(!1),
                            this.stopLoad(),
                            this.stopPeerGather(),
                            this._callPcdn("destroy"),
                            this._loader = null
                        }
                    }, {
                        key: "_callPcdn",
                        value: function(t, e) {
                            this._loader && this._loader[t] ? (E.a.log("PcdnLoader.".concat(t, " ").concat(this._pcdnName, " ").concat(e ? (0,
                            d.default)(e) : "")),
                            this._loader[t].apply(this._loader, e)) : E.a.log("PcdnLoader.".concat(t, " ").concat(this._pcdnName, " hasLoader=").concat(!!this._loader, " hasInterface=").concat(!!this._loader && !!this._loader[t]))
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            this._speed.calculate()
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            this._lastDataTs > 0 && t - this._lastDataTs > 500 && (this._lastDataTs = t,
                            this.trigger(i.LoadEvents.DATA_TIMEOUT, {
                                type: i.LoadEvents.DATA_TIMEOUT
                            }))
                        }
                    }], [{
                        key: "hasPcdn",
                        value: function(t) {
                            return !!Pn[t]
                        }
                    }]),
                    i
                }(Es);
                In.BaseEvents = {
                    LIB_READY: "LIB_READY",
                    LIB_ERR: "LIB_ERR",
                    GATHER_SUC: "GATHER_SUC",
                    GATHER_FAIL: "GATHER_FAIL"
                },
                In.LoadEvents = {
                    CONNECT_TIMEOUT: "CONNECT_TIMEOUT",
                    LOAD_SUC: "LOAD_SUC",
                    DATA: "DATA",
                    DATA_TIMEOUT: "DATA_TIMEOUT",
                    LOAD_FAIL: "LOAD_FAIL",
                    LOAD_STOP: "LOAD_STOP",
                    LOAD_FINISH: "LOAD_FINISH",
                    SDK_DESTROYED: "SDK_DESTROYED"
                };
                var bn = In
                  , Cn = function() {
                    function t(e) {
                        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        Object(p.a)(this, t),
                        this._flvPlayer = e,
                        this._flvLoader = new yn(e,i),
                        this._pcdnLoader = new bn,
                        this._sPcdnName = "",
                        this._requesting = !1,
                        this._loader = null,
                        this._swapTs = 0,
                        this._gatherSuc = !1,
                        this._failCnt = 0,
                        this.url = "",
                        this._checkSampleBind = this._checkSample.bind(this)
                    }
                    return Object(m.a)(t, [{
                        key: "connected",
                        get: function() {
                            return this._loader && this._loader.connected
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            return this._loader && this._loader.speed
                        }
                    }, {
                        key: "close",
                        value: function() {
                            E.a.log("LoaderCtrl.close"),
                            this._flvPlayer.anticode.off(hn.Events.REFRESH, this._onAnticodeRefresh, this),
                            this._flvLoader.close(),
                            this._pcdnLoader.close(),
                            this._requesting = !1,
                            this._loader = null,
                            this._failCnt = 0,
                            this._gatherSuc = !1,
                            this._swapTs = 0,
                            this._sPcdnName = ""
                        }
                    }, {
                        key: "checkPcdnMode",
                        value: function() {
                            this._reqPcdn()
                        }
                    }, {
                        key: "connect",
                        value: function(t) {
                            this.close(),
                            this.url = t,
                            this._connect(t),
                            this._reqPcdn()
                        }
                    }, {
                        key: "_connect",
                        value: function(t, e) {
                            t = this._getUrlParams(t, !1),
                            E.a.log("LoaderCtrl._connect", t),
                            this._flvPlayer.anticode.off(hn.Events.REFRESH, this._onAnticodeRefresh, this),
                            this._stopPcdn(e),
                            this._flvLoader.connect(t),
                            this._loader = this._flvLoader,
                            this.url = this._flvLoader.url ? this._flvLoader.url : t
                        }
                    }, {
                        key: "_stopPcdn",
                        value: function(t) {
                            this._doPcdnEventHandler(bn.LoadEvents, !1),
                            this._pcdnLoader.stopLoad(t)
                        }
                    }, {
                        key: "_reqPcdn",
                        value: function() {
                            var t = this;
                            if (1 != localStorage._closePcdn) {
                                if (this._flvPlayer.info.isAuto && Number(M.closePcdn500) === this._flvPlayer.info.curBitrate)
                                    E.a.log("LoaderCtrl._reqPcdn closePcdn500");
                                else if (localStorage._pcdnName && (this._flvPlayer.info.usePcdn = 1),
                                1 !== this._flvPlayer.info.usePcdn && this._flvPlayer.stat.setComDim(pt, 1),
                                1 === this._flvPlayer.info.usePcdn && !this._requesting && "" === this._sPcdnName) {
                                    this._flvPlayer.stat.setComDim(pt, 2),
                                    this._requesting = !0;
                                    var e = new Ls.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq;
                                    e.lReqTs = Date.now(),
                                    e.lUid = L.uid,
                                    e.sGuid = L.sGuid,
                                    e.lAnchorUid = this._flvPlayer.info.presenterUid,
                                    e.iCdnLine = this._flvPlayer.info.lineType,
                                    e.iCliType = Ls.EM_CLINET_TYPE.E_CLIENT_WEB,
                                    e.lBucketPara = Number(localStorage.randomPcdnPercent) || 0,
                                    e.iBusiType = Ls.EM_BUSI_TYPE.E_BusiType_Live,
                                    e.vCliSupportPcdns.value = ["ppio", "xy"],
                                    e.sStreamName = this._flvPlayer.info.sStreamName,
                                    E.a.log("LoaderCtrl.reqPcdn req", e),
                                    Bs.sendWup("hypcdngw", "onClientGetPcdnFlvOutsideSdkFullstreamInfo", e, (function(e) {
                                        E.a.log("HYPlayer.reqPcdn res", e),
                                        !e || 0 != e.iErrCode && 7 != e.iErrCode || t._rspPcdn(e)
                                    }
                                    ), !0, Bs.getRequestId())
                                }
                            } else
                                E.a.log("LoaderCtrl._reqPcdn host close")
                        }
                    }, {
                        key: "_rspPcdn",
                        value: function(t) {
                            this._requesting = !1,
                            localStorage._pcdnName && (t.sPcdnName = localStorage._pcdnName),
                            this._sPcdnName !== t.sPcdnName && (this._sPcdnName = t.sPcdnName,
                            this._flvPlayer.stat.setComDim(ft, t.sPcdnName),
                            this._flvPlayer.stat.setComDim(pt, 3),
                            this._loadPcdn())
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            this._loader && this._loader.onCheckTimer(t, e),
                            this._checkSwapToPcdn(t)
                        }
                    }, {
                        key: "_checkSwapToPcdn",
                        value: function(t) {
                            return !!(t > this._swapTs && this._gatherSuc && this._loader !== this._pcdnLoader) && (this._flvPlayer.stat.setComDim(pt, 10),
                            this._swapToPcdn(),
                            !0)
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            this._loader && this._loader.onCheckFastTimer && this._loader.onCheckFastTimer(t, e)
                        }
                    }, {
                        key: "_loadPcdn",
                        value: function() {
                            bn.hasPcdn(this._sPcdnName) ? (this._flvPlayer.stat.setComDim(pt, 5),
                            this._doPcdnEventHandler(bn.BaseEvents, !0),
                            this._pcdnLoader.setPcdnName(this._sPcdnName),
                            this._pcdnLoader.loadLib(this._flvPlayer.info.h5Root)) : this._flvPlayer.stat.setComDim(pt, 4)
                        }
                    }, {
                        key: "_doPcdnEventHandler",
                        value: function(t, e) {
                            for (var i in t) {
                                var s = t[i];
                                e ? this._pcdnLoader.on(s, this._onPcdnEventHandler, this) : this._pcdnLoader.off(s, this._onPcdnEventHandler, this)
                            }
                        }
                    }, {
                        key: "_onPcdnEventHandler",
                        value: function(t) {
                            switch (t.type !== bn.LoadEvents.DATA && E.a.log("LoaderCtrl._onPcdnEventHandler", t.type, t.msg),
                            t.type) {
                            case bn.BaseEvents.LIB_READY:
                                t.isFirst && this._reportPcdnLibAct([0], [this._pcdnLoader.getName()]),
                                this._flvPlayer.stat.setComDim(pt, 7),
                                this._pcdnLoader.create(),
                                this._pcdnLoader.startPeerGather(this._getUrl(!0));
                                break;
                            case bn.BaseEvents.LIB_ERR:
                                this._flvPlayer.stat.setComDim(pt, 6),
                                this._reportPcdnLibAct([100], [this._pcdnLoader.getName()]);
                                break;
                            case bn.LoadEvents.CONNECT_TIMEOUT:
                                this._flvPlayer.stat.setComDim(pt, 11),
                                this._swapToCdn(t.type);
                                break;
                            case bn.LoadEvents.DATA_TIMEOUT:
                                this._flvPlayer.getBufferLen() < 1500 && (this._flvPlayer.stat.setComDim(pt, 12),
                                this._swapToCdn(t.type));
                                break;
                            case bn.LoadEvents.LOAD_SUC:
                                this._failCnt = 0,
                                this._flvLoader.close(),
                                this._flvPlayer.stat.setComDim(pt, 15),
                                this._beforeSwap();
                                break;
                            case bn.LoadEvents.LOAD_FAIL:
                                this._flvPlayer.stat.setComDim(pt, 14),
                                this._swapToCdn(t.type);
                                break;
                            case bn.BaseEvents.GATHER_SUC:
                                this._gatherSuc = !0,
                                E.a.log("LoaderCtrl gather_suc", this._loader !== this._pcdnLoader),
                                this._checkSwapToPcdn(F.a.now()) || this._loader === this._pcdnLoader || this._flvPlayer.stat.setComDim(pt, 9);
                                break;
                            case bn.BaseEvents.GATHER_FAIL:
                                this._gatherSuc = !1,
                                this._flvPlayer.stat.setComDim(pt, 8);
                                break;
                            case bn.LoadEvents.DATA:
                                this._flvPlayer.onData(t.data, 2);
                                break;
                            case bn.LoadEvents.LOAD_STOP:
                                this._flvPlayer.stat.setComDim(pt, 13),
                                this._swapToCdn(t.type);
                                break;
                            case bn.LoadEvents.LOAD_FINISH:
                                this._flvPlayer.stat.setComDim(pt, 16),
                                this._swapToCdn(t.type);
                                break;
                            case bn.LoadEvents.SDK_DESTROYED:
                                this._flvPlayer.stat.setComDim(pt, 17),
                                this._swapToCdn(t.type)
                            }
                        }
                    }, {
                        key: "_reportPcdnLibAct",
                        value: function(t, e) {
                            this._flvPlayer.tsdb.sendMetrics([this._flvPlayer.stat.createAct(xi, {
                                value: t,
                                str: e
                            })])
                        }
                    }, {
                        key: "_onAnticodeRefresh",
                        value: function() {
                            this._flvPlayer.initInfo(this._flvPlayer.info, !0),
                            this._pcdnLoader.refreshUrl(this._flvPlayer.info.url)
                        }
                    }, {
                        key: "_checkSample",
                        value: function(t) {
                            var e = this._flvPlayer.mse.parser;
                            return e.lastParseDts > 0 && t.ts <= e.lastParseDts || (e.setDroppingSample(null),
                            !1)
                        }
                    }, {
                        key: "_swapToPcdn",
                        value: function() {
                            this._flvPlayer.anticode.on(hn.Events.REFRESH, this._onAnticodeRefresh, this),
                            this._doPcdnEventHandler(bn.LoadEvents, !0);
                            var t = this._flvPlayer.mse
                              , e = t.parser || {};
                            E.a.log("LoaderCtrl.swapToPcdn vDts=".concat(t.curVideoDts, " aDts=").concat(t.curAudioDts, " lastParseDts=").concat(e.lastParseDts)),
                            this._pcdnLoader.startLoad(this._getUrl(!0), {
                                startDts: e.lastParseDts
                            }),
                            this._loader = this._pcdnLoader,
                            this._flvPlayer.stat.addCore(Ce, 1)
                        }
                    }, {
                        key: "_swapToCdn",
                        value: function(t) {
                            var e = this._loader !== this._flvLoader;
                            E.a.log("LoaderCtrl.swapToCdn reason=".concat(t, " swap=").concat(e)),
                            e && (this._flvPlayer.tsdb.sendMetrics([this._flvPlayer.stat.createAct(Vi, {
                                str: [t]
                            })]),
                            this._failCnt++,
                            this._swapTs = F.a.now() + 1e4 * Math.min(6, this._failCnt),
                            this._flvPlayer.stat.addCore(be, 1),
                            this._beforeSwap(),
                            this._connect(this._getUrl(!1), t))
                        }
                    }, {
                        key: "_getUrl",
                        value: function(t) {
                            return this._flvPlayer.initInfo(this._flvPlayer.info, t),
                            this._getUrlParams(this._flvPlayer.info.url, t)
                        }
                    }, {
                        key: "_getUrlParams",
                        value: function(t, e) {
                            var i = "";
                            e && (i += "pulltype=pcdn&"),
                            i += "&wsiphost=ipdbme&";
                            var s = M.platform
                              , a = D.PLATFORM_TYPE[s] || D.PLATFORM_TYPE.web
                              , r = s === D.PLATFORM_TYPE_NAME.wap ? "uid=".concat(L.uid, "&uuid=").concat(L.uuid) : "u=".concat(L.convertUid);
                            i += "".concat(r, "&t=").concat(a, "&sv=").concat(2203101758),
                            -1 === t.indexOf("?") ? t += "?" : t += "&";
                            var n = {
                                url: t += i
                            };
                            return e && this._flvPlayer.isUseAV1() ? n.url += "&codec=av1" : e && this._flvPlayer.h265Proxy.checkUrl(n),
                            n.url
                        }
                    }, {
                        key: "_beforeSwap",
                        value: function() {
                            var t = this._flvPlayer.mse.parser;
                            t.parseFlvHead = !1,
                            t.flvCacher.reset(),
                            t.printFirstVideoTs = !1,
                            t.printFirstAudioTs = !1,
                            t.pfvTs = !1,
                            t.pfaTs = !1,
                            t.setDroppingSample(this._checkSampleBind)
                        }
                    }]),
                    t
                }()
                  , wn = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.samples = new Ki(e),
                        this.maxSize = e,
                        this.lastTs = 0,
                        this.isOver = !1,
                        this.callback = null
                    }
                    return Object(m.a)(t, [{
                        key: "getResult",
                        value: function() {
                            for (var t = this.samples.getSamples(), e = t.length, i = [], s = 0; s < e; s++)
                                i.push("".concat(s + 1, ":").concat(t[s]));
                            return i.join(",")
                        }
                    }, {
                        key: "start",
                        value: function(t) {
                            this.isOver = !1,
                            this.callback = t,
                            ls.add(this.onCheckTime, this, 20)
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.callback = null,
                            this.samples.reset(),
                            this.lastTs = 0,
                            ls.remove(this.onCheckTime, this)
                        }
                    }, {
                        key: "setOver",
                        value: function() {
                            if (!this.isOver) {
                                this.isOver = !0;
                                var t = this.getResult();
                                E.a.log("FastSample.over result=".concat(t)),
                                this.callback && this.callback(t),
                                this.stop()
                            }
                        }
                    }, {
                        key: "add",
                        value: function(t) {
                            if (!this.isOver) {
                                this.samples.addCur(t);
                                var e = F.a.now();
                                0 === this.lastTs ? this.lastTs = e : this._checkSample(e)
                            }
                        }
                    }, {
                        key: "onCheckTime",
                        value: function(t) {
                            this._checkSample(t)
                        }
                    }, {
                        key: "_checkSample",
                        value: function(t) {
                            this.lastTs > 0 && t - this.lastTs > 500 && (this.lastTs = t,
                            this.samples.calculate(),
                            this.samples.getSamples().length === this.maxSize && this.setOver())
                        }
                    }]),
                    t
                }()
                  , An = function t(e) {
                    Object(p.a)(this, t),
                    this.iHEVCBitRate = e.iHEVCBitRate,
                    this.iCodecType = e.iCodecType,
                    this.iBitRate = e.iBitRate,
                    this.bitrate = e.bitrate
                }
                  , Rn = 0
                  , Ln = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this._id = Rn++,
                        this._callbacks = e,
                        this._timeout = !1,
                        this._destroy = !1,
                        this._timeoutTime = 1e3,
                        this._onRspBind = this._onRsp.bind(this)
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this._destroy = !0,
                            this._callbacks = null,
                            ls.remove(this._onTimeout, this)
                        }
                    }, {
                        key: "sendP2PFlv",
                        value: function(t) {
                            var e = t.info
                              , i = this._getReq(t);
                            i.mAppendInfo.value = {
                                streamType: t.type,
                                expVideoFps: t.metadata && t.metadata.fps || 0,
                                expAudioFps: t.metadata && t.metadata.audioFps || 0,
                                codeRate: e.curBitrate,
                                isOriginal: Number(0 === e.originalBitrate),
                                line: t.lineType,
                                codeType: t.isH265 ? "265" : "264",
                                sStreamName: e.sStreamName,
                                playType: t.playType,
                                isServer: 0,
                                iIsP2PSupport: e.iIsP2PSupport
                            },
                            this._sendReq(i)
                        }
                    }, {
                        key: "sendAuto",
                        value: function(t) {
                            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3;
                            this._timeoutTime = e;
                            var i = this._getReq(t);
                            i.mAppendInfo.value = t.appendInfo,
                            this._sendReq(i)
                        }
                    }, {
                        key: "_getReq",
                        value: function(t) {
                            var e = new Ls.RecSysReq;
                            return e.tId.iAppid = L.appid,
                            e.tId.lUid = L.uid,
                            e.tId.sGuid = L.sGuid,
                            e.tId.sUA = "webh5",
                            e.sAnchorUid = t.presenterUid,
                            e.sRoomId = t.roomId,
                            e.iScene = t.scene,
                            e.bDebug = 1,
                            e
                        }
                    }, {
                        key: "_sendReq",
                        value: function(t) {
                            var e = (0,
                            k.default)({}, t);
                            E.a.log("RecSysProxy(".concat(this._id, ").sendReq"), t, (0,
                            d.default)(e)),
                            Bs.sendWup("mediaui", "getMediaRec", t, this._onRspBind, !0, Bs.getRequestId(), !0),
                            ls.once(this._onTimeout, this, this._timeoutTime)
                        }
                    }, {
                        key: "_onRsp",
                        value: function(t) {
                            if (1 != localStorage._testTimeout) {
                                ls.remove(this._onTimeout, this);
                                var e = (0,
                                k.default)({}, t);
                                E.a.log("RecSysProxy(".concat(this._id, ").onRsp"), t, (0,
                                d.default)(e)),
                                this._destroy || this._callbacks && this._callbacks.onRsp(t)
                            } else
                                E.a.log("RecSysProxy._onRsp _testTimeout=".concat(localStorage._testTimeout))
                        }
                    }, {
                        key: "_onTimeout",
                        value: function() {
                            this._callbacks && this._callbacks.onTimeout && this._callbacks.onTimeout()
                        }
                    }]),
                    t
                }()
                  , Bn = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.ctrlBitrate = e,
                        this.timeLineTs = 0,
                        this.sampleTs = 0,
                        this.sampleCheckTs = 0,
                        this.sampleDts = 0,
                        this.sampleCheckDts = 0,
                        this.printTs = 0,
                        this.printSampleTs = 0,
                        this.printSampleDts = 0,
                        this.startTs = 0,
                        this.startDts = 0,
                        this.cnt12 = 0
                    }
                    return Object(m.a)(t, [{
                        key: "start",
                        value: function(t, e) {
                            E.a.log("EvalBw.start now=".concat(t, " dts=").concat(e)),
                            this.startTs = this.timeLineTs = this.sampleTs = this.sampleCheckTs = this.printTs = this.printSampleTs = t,
                            this.startDts = this.printSampleDts = this.sampleCheckDts = this.sampleDts = e,
                            this.cnt12 = 0
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            E.a.log("EvalBw.reset"),
                            this.startTs = this.timeLineTs = this.sampleTs = this.sampleCheckTs = this.printTs = this.printSampleTs = 0,
                            this.startDts = this.printSampleDts = this.sampleCheckDts = this.sampleDts = 0,
                            this.cnt12 = 0
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            if (this.startTs > 0) {
                                var i = t - this.timeLineTs;
                                if (i > 300) {
                                    var s = this.sampleTs - this.sampleCheckTs
                                      , a = this.sampleDts - this.sampleCheckDts
                                      , r = a > 0 ? s / a : 2;
                                    E.a.log("EvalBw.onCheckFastTimer eval timeline=".concat(i, " costtime=").concat(s, " duration=").concat(a, " costtime/duration=").concat(r, " dts=").concat(this.sampleDts)),
                                    r > 1.4 && !this._downBwCheck() ? this._evalFail() : r > 1.2 && !this._downBwCheck() ? (this.cnt12++,
                                    this.cnt12 >= 2 && this._evalFail()) : this.cnt12 = 0,
                                    this.timeLineTs = t,
                                    this.sampleCheckTs = t,
                                    this.sampleCheckDts = this.sampleDts
                                }
                            }
                            if (Number(localStorage._printEval) > 0 && t - this.printTs > Number(localStorage._printEval) && this.sampleDts > 0) {
                                var n = t - this.printTs
                                  , o = this.sampleTs - this.printSampleTs
                                  , u = this.sampleDts - this.printSampleDts;
                                E.a.log("EvalBw.onCheckFastTimer print timeline=".concat(n, " duration=").concat(u, " costtime=").concat(o, " costtime/duration=").concat(o / u, " dts=").concat(this.sampleDts)),
                                this.printTs = t,
                                this.printSampleTs = this.sampleTs,
                                this.printSampleDts = this.sampleDts
                            }
                        }
                    }, {
                        key: "_evalFail",
                        value: function() {
                            this.stop(),
                            this.ctrlBitrate.evalFail()
                        }
                    }, {
                        key: "_downBwCheck",
                        value: function() {
                            var t = this.sampleTs - this.startTs
                              , e = this.sampleDts - this.startDts;
                            return E.a.log("EvalBw._downBwCheck costtime=".concat(t, " duration=").concat(e, " costtime/duration=").concat(t / e, " dts=").concat(this.sampleDts)),
                            e > 0 && t / e < 1.2
                        }
                    }, {
                        key: "addSample",
                        value: function(t) {
                            var e = F.a.now();
                            if (0 === this.printSampleDts && (this.printSampleDts = t.ts,
                            this.printTs = this.printSampleTs = e),
                            this.sampleTs = e,
                            this.sampleDts = t.ts,
                            this.startTs > 0 && t.key) {
                                var i = this._downBwCheck();
                                this.stop(),
                                i ? this.ctrlBitrate.evalSuc() : this.ctrlBitrate.evalFail()
                            }
                        }
                    }]),
                    t
                }()
                  , Dn = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.statSwitch = e,
                        this.type = 0,
                        this.startTs = 0,
                        this.nextIFrameTs = 0,
                        this.connectedTs = 0,
                        this.firstVideoPkgTs = 0,
                        this.ptsIFrameTs = 0,
                        this.endTs = 0
                    }
                    return Object(m.a)(t, [{
                        key: "start",
                        value: function(t, e) {
                            this.statSwitch.sendSwitchAuto([t, e || 0]),
                            this.type = t,
                            this.reset(),
                            this.startTs = F.a.now()
                        }
                    }, {
                        key: "nextIFrame",
                        value: function() {
                            this.startTs > 0 && (this.nextIFrameTs = F.a.now())
                        }
                    }, {
                        key: "connected",
                        value: function() {
                            this.startTs > 0 && (this.connectedTs = F.a.now())
                        }
                    }, {
                        key: "firstVideo",
                        value: function() {
                            this.startTs > 0 && (this.firstVideoPkgTs = F.a.now())
                        }
                    }, {
                        key: "ptsIFrame",
                        value: function() {
                            this.startTs > 0 && (this.ptsIFrameTs = F.a.now())
                        }
                    }, {
                        key: "end",
                        value: function(t) {
                            if (this.startTs > 0) {
                                this.endTs = F.a.now();
                                var e = [this.endTs - this.startTs, this.nextIFrameTs > 0 ? this.nextIFrameTs - this.startTs : -1, this.connectedTs > 0 && this.nextIFrameTs > 0 ? this.connectedTs - this.nextIFrameTs : -1, this.firstVideoPkgTs > 0 && this.connectedTs > 0 ? this.firstVideoPkgTs - this.connectedTs : -1, this.ptsIFrameTs > 0 && this.firstVideoPkgTs > 0 ? this.ptsIFrameTs - this.firstVideoPkgTs : -1, this.ptsIFrameTs > 0 ? this.endTs - this.ptsIFrameTs : -1];
                                E.a.log("AutoSeg.end", e.toString()),
                                this.statSwitch.sendSwitchCost(e, [this.type, t])
                            }
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.startTs = 0,
                            this.nextIFrameTs = 0,
                            this.connectedTs = 0,
                            this.firstVideoPkgTs = 0,
                            this.ptsIFrameTs = 0,
                            this.endTs = 0
                        }
                    }]),
                    t
                }()
                  , On = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._size = 0,
                        this._cnt = 0,
                        this._index = 0,
                        this._map = new v.default,
                        this._bufCnt = Number(M.autoCfg.bufCnt),
                        this._sucPer = Number(M.autoCfg.sucPer),
                        this._sucCnt = 0,
                        this._contiCnt = 0
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this._cnt = 0,
                            this._index = 0,
                            this._map.clear(),
                            this._sucCnt = 0,
                            this._contiCnt = 0
                        }
                    }, {
                        key: "setSwitchTime",
                        value: function(t) {
                            this.reset(),
                            this._size = t / Number(M.autoCfg.sampleTime)
                        }
                    }, {
                        key: "addSample",
                        value: function(t) {
                            if (this._cnt++,
                            t ? (this._contiCnt++,
                            this._sucCnt++,
                            this._map.set(this._index, 1)) : (this._contiCnt = 0,
                            this._map.set(this._index, 0)),
                            this._cnt > this._size) {
                                this._cnt--;
                                var e = this._index - this._size
                                  , i = this._map.get(e);
                                this._map.delete(e),
                                1 === i && this._sucCnt--
                            }
                            return this._index++,
                            this.isFullSize() && this.isLastReach() && this.isPercentReach()
                        }
                    }, {
                        key: "isFullSize",
                        value: function() {
                            return this._cnt >= this._size
                        }
                    }, {
                        key: "isLastReach",
                        value: function() {
                            return this._contiCnt >= this._bufCnt
                        }
                    }, {
                        key: "isPercentReach",
                        value: function() {
                            return this._sucCnt / this._cnt >= this._sucPer
                        }
                    }]),
                    t
                }()
                  , Mn = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._minTime = Number(M.autoCfg.minTime),
                        this._maxTime = Number(M.autoCfg.maxTime),
                        this._map = new v.default
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            E.a.log("AutoUpGap.reset"),
                            this._map.clear()
                        }
                    }, {
                        key: "getMin",
                        value: function() {
                            return this._minTime
                        }
                    }, {
                        key: "getGap",
                        value: function(t) {
                            return this._map.has(t) || this._map.set(t, this._minTime),
                            this._map.get(t)
                        }
                    }, {
                        key: "addFail",
                        value: function(t, e) {
                            E.a.log("AutoUpGap.addFail bitrate=".concat(t, " isMin=").concat(e));
                            var i = this.getGap(t);
                            if (!e) {
                                var s = Math.min(2 * i, this._maxTime);
                                this._map.set(t, s)
                            }
                        }
                    }]),
                    t
                }()
                  , Fn = new a.default
                  , Un = new v.default
                  , Nn = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._highRate = Number(M.autoCfg.highRate),
                        this._badBuf = Number(M.autoCfg.badBuf),
                        this._badCnt = Number(M.autoCfg.badCnt),
                        this._sList = [],
                        this._sTime = M.autoCfg.badS[0],
                        this._sCnt = M.autoCfg.badS[1],
                        this._lList = [],
                        this._lTime = M.autoCfg.badL[0],
                        this._lCnt = M.autoCfg.badL[1]
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this._sList = [],
                            this._lList = []
                        }
                    }, {
                        key: "getBitrates",
                        value: function() {
                            return (0,
                            l.default)(Fn).join(",")
                        }
                    }, {
                        key: "hasBitrate",
                        value: function(t) {
                            return Fn.has(t)
                        }
                    }, {
                        key: "addBadQuality",
                        value: function(t, e, i, s) {
                            return this._addBadQuality(t, e, i, s, this._sList, this._sTime, this._sCnt) || this._addBadQuality(t, e, i, s, this._lList, this._lTime, this._lCnt)
                        }
                    }, {
                        key: "_addBadQuality",
                        value: function(t, e, i, s, a, r, n) {
                            if (a.push({
                                now: e,
                                pauseTime: i,
                                bufferLen: s
                            }),
                            a.length > n && a.shift(),
                            a.length >= n) {
                                var o = e - a[0].now;
                                if (o <= r)
                                    return E.a.log("AutoBadQuality._addBadQuality disTime=".concat(o, " time=").concat(r, " cnt=").concat(n)),
                                    this._checkPerformance(t, a),
                                    !0
                            }
                            return !1
                        }
                    }, {
                        key: "_checkPerformance",
                        value: function(t, e) {
                            var i = this;
                            if (t > this._highRate)
                                if (e.some((function(t) {
                                    return t.bufferLen < i._badBuf
                                }
                                ))) {
                                    Un.has(t) || Un.set(t, 0);
                                    var s = Un.get(t) + 1;
                                    Un.set(t, s),
                                    s >= this._badCnt && Fn.add(t)
                                } else
                                    Fn.add(t)
                        }
                    }]),
                    t
                }()
                  , xn = {
                    UP_PTS: Math.pow(2, 0),
                    UP_WAIT_IFRAME: Math.pow(2, 1),
                    UP_CONNECT_FAIL: Math.pow(2, 2),
                    UP_CONNECT_SLOW: Math.pow(2, 3),
                    UP_FIRST_FRAME: Math.pow(2, 4),
                    UP_PTS_FRAME: Math.pow(2, 5),
                    BACK_CONNECT_FAIL: Math.pow(2, 6),
                    BACK_PTS: Math.pow(2, 7),
                    EVAL_BEFORE: Math.pow(2, 8),
                    EVAL_AFTER: Math.pow(2, 9),
                    BACK_CONNECT_SLOW: Math.pow(2, 10),
                    BACK_FIRST_FRAME: Math.pow(2, 11),
                    BACK_PTS_FRAME: Math.pow(2, 12),
                    DOWN_NO_IFRAME: Math.pow(2, 13),
                    DOWN_CONNECT_FAIL: Math.pow(2, 14),
                    DOWN_PTS: Math.pow(2, 15),
                    DOWN_CONNECT_SLOW: Math.pow(2, 16),
                    DOWN_FIRST_FRAME: Math.pow(2, 17),
                    DOWN_PTS_FRAME: Math.pow(2, 18),
                    UP_NO_IFRAME: Math.pow(2, 19)
                }
                  , Vn = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this._ctrlBitrate = e,
                        this._autoMonitor = i,
                        this._buffer = null,
                        this._startTs = 0,
                        this._connectedTs = 0,
                        this._firstFrameTs = 0
                    }
                    return Object(m.a)(t, [{
                        key: "buffer",
                        set: function(t) {
                            this._buffer = t
                        }
                    }, {
                        key: "setStart",
                        value: function(t) {
                            this._startTs = F.a.now(),
                            this._connectedTs = 0,
                            this._firstFrameTs = 0,
                            t < M.autoBufferScore && this._ctrlBitrate.isSwitchUp() && this._autoMonitor.addBadReason(xn.UP_WAIT_IFRAME)
                        }
                    }, {
                        key: "setConnected",
                        value: function() {
                            this._connectedTs = F.a.now(),
                            this._connectedTs - this._startTs > M.autoConnectScore && (this._ctrlBitrate.isSwitchUp() ? this._autoMonitor.addBadReason(xn.UP_CONNECT_SLOW) : this._ctrlBitrate.isSwitchDown() ? this._autoMonitor.addBadReason(xn.DOWN_CONNECT_SLOW) : this._ctrlBitrate.isSwitchBack() && this._autoMonitor.addBadReason(xn.BACK_CONNECT_SLOW))
                        }
                    }, {
                        key: "setFirstFrame",
                        value: function() {
                            this._firstFrameTs = F.a.now(),
                            this._checkFirstFrame()
                        }
                    }, {
                        key: "setFirstVideoTimeout",
                        value: function() {
                            this._connectedTs > 0 ? this._checkFirstFrame() : this._ctrlBitrate.isSwitchUp() ? this._autoMonitor.addBadReason(xn.UP_CONNECT_FAIL) : this._ctrlBitrate.isSwitchDown() ? this._autoMonitor.addBadReason(xn.DOWN_CONNECT_FAIL) : this._ctrlBitrate.isSwitchBack() && this._autoMonitor.addBadReason(xn.BACK_CONNECT_FAIL)
                        }
                    }, {
                        key: "_checkFirstFrame",
                        value: function() {
                            F.a.now() - this._connectedTs > M.autoFirstScore && (this._ctrlBitrate.isSwitchUp() ? this._autoMonitor.addBadReason(xn.UP_FIRST_FRAME) : this._ctrlBitrate.isSwitchDown() ? this._autoMonitor.addBadReason(xn.DOWN_FIRST_FRAME) : this._ctrlBitrate.isSwitchBack() && this._autoMonitor.addBadReason(xn.BACK_FIRST_FRAME))
                        }
                    }, {
                        key: "setPtsFrame",
                        value: function(t) {
                            this._checkPtsFrame(),
                            t > 0 && (this._ctrlBitrate.isSwitchUp() ? this._autoMonitor.addBadReason(xn.UP_PTS) : this._ctrlBitrate.isSwitchDown() ? this._autoMonitor.addBadReason(xn.DOWN_PTS) : this._ctrlBitrate.isSwitchBack() && this._autoMonitor.addBadReason(xn.BACK_PTS))
                        }
                    }, {
                        key: "setPtsFrameTimeout",
                        value: function() {
                            this._checkPtsFrame()
                        }
                    }, {
                        key: "_checkPtsFrame",
                        value: function() {
                            F.a.now() - this._firstFrameTs > M.autoPtsScore && (this._ctrlBitrate.isSwitchUp() ? this._autoMonitor.addBadReason(xn.UP_PTS_FRAME) : this._ctrlBitrate.isSwitchDown() ? this._autoMonitor.addBadReason(xn.DOWN_PTS_FRAME) : this._ctrlBitrate.isSwitchBack() && this._autoMonitor.addBadReason(xn.BACK_PTS_FRAME))
                        }
                    }, {
                        key: "setEvalBefore",
                        value: function(t) {
                            t < M.autoBufferScore && this._autoMonitor.addBadReason(xn.EVAL_BEFORE)
                        }
                    }, {
                        key: "setEvalAfter",
                        value: function(t) {
                            t < M.autoBufferScore && this._autoMonitor.addBadReason(xn.EVAL_AFTER)
                        }
                    }, {
                        key: "setNoIFrame",
                        value: function() {
                            this._buffer && this._buffer.isWaitForIFrame() && (this._ctrlBitrate.isSwitchUp() ? this._autoMonitor.addBadReason(xn.UP_NO_IFRAME) : this._ctrlBitrate.isSwitchDown() && this._autoMonitor.addBadReason(xn.DOWN_NO_IFRAME))
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this._startTs = 0,
                            this._connectedTs = 0,
                            this._firstFrameTs = 0
                        }
                    }]),
                    t
                }()
                  , Hn = {
                    NONE: 0,
                    H264ToH264: 1,
                    H264ToH265: 2,
                    H265ToH264: 3,
                    H265ToH265: 4
                }
                  , Gn = function() {
                    function t(e, i) {
                        var s = e.player
                          , a = e.statSwitch
                          , r = e.autoMonitor
                          , n = e.recSysStat;
                        Object(p.a)(this, t),
                        this._player = s,
                        this._statSwitch = a,
                        this._autoMonitor = r,
                        this._recSysStat = n,
                        this._callbacks = i,
                        this._seg = new Dn(a),
                        this._badStat = new Vn(this,r),
                        this._buffer = null,
                        this._curBitrate = 0,
                        this._lastBitrate = 0,
                        this._startBitrate = 0,
                        this._sessionId = 0,
                        this._maxBitrate = 0,
                        this._originalMaxBitrate = 0,
                        this._minBitrate = 0,
                        this._bitrateList = [],
                        this._allBitratebps = "",
                        this._switchSampleTime = Number(M.autoCfg.sampleTime),
                        this._switchUpGap = Number(M.autoCfg.upGap),
                        this._switchDownGap = Number(M.autoCfg.downGap),
                        this._switchBackGap = Number(M.autoCfg.backGap),
                        this._nextReqInterval = Number(M.recSysExpiredTime),
                        this._firstRecSysTime = Number(M.autoCfg.sysTime),
                        this._switchUpPer = Number(M.autoCfg.upPer),
                        this._switchDownPer = Number(M.autoCfg.downPer),
                        this._switchDownNowPer = Number(M.autoCfg.downNowPer),
                        this._switchWaitPer = Number(M.autoCfg.waitPer),
                        this._switchDownBitrate = Number(M.autoCfg.downBitrate),
                        this._beforeSwitchCb = null,
                        this._mse = null,
                        this._evalBw = new Bn(this),
                        this._switchNextTime = 0,
                        this._switchSampleTs = 0,
                        this._upGap = new Mn,
                        this._switchUpSample = new On,
                        this._badRate = new Nn,
                        this._switchUpReason = Pa,
                        this._switchDownReason = Ba,
                        this._switchType = Hn.NONE,
                        this._switchOver = !1,
                        this._evalOver = !1,
                        this._started = !1,
                        this._nextRecSysTs = 0,
                        this._switchState = 0,
                        this._recSysProxy = null,
                        this._badQualityCoderatebps = [],
                        this._recSysExpiredTime = 0,
                        this._visibilityState = D.VISIBILITY_STATE.VISIBLE,
                        this._onRecSysBind = this._onRecSys.bind(this),
                        this._onRecSysDownTimeoutBind = this._onRecSysDownTimeout.bind(this),
                        this._onRecSysIntervalTimeoutBind = this._onRecSysIntervalTimeout.bind(this),
                        this._onVisibilityChangeBind = this._onVisibilityChange.bind(this),
                        this._switchUpSample.setSwitchTime(this._upGap.getMin()),
                        this.closeAuto = 2 === Number(localStorage.openAuto),
                        this.switchStartTime = 0
                    }
                    return Object(m.a)(t, [{
                        key: "switchType",
                        get: function() {
                            return this._switchType
                        },
                        set: function(t) {
                            this._switchType = t
                        }
                    }, {
                        key: "beforeSwitchCb",
                        set: function(t) {
                            this._beforeSwitchCb = t
                        }
                    }, {
                        key: "lastBitrate",
                        get: function() {
                            return this._lastBitrate
                        }
                    }, {
                        key: "curBitrate",
                        get: function() {
                            return this._curBitrate
                        }
                    }, {
                        key: "isSwitchUp",
                        value: function() {
                            return 1 === this._switchState
                        }
                    }, {
                        key: "isSwitchDown",
                        value: function() {
                            return 3 === this._switchState
                        }
                    }, {
                        key: "isSwitchBack",
                        value: function() {
                            return 4 === this._switchState
                        }
                    }, {
                        key: "start",
                        value: function(t, e) {
                            var i = this;
                            if (!this._started)
                                if (t && t.parser && t.parser.ctrlBuffer) {
                                    E.a.log("CtrlBitrate.start", (0,
                                    d.default)(e)),
                                    this._mse = t;
                                    var s = t.parser.ctrlBuffer;
                                    s.setEval(this._evalBw),
                                    s.callbacks = this._callbacks,
                                    this._buffer = s,
                                    this._badStat.buffer = s,
                                    this._sessionId = e.sessionId,
                                    this._curBitrate = e.curBitrate,
                                    this._maxBitrate = e.startBitrate,
                                    3 === Number(M.isWebAutoAB) && (this._maxBitrate = M.maxBitRate),
                                    this._originalMaxBitrate = this._maxBitrate,
                                    this._startBitrate = e.startBitrate,
                                    this._bitrateList = [],
                                    this._minBitrate = o.default;
                                    var a = [];
                                    e.bitrateList.forEach((function(t) {
                                        i._bitrateList.push(new An(t)),
                                        a.push(1e3 * t.bitrate),
                                        i._minBitrate = Math.min(i._minBitrate, t.bitrate)
                                    }
                                    )),
                                    this._allBitratebps = a.join(","),
                                    this._bitrateList.sort((function(t, e) {
                                        return t.bitrate > e.bitrate ? -1 : 1
                                    }
                                    )),
                                    this._start()
                                } else
                                    E.a.warn("CtrlBitrate.start waring mse")
                        }
                    }, {
                        key: "_start",
                        value: function() {
                            E.a.log("CtrlBitrate._start started=".concat(this._started, " bitrates=").concat(this._bitrateList.length, " mse=").concat(!!this._mse)),
                            this._mse && this._bitrateList.length > 0 && !this._started && (this._started = !0,
                            this._player.eventEmitter.on(P.VISIBILITY_CHANGE, this._onVisibilityChangeBind),
                            this._switchNextTime = F.a.now() + 5e3,
                            ls.add(this._onCheckFastTimer, this, 100),
                            ls.once(this._firstReqAuto, this, 1e3 + 10 * Math.floor(Math.random() * this._firstRecSysTime / 10)),
                            this._onVisibilityChange())
                        }
                    }, {
                        key: "_onVisibilityChange",
                        value: function() {
                            E.a.log("CtrlBitrate._onVisibilityChange old=".concat(this._visibilityState, " new=").concat(document.visibilityState)),
                            this._visibilityState !== D.VISIBILITY_STATE.VISIBLE && document.visibilityState === D.VISIBILITY_STATE.VISIBLE && (this._switchSampleTs = 0,
                            this._switchUpSample.reset()),
                            this._visibilityState = document.visibilityState
                        }
                    }, {
                        key: "_firstReqAuto",
                        value: function() {
                            E.a.log("CtrlBitrate._firstReqAuto"),
                            this._reqAutoRecSys(1, this._onRecSysIntervalTimeoutBind)
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            E.a.log("CtrlBitrate.stop"),
                            this._mse = null,
                            this._buffer = null,
                            this._started = !1,
                            this._switchState = 0,
                            this._switchType = Hn.NONE,
                            this._switchUpReason = Pa,
                            this._switchDownReason = Ba,
                            this._badQualityCoderatebps = [],
                            this._recSysExpiredTime = 0,
                            this._switchNextTime = 0,
                            this._switchTarget = null,
                            this._curBitrate = 0,
                            this._lastBitrate = 0,
                            this._nextRecSysTs = 0,
                            this._bitrateList = [],
                            this._evalBw.stop(),
                            this._switchUpSample.reset(),
                            this._upGap.reset(),
                            this._badRate.reset(),
                            this._destroyRecSys(),
                            this._player.eventEmitter.off(P.VISIBILITY_CHANGE, this._onVisibilityChangeBind),
                            ls.remove(this._onCheckFastTimer, this),
                            ls.remove(this._firstReqAuto, this),
                            this.switchStartTime = 0
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            this._buffer.pause()
                        }
                    }, {
                        key: "_sendSwitchStat",
                        value: function(t) {
                            var e = this._buffer.switchTs.getMetric()
                              , i = e.values
                              , s = e.strs;
                            this._buffer.switchTs.resetPtsSample(),
                            i[3] = this._seg.type,
                            s[2] = t,
                            this._statSwitch.sendSwitchPts(i, s),
                            this._seg.end(t)
                        }
                    }, {
                        key: "switchBitrate",
                        value: function(t) {
                            this._curBitrate !== t && (0 !== this._curBitrate && E.a.log("CtrlBitrate.switchBitrate from=".concat(this._curBitrate, " to=").concat(t, " buffer=").concat(this._mse.getBufferLen())),
                            this._switchOver = !1,
                            this._lastBitrate = this._curBitrate,
                            this._curBitrate = t,
                            this._buffer.switchBitrate(3 === this._switchState, this._lastBitrate, this._curBitrate))
                        }
                    }, {
                        key: "switchBack",
                        value: function(t) {
                            if (this.switchStartTime = 0,
                            0 !== this._switchState && this._lastBitrate < this._curBitrate) {
                                this._upGap.addFail(this._lastBitrate, this._curBitrate === this._minBitrate),
                                this._evalBw.stop(),
                                this._sendSwitchStat(t === Ta ? 1 : 2),
                                this._seg.start(_a, t),
                                this._switchState = 4,
                                E.a.log("CtrlBitrate.switchBack from=".concat(this._curBitrate, " lastBitrate=").concat(this._lastBitrate, " reason=").concat(t, " buffer=").concat(this._mse.getBufferLen()));
                                for (var e = this._bitrateList.length, i = 0; i < e; i++) {
                                    var s = this._bitrateList[i];
                                    if (s.bitrate === this._lastBitrate) {
                                        var a = this._getDownInfo(i + 1, e);
                                        a && a.bitrate >= this._switchDownBitrate && (s = a),
                                        E.a.log("CtrlBitrate.switchBack to=".concat(s.bitrate)),
                                        this._beforeSwitchCb && this._beforeSwitchCb(s),
                                        this._buffer.switchBack();
                                        break
                                    }
                                }
                            }
                        }
                    }, {
                        key: "startEval",
                        value: function(t) {
                            if (1 === this._switchState) {
                                var e = this._mse.getBufferLen();
                                E.a.log("CtrlBitrate.switchDone start eval buffer=".concat(e)),
                                this._badStat.setEvalBefore(e),
                                this._switchState = 6,
                                this._switchUpReason = Ra,
                                this._evalOver = !1,
                                this._evalBw.start(F.a.now(), t)
                            }
                        }
                    }, {
                        key: "evalSuc",
                        value: function() {
                            var t = this._mse.getBufferLen();
                            E.a.log("CtrlBirate.evalSuc buffer=".concat(t)),
                            this._badStat.setEvalAfter(t);
                            var e = F.a.now();
                            this._switchNextTime > e ? this._switchNextTime += this._switchUpGap : this._switchNextTime = e + this._switchUpGap,
                            this._evalOver = !0,
                            this._resetProperties(),
                            this._sendSwitchStat(1),
                            this._setPlaybackrate(!1),
                            this._switchUpSample.setSwitchTime(this._upGap.getGap(this._curBitrate))
                        }
                    }, {
                        key: "evalFail",
                        value: function() {
                            var t = this._mse.getBufferLen();
                            E.a.log("CtrlBirate.evalFail buffer=".concat(t)),
                            this._badStat.setEvalAfter(t),
                            this._switchUpReason = La,
                            this._evalOver = !0,
                            this.switchBack(Ta)
                        }
                    }, {
                        key: "_resetProperties",
                        value: function() {
                            this._evalOver && this._switchOver && (this._switchState = 0,
                            this._switchType = Hn.NONE,
                            this._switchUpReason = Pa,
                            this._switchDownReason = Ba)
                        }
                    }, {
                        key: "switchDone",
                        value: function(t) {
                            this._switchOver = !0;
                            var e = this._mse.getBufferLen();
                            E.a.log("CtrlBitrate.switchDone buffer=".concat(e, " switchType=").concat(this._switchType, " switchNextGap=").concat(t));
                            var i = F.a.now();
                            if (this._switchNextTime = i + t,
                            6 === this._switchState && (this.switchStartTime = i),
                            3 === this._switchState || 4 === this._switchState) {
                                this._evalBw.reset(),
                                this._sendSwitchStat(1),
                                3 === this._switchState ? (this._switchUpReason = Pa,
                                this._switchDownReason = Ba,
                                this._switchNextTime += this._switchDownGap,
                                this._switchState = 0,
                                this._switchType = Hn.NONE,
                                this._setPlaybackrate(!1)) : (this._switchState = 5,
                                this._switchNextTime += this._switchBackGap);
                                var s = this._upGap.getGap(this._curBitrate);
                                E.a.log("CtrlBitrate.switchDone switchTime=".concat(s)),
                                this._switchUpSample.setSwitchTime(s)
                            } else
                                this._resetProperties();
                            this._buffer.play()
                        }
                    }, {
                        key: "_setPlaybackrate",
                        value: function(t) {
                            var e = this._mse.getBufferLen()
                              , i = Number(M.autoCfg.slow);
                            i = e > 3e3 ? .95 : e > 2e3 ? .9 : .85,
                            this._mse.setPlaybackRate(t ? i : 1),
                            this._mse.autoBitrateJitter = t
                        }
                    }, {
                        key: "_switchUp",
                        value: function() {
                            if (this._curBitrate < this.maxBitrate) {
                                if (0 === this._switchState) {
                                    for (var t = null, e = this._bitrateList.length - 1; e >= 0; e--) {
                                        var i = this._bitrateList[e];
                                        if (i.bitrate > this._curBitrate && !this._badRate.hasBitrate(i.bitrate) && i.bitrate <= this.maxBitrate && !this._isBadBitrate(i.bitrate)) {
                                            t = i;
                                            break
                                        }
                                    }
                                    t ? (E.a.log("CtrlBitrate._switchUp suc"),
                                    this._setPlaybackrate(!0),
                                    this._seg.start(ya),
                                    this._switchState = 1,
                                    this._beforeSwitchCb && this._beforeSwitchCb(t),
                                    this._autoMonitor.start(ya, this.switchType)) : this._bitrateList[0].bitrate > this.maxBitrate ? this._switchUpReason = Aa : this._switchUpReason = wa
                                }
                            } else
                                this._switchUpReason = Ca
                        }
                    }, {
                        key: "addBadQuality",
                        value: function(t, e, i) {
                            t = t || F.a.now(),
                            E.a.log("CtrlBitrate.addBadQuality started=".concat(this._started, " switchState=").concat(this._switchState)),
                            this._started && 0 === this._switchState && this._badRate.addBadQuality(this._curBitrate, t, e, i) && (this._badRate.reset(),
                            E.a.log("CtrlBitrate pause down!"),
                            this._switchDownBefore())
                        }
                    }, {
                        key: "_switchDownBefore",
                        value: function() {
                            var t = this._bitrateList[this._bitrateList.length - 1].bitrate;
                            this._curBitrate > t && (this._switchState = 2,
                            2 === Number(M.isWebAutoAB) || 3 === Number(M.isWebAutoAB) ? this._switchDown() : this._reqAutoRecSys(2, this._onRecSysDownTimeoutBind))
                        }
                    }, {
                        key: "_switchDown",
                        value: function() {
                            var t = F.a.now();
                            M.autoCfg && 0 != this.switchStartTime && t - this.switchStartTime < M.autoCfg.noRederTime && this._upGap.addFail(this._lastBitrate, this._curBitrate === this._minBitrate),
                            this.switchStartTime = 0;
                            for (var e = this.badQualityCoderatebps, i = this._bitrateList.length, s = null, a = 0; a < i; a++) {
                                var r = this._bitrateList[a];
                                if (r.bitrate < this._curBitrate && !this._isBadBitrate(r.bitrate)) {
                                    if (r.bitrate === this._minBitrate || r.bitrate <= this._switchDownBitrate)
                                        s = r;
                                    else {
                                        var n = this._getDownInfo(a + 1, i);
                                        s = !n || n.bitrate < this._switchDownBitrate ? r : n
                                    }
                                    break
                                }
                            }
                            if (s)
                                E.a.log("CtrlBitrate._switchDown suc"),
                                this._setPlaybackrate(!0),
                                this._seg.start(va),
                                this._switchState = 3,
                                this._beforeSwitchCb && this._beforeSwitchCb(s),
                                this._autoMonitor.start(va, this.switchType);
                            else {
                                E.a.log("CtrlBitrate._switchDown fail bad_host=".concat(this._badRate.getBitrates(), " bad_svr=").concat(e.join(",")));
                                var o = this._bitrateList[i - 1];
                                -1 !== e.indexOf(1e3 * o.bitrate) ? this._switchDownReason = Ma : this._badRate.hasBitrate(o.bitrate) && (this._switchDownReason = Fa)
                            }
                        }
                    }, {
                        key: "_isBadBitrate",
                        value: function(t) {
                            return -1 !== this.badQualityCoderatebps.indexOf(1e3 * t) || this._badRate.hasBitrate(t)
                        }
                    }, {
                        key: "_getDownInfo",
                        value: function(t, e) {
                            return null
                        }
                    }, {
                        key: "_onRecSysDownTimeout",
                        value: function() {
                            E.a.log("CtrlBitrate._onRecSysTimeout"),
                            this._nextRecSysTs = F.a.now() + this.nextReqInterval,
                            this._destroyRecSys(),
                            this._switchDown()
                        }
                    }, {
                        key: "_onCheckFastTimer",
                        value: function(t, e) {
                            if (this._evalBw.onCheckFastTimer(t, e),
                            5 === this._switchState)
                                this._fillBuf();
                            else if (this._visibilityState === D.VISIBILITY_STATE.VISIBLE && 0 === this._switchState && t > this._switchNextTime && !this._buffer.isPaused() && !this.closeAuto) {
                                if (0 === this._switchSampleTs)
                                    this._switchSampleTs = t;
                                else if (t - this._switchSampleTs >= this._switchSampleTime) {
                                    this._switchSampleTs = t;
                                    var i = this._mse.getBufferLen()
                                      , s = this._player.getWaitBufferLen()
                                      , a = this._player.getWaitFrameTime(t);
                                    this._needSwitchDown(t, i, s, a) ? (E.a.log("CtrlBitrate buffer down! buffer=".concat(i, " waitBuffer=").concat(s, " waitFrameTime=").concat(a)),
                                    this._switchDownBefore()) : (this._switchDownReason = Oa,
                                    this._switchUpSample.addSample(i >= this._mse.JITTER_BUFLEN * this._switchUpPer) ? this._switchUp() : this._switchUpSample.isFullSize() ? this._switchUpSample.isLastReach() ? this._switchUpSample.isPercentReach() || (this._switchUpReason = ba) : this._switchUpReason = Ia : this._switchUpReason = Ea)
                                }
                            } else
                                t < this._switchNextTime && (this._switchUpReason = ka,
                                this._switchDownReason = Da);
                            this._nextRecSysTs > 0 && t >= this._nextRecSysTs && this._reqAutoRecSys(0, this._onRecSysIntervalTimeoutBind)
                        }
                    }, {
                        key: "_needSwitchDown",
                        value: function(t, e, i, s) {
                            return e + i < this._mse.JITTER_BUFLEN * this._switchDownPer
                        }
                    }, {
                        key: "_fillBuf",
                        value: function() {
                            var t = this._mse.getBufferLen();
                            t >= this._mse.JITTER_BUFLEN * this._switchUpPer && (E.a.log("CtrlBitrate.fillBuf suc bufferLen=".concat(t)),
                            this._switchState = 0,
                            this._switchType = Hn.NONE,
                            this._setPlaybackrate(!1))
                        }
                    }, {
                        key: "_reqAutoRecSys",
                        value: function(t, e) {
                            if (2 !== Number(M.isWebAutoAB) && 3 !== Number(M.isWebAutoAB)) {
                                this._nextRecSysTs = o.default,
                                this._destroyRecSys();
                                var i = this._player.info
                                  , s = new Ln({
                                    onRsp: this._onRecSysBind,
                                    onTimeout: e
                                });
                                s.sendAuto({
                                    presenterUid: i.presenterUid,
                                    roomId: i.roomId,
                                    scene: 1,
                                    appendInfo: {
                                        platform: "webh5&".concat(2203101758),
                                        p2p: this._player.playerType,
                                        h265: this._player.h265Proxy && this._player.h265Proxy.isReady ? 1 : 0,
                                        line: i.lineType,
                                        coderatebps: 1e3 * i.curBitrate,
                                        gameid: i.gameId,
                                        all_coderatebps: this._allBitratebps,
                                        req_type: t,
                                        start_coderatebps: 1e3 * this._startBitrate,
                                        session_id: this._sessionId
                                    }
                                }, 1e3),
                                this._recSysProxy = s
                            }
                        }
                    }, {
                        key: "_onRecSysIntervalTimeout",
                        value: function() {
                            this._nextRecSysTs = F.a.now() + this.nextReqInterval,
                            this._destroyRecSys()
                        }
                    }, {
                        key: "_onRecSys",
                        value: function(t) {
                            var e = !1
                              , i = F.a.now();
                            if (t) {
                                if (this._recSysStat.addItem(1, t.tRecSysInfo.sDispatchId, i + M.recSysExpiredTime),
                                Number(localStorage._testAction) > 0 && (E.a.log("CtrlBitrate._onRecSys _testAction=".concat(localStorage._testAction)),
                                t.tRecSysInfo.lAction = Number(localStorage._testAction)),
                                0 === t.tRecSysInfo.lAction)
                                    e = !0;
                                else if (t.tRecSysInfo.lAction >= 100 && t.tRecSysInfo.lAction < 200) {
                                    if ("" !== t.tRecSysInfo.sActValue) {
                                        var s = JSON.parse(R.unescapeHTML(t.tRecSysInfo.sActValue));
                                        E.a.log("CtrlBitrate._onRecSys", (0,
                                        d.default)(s)),
                                        this._maxBitrate = Number(s.auto_max_coderatebps) / 1e3 || this._maxBitrate,
                                        this._nextReqInterval = 1e3 * Number(s.next_req_interval) || this._nextReqInterval,
                                        this._badQualityCoderatebps = s.bad_quality_coderatebps || [],
                                        this._recSysExpiredTime = F.a.now();
                                        var a = Number(s.force_auto_count)
                                          , r = Number(s.force_auto_effective_time);
                                        a > 0 && r > 0 && this._player.trigger(P.AUTO_FORCE_RSP, {
                                            force_auto_count: a,
                                            force_auto_effective_time: r
                                        })
                                    }
                                    e = !0
                                }
                            } else
                                e = !0;
                            Number(localStorage._testBadQuality) > 0 && (E.a.log("CtrlBitrate._onRecSys _testBadQuality=".concat(localStorage._testBadQuality)),
                            this._badQualityCoderatebps = [1e3 * Number(localStorage._testBadQuality)]),
                            Number(localStorage._testMaxBitrate) > 0 && (E.a.log("CtrlBitrate._onRecSys _testMaxBitrate=".concat(localStorage._testMaxBitrate)),
                            this._maxBitrate = Number(localStorage._testMaxBitrate)),
                            2 === this._switchState && (this._switchState = 0,
                            e ? this._switchDown() : this._switchNextTime = this._nextRecSysTs),
                            this._nextRecSysTs = i + this.nextReqInterval - 1e4
                        }
                    }, {
                        key: "_destroyRecSys",
                        value: function() {
                            this._recSysProxy && this._recSysProxy.destroy(),
                            this._recSysProxy = null
                        }
                    }, {
                        key: "maxBitrate",
                        get: function() {
                            return this._recSysExpired() && (this._maxBitrate = this._originalMaxBitrate),
                            this._maxBitrate
                        }
                    }, {
                        key: "nextReqInterval",
                        get: function() {
                            return this._recSysExpired() && (this._nextReqInterval = Number(M.recSysExpiredTime)),
                            this._nextReqInterval
                        }
                    }, {
                        key: "badQualityCoderatebps",
                        get: function() {
                            return this._recSysExpired() && (this._badQualityCoderatebps = []),
                            this._badQualityCoderatebps
                        }
                    }, {
                        key: "_recSysExpired",
                        value: function() {
                            var t = F.a.now() - this._recSysExpiredTime;
                            return 0 != this._recSysExpiredTime && t > M.recSysExpiredTime
                        }
                    }]),
                    t
                }();
                Gn.SwitchType = Hn;
                var jn = Gn
                  , Yn = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.mse = null,
                        this.dtsGap = 0,
                        this.lastBufferLen = 0,
                        this.pauseCnt = 0,
                        this.callbacks = null
                    }
                    return Object(m.a)(t, [{
                        key: "stop",
                        value: function() {
                            this.mse = null,
                            this.dtsGap = 0,
                            this.callbacks = null,
                            ls.remove(this._onTimer, this)
                        }
                    }, {
                        key: "start",
                        value: function(t, e, i) {
                            E.a.log("SwitchDoneBefore.start bufferLen=".concat(t.getBufferLen(), " dtsGap=").concat(e)),
                            this.mse = t,
                            this.dtsGap = e,
                            this.lastBufferLen = 0,
                            this.pauseCnt = 0,
                            this.callbacks = i,
                            ls.add(this._onTimer, this, 100),
                            this._onTimer(0)
                        }
                    }, {
                        key: "_onTimer",
                        value: function(t) {
                            if (this.mse) {
                                var e = 200;
                                Number(localStorage._localBuffer) > 0 && (e = Number(localStorage._localBuffer));
                                var i = this.mse.getBufferLen();
                                i <= e || this.dtsGap + i <= 0 || this.pauseCnt > 2 ? (E.a.log("SwitchDoneBefore.done bufferLen=".concat(i, " dtsGap=").concat(this.dtsGap, " pauseCnt=").concat(this.pauseCnt)),
                                ls.remove(this._onTimer, this),
                                this.callbacks && this.callbacks.done()) : i === this.lastBufferLen && this.pauseCnt++,
                                this.lastBufferLen = i
                            } else
                                this.stop()
                        }
                    }]),
                    t
                }()
                  , Wn = "heart"
                  , qn = 0
                  , Kn = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this._id = qn++,
                        this.eventEmitter = e,
                        this.stat = i.stat,
                        this.tsdb = i.tsdb,
                        this.statSwitch = i.statSwitch,
                        this.sampleController = i.sampleController,
                        this.h265Proxy = i.h265Proxy,
                        this.autoMonitor = i.autoMonitor,
                        this.recSysStat = i.recSysStat,
                        this.info = null,
                        this.isH265Playing = !1,
                        this.playerType = -1,
                        this.started = !1,
                        this.heart20Ts = 0,
                        this.pauseCnt = 0,
                        this.pauseTime = 0,
                        this.pauseCnt5 = 0,
                        this.pauseTime5 = 0,
                        this.pauseCnt60Sec = 0,
                        this.pauseStartTs = 0,
                        this.pauseCheckLock = !1,
                        this.videoStatus = S,
                        this.isSwitchPause = !1,
                        this._useAV1 = !1,
                        this.isAV1MediaSupported = this.checkAV1MediaSupported(),
                        this.resetAiProps(),
                        this.videoBadList = [],
                        this.fastSample = new wn(20),
                        this.onFastSampleOverBind = this.onFastSampleOver.bind(this),
                        this._switch265FailBind = this._switch265Fail.bind(this),
                        this.ctrlBitrate = new jn({
                            player: this,
                            statSwitch: this.statSwitch,
                            autoMonitor: this.autoMonitor,
                            recSysStat: this.recSysStat
                        },{
                            start: this._switchStart.bind(this),
                            first: this._switchFirstSample.bind(this),
                            done: this._switchDone.bind(this),
                            autoReport: this.autoReport.bind(this)
                        }),
                        this.ctrlBitrate.beforeSwitchCb = this._beforeSwitch.bind(this),
                        this.switchDoneBefore = new Yn
                    }
                    return Object(m.a)(t, [{
                        key: "_beforeSwitch",
                        value: function(t) {
                            this.switchDoneBefore.stop();
                            var e = this.info;
                            e._delayRemove = !1,
                            e.iBitRate = t.iBitRate,
                            e.curBitrate = t.bitrate,
                            e.originalBitrate = 0 === t.iBitRate,
                            e.iCodecType = t.iCodecType,
                            e.iHEVCBitRate = t.iHEVCBitRate;
                            var i = this.h265Proxy.renderInited;
                            this.h265Proxy.initSupport(e);
                            var s = this.h265Proxy.isSupported;
                            !i && s ? (this.ctrlBitrate.switchType = jn.SwitchType.H264ToH265,
                            this.h265Proxy.loadDecoder(e.h5Root, {
                                ready: this._onH265DecoderReady.bind(this),
                                error: this._switch265FailBind,
                                timeout: this._switch265FailBind
                            })) : (i || s ? i && s ? this.ctrlBitrate.switchType = jn.SwitchType.H265ToH265 : i && !s && (this.ctrlBitrate.switchType = jn.SwitchType.H265ToH264,
                            e._delayRemove = !0) : this.ctrlBitrate.switchType = jn.SwitchType.H264ToH264,
                            this.switchLevel(e))
                        }
                    }, {
                        key: "_onH265DecoderReady",
                        value: function() {
                            E.a.log("IPlayer._onH265DecoderReady"),
                            this.info._delayRemove = !0,
                            this.switchLevel(this.info)
                        }
                    }, {
                        key: "_switch265Fail",
                        value: function() {
                            this.ctrlBitrate.switchType = jn.SwitchType.H264ToH264,
                            this.switchLevel(this.info)
                        }
                    }, {
                        key: "setAutoInfo",
                        value: function(t) {
                            this.ctrlBitrate.setAutoInfo(t)
                        }
                    }, {
                        key: "switchLevel",
                        value: function(t) {
                            M.initByBitrate(t.curBitrate),
                            this.isUserPaused() ? this.start(t) : this.started && (this.info = t,
                            this.statSwitch.check(t, !0),
                            this.ctrlBitrate.switchBitrate(t.curBitrate),
                            this._triggerAutoChanged())
                        }
                    }, {
                        key: "_switchStart",
                        value: function(t, e) {
                            var i = this.getBufferLen();
                            this.ctrlBitrate._badStat.setStart(i),
                            this.ctrlBitrate._seg.nextIFrame(),
                            E.a.log("IPlayer(".concat(this._id, ")._switchStart bufferLen=").concat(i, " dts=").concat(t, " pts=").concat(e)),
                            ls.once(this._switchFirstVideoTimeout, this, 1e3),
                            this.isSwitchPause = !1,
                            ls.once(this._checkSwitchPause, this, 5e3)
                        }
                    }, {
                        key: "onConnected",
                        value: function() {
                            E.a.log("IPlayer(".concat(this._id, ").onConnected")),
                            this.ctrlBitrate._badStat.setConnected(),
                            this.ctrlBitrate._seg.connected()
                        }
                    }, {
                        key: "_switchFirstSample",
                        value: function() {
                            E.a.log("IPlayer(".concat(this._id, ")._switchFirstSample")),
                            this.ctrlBitrate._badStat.setFirstFrame(),
                            this.ctrlBitrate._seg.firstVideo(),
                            ls.remove(this._switchFirstVideoTimeout, this),
                            ls.once(this._switchPtsIFrameTimeout, this, 1e3)
                        }
                    }, {
                        key: "_switchFirstVideoTimeout",
                        value: function() {
                            E.a.log("IPlayer(".concat(this._id, ")._switchFirstVideoTimeout")),
                            this.ctrlBitrate._badStat.setFirstVideoTimeout(),
                            this.switchDoneBefore.stop(),
                            this.ctrlBitrate.switchBack(ga)
                        }
                    }, {
                        key: "_switchPtsIFrameTimeout",
                        value: function() {
                            E.a.log("IPlayer(".concat(this._id, ")._switchPtsIFrameTimeout")),
                            this.ctrlBitrate._badStat.setPtsFrameTimeout(),
                            this.switchDoneBefore.stop(),
                            this.ctrlBitrate.switchBack(Sa)
                        }
                    }, {
                        key: "_switchDone",
                        value: function(t, e, i) {
                            this.ctrlBitrate._badStat.setPtsFrame(i),
                            this.ctrlBitrate._seg.ptsIFrame(),
                            ls.remove(this._switchPtsIFrameTimeout, this),
                            this.ctrlBitrate.startEval(e),
                            this.ctrlBitrate.switchType === jn.SwitchType.H264ToH265 || this.ctrlBitrate.switchType === jn.SwitchType.H265ToH264 ? (this.ctrlBitrate.pause(),
                            this.switchDoneBefore.start(this.getMse(), t, {
                                done: this._onSwitchDoneBefore.bind(this)
                            })) : this._switchDoneReal(0)
                        }
                    }, {
                        key: "_onSwitchDoneBefore",
                        value: function() {
                            var t = this.getMse();
                            E.a.log("IPlayer(".concat(this._id, ")._onSwitchDoneBefore mse=").concat(!!t, " switchType=").concat(this.ctrlBitrate.switchType)),
                            t && (t.resetVideo(),
                            t.playing = !1,
                            t.parser.remuxer.reset(),
                            this.ctrlBitrate.switchType === jn.SwitchType.H265ToH264 ? this.h265Proxy.stop() : this.ctrlBitrate.switchType === jn.SwitchType.H264ToH265 && this.h265Proxy.initRender(t)),
                            this._switchDoneReal(3e3)
                        }
                    }, {
                        key: "_switchDoneReal",
                        value: function(t) {
                            E.a.log("IPlayer(".concat(this._id, ")._switchDoneReal")),
                            this.ctrlBitrate.switchDone(t)
                        }
                    }, {
                        key: "_triggerAutoChanged",
                        value: function() {
                            this.eventEmitter.trigger(y.AUTO_BITRATE_CHANGED, {
                                lastBitrate: this.ctrlBitrate.lastBitrate,
                                curBitrate: this.ctrlBitrate.curBitrate
                            })
                        }
                    }, {
                        key: "isUserPaused",
                        value: function() {
                            return !1
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(t, e, i, s, a, r, n) {
                            this.info && this.info.isAuto && 0 === Number(M.autoCfg.close) && (this.ctrlBitrate.start(this.getMse(), {
                                sessionId: this.info._sessionId,
                                startBitrate: this.info._startBitrate,
                                bitrateList: this.info.bitrateList,
                                curBitrate: this.info.curBitrate
                            }),
                            this._triggerAutoChanged());
                            var o = this.getMse();
                            o && o.setParams(this.info.presenterUid, this.info.curBitrate),
                            this.stat.setComDim(et, e + "*" + i),
                            this.h265Proxy.needPreload && this.h265Proxy.loadDecoder(this.info.h5Root, null)
                        }
                    }, {
                        key: "_startContinueBuffer",
                        value: function() {
                            var t = this.getMse();
                            t && t.buffered.start()
                        }
                    }, {
                        key: "onPlayPause",
                        value: function(t, e) {
                            this.pauseStartTs = t,
                            this.pauseCheckLock = !1,
                            this.isSwitchPause = !0,
                            this.autoMonitor.setPause(t, this.getBufferLen()),
                            e && this.updateStatus(T)
                        }
                    }, {
                        key: "onPlayResume",
                        value: function(t, e) {
                            this._checkPaused(t, "resume"),
                            e && this.updateStatus(g)
                        }
                    }, {
                        key: "_checkPaused",
                        value: function(t, e) {
                            if (this.pauseStartTs > 0) {
                                var i = t - this.pauseStartTs;
                                if (i >= 200) {
                                    E.a.warn("IPlayer(".concat(this._id, ")._checkPaused type=").concat(e, " pauseTime=").concat(i));
                                    var s = this.getMse()
                                      , a = 0;
                                    s && (s.buffered._calc(t, xa),
                                    a = s.getContinueBuffer()),
                                    this.autoMonitor.addBadQuality(t, i, e, a),
                                    this.pauseCnt++,
                                    this.pauseTime += i,
                                    this.pauseCnt5++,
                                    this.pauseTime5 += i,
                                    this.ctrlBitrate.addBadQuality(t, i, this.getBufferLen()),
                                    this.pauseCnt60Sec++
                                } else
                                    this.autoMonitor.resetPausedTs();
                                this.pauseStartTs = e === Wn ? t : 0
                            }
                        }
                    }, {
                        key: "updateStatus",
                        value: function(t) {
                            this.videoStatus !== t && (this.videoStatus = t,
                            this.eventEmitter.trigger(y.PLAY_STATUS, {
                                status: t
                            }))
                        }
                    }, {
                        key: "onErrorEvent",
                        value: function(t) {
                            3 === t.type && this.ctrlBitrate._badStat.setNoIFrame()
                        }
                    }, {
                        key: "getMse",
                        value: function() {
                            return null
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return 0
                        }
                    }, {
                        key: "getWaitBufferLen",
                        value: function() {
                            return 0
                        }
                    }, {
                        key: "getWaitFrameTime",
                        value: function(t) {
                            return 0
                        }
                    }, {
                        key: "triggerVideoBadQuality",
                        value: function() {
                            this.eventEmitter.trigger(y.VIDEO_BAD_QUALITY)
                        }
                    }, {
                        key: "trigger",
                        value: function(t, e) {
                            this.eventEmitter.trigger(t, e)
                        }
                    }, {
                        key: "onFastSampleOver",
                        value: function(t) {
                            var e = [this.stat.createAct(gi, {
                                str: [t]
                            })];
                            this.tsdb.sendMetrics(e)
                        }
                    }, {
                        key: "startFastSample",
                        value: function() {
                            this.fastSample.start(this.onFastSampleOverBind)
                        }
                    }, {
                        key: "addBytes",
                        value: function(t) {
                            this.sampleController.addTotalSample(t),
                            this.fastSample.add(t)
                        }
                    }, {
                        key: "init",
                        value: function(t) {}
                    }, {
                        key: "start",
                        value: function(t) {
                            this.stop(),
                            ls.add(this.getVideoBadQuality, this, 2e4),
                            ls.add(this.pauseTimer60Sec, this, 6e4),
                            this.sampleController.start()
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.isH265Playing = !1,
                            this.heart20Ts = 0,
                            this.videoBadList = [],
                            this.pauseCnt60Sec = 0,
                            this.isSwitchPause = !1,
                            this.fastSample.stop(),
                            this.sampleController.stop(),
                            this.ctrlBitrate.stop(),
                            this.switchDoneBefore.stop(),
                            ls.remove(this._switchFirstVideoTimeout, this),
                            ls.remove(this._switchPtsIFrameTimeout, this),
                            ls.remove(this.timeoutRecSysRsp, this),
                            ls.remove(this.getVideoBadQuality, this),
                            ls.remove(this.getVideoLoad, this),
                            ls.remove(this.pauseTimer60Sec, this),
                            ls.remove(this.pauseGetRecSysRspOnce, this)
                        }
                    }, {
                        key: "getVideoBadQuality",
                        value: function() {}
                    }, {
                        key: "pauseGetRecSysRsp",
                        value: function(t) {
                            var e = {
                                info: this.info,
                                type: "flv",
                                metadata: null
                            };
                            1 === t ? (e.type = "p2p",
                            e.metadata = this.player ? this.player.msePlayer.metadata : null,
                            e.reason = D.turnToFlvReason.VIDEO_BUFFER_EMPTY) : 0 === t && (e.type = "flv",
                            e.metadata = this.mse.metadata);
                            var i = 10 * ~~(3e3 * Math.random() / 10);
                            ls.once(this.pauseGetRecSysRspOnce, this, i, e)
                        }
                    }, {
                        key: "pauseGetRecSysRspOnce",
                        value: function(t, e, i) {
                            this.getRecSysRsp(i)
                        }
                    }, {
                        key: "startP2PUrl",
                        value: function(t) {}
                    }, {
                        key: "stopStream",
                        value: function(t) {}
                    }, {
                        key: "checkPcdnMode",
                        value: function(t, e) {
                            if (this.info) {
                                this.info.usePcdn = this._getUsePcdn(t),
                                localStorage.usePcdn && (this.info.usePcdn = 1),
                                this.p2pMgr && this.p2pMgr.stream && (this.p2pMgr.stream.usePcdn = this._checkUsePcdn()),
                                this.stat.setComDim(Pt, this.info.usePcdn);
                                var i = this._getPcdnName(e);
                                "" != i && null != i && this.stat.setComDim(ft, i)
                            }
                        }
                    }, {
                        key: "_checkUsePcdn",
                        value: function() {
                            return this.info.isAuto && Number(M.closePcdn500) === this.info.curBitrate ? 0 : this.info.usePcdn
                        }
                    }, {
                        key: "checkAV1MediaSupported",
                        value: function() {
                            return MediaSource.isTypeSupported('video/mp4; codecs="av01.0.08M.08"')
                        }
                    }, {
                        key: "setUseAV1",
                        value: function(t) {
                            this._useAV1 = t
                        }
                    }, {
                        key: "isUseAV1",
                        value: function(t) {
                            this._useAV1 = M.useAV1;
                            var e = !0;
                            return this.eventEmitter.noLoadAv1Count && (e = this.eventEmitter.noLoadAv1Count < 3),
                            this.isAV1MediaSupported && this._useAV1 && e && R.getAv1Random(t, M.av1PercentConfig) && 1 == Number(M.abUseAv1)
                        }
                    }, {
                        key: "_getUsePcdn",
                        value: function(t) {
                            return 0
                        }
                    }, {
                        key: "_getPcdnName",
                        value: function() {
                            return ""
                        }
                    }, {
                        key: "setEnableLowLatency",
                        value: function(t) {}
                    }, {
                        key: "setPlaybackrateAccess",
                        value: function(t) {}
                    }, {
                        key: "setVolume",
                        value: function(t) {}
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return 0
                        }
                    }, {
                        key: "getFrameData",
                        value: function() {
                            return null
                        }
                    }, {
                        key: "resetAiProps",
                        value: function() {
                            this.aiP2PCnt = 0,
                            this.aiFlvCnt = 0,
                            this.aiP2PTimeoutCnt = 0,
                            this.aiFlvTimeoutCnt = 0,
                            this.aiP2PErrorCnt = 0,
                            this.aiFlvErrorCnt = 0,
                            this.aiP2PSwitchCnt = 0,
                            this.aiFlvSwitchCnt = 0,
                            this.aiP2PNotSwitchCnt = 0,
                            this.aiFlvNotSwitchCnt = 0,
                            this.aiFlvErrorNotSwitchCnt = 0,
                            this.aiFlvErrorSwitchCnt = 0
                        }
                    }, {
                        key: "recordAiP2PFlv",
                        value: function(t) {
                            "p2p" == t ? this.aiP2PCnt++ : "flv" == t && this.aiFlvCnt++
                        }
                    }, {
                        key: "initAiReq",
                        value: function(t, e, i, s, a, r) {
                            var n = new Ls.RecSysReq;
                            n.tId.iAppid = L.appid,
                            n.tId.lUid = L.uid,
                            n.tId.sGuid = L.sGuid,
                            n.tId.sUA = "webh5",
                            n.sAnchorUid = t.presenterUid,
                            n.sRoomId = L.roomId,
                            n.iScene = 6,
                            n.bDebug = 1,
                            n.mAppendInfo.value = {
                                streamType: e,
                                expVideoFps: i && null != i.fps ? i.fps : 0,
                                expAudioFps: i && null != i.audioFps ? i.audioFps : 0,
                                codeRate: t.curBitrate,
                                isOriginal: 0 == t.originalBitrate ? 1 : 0,
                                line: r,
                                codeType: this.isH265 ? "265" : "264",
                                sStreamName: t.sStreamName,
                                playType: s,
                                isServer: 0,
                                iIsP2PSupport: t.iIsP2PSupport
                            };
                            var o = (0,
                            k.default)({}, n);
                            return E.a.log("IPlayer(".concat(this._id, ").getRecSysRsp.req"), n, (0,
                            d.default)(o)),
                            n
                        }
                    }, {
                        key: "getRecSysRsp",
                        value: function(t, e) {
                            t.info;
                            var i = t.type;
                            return t.reason,
                            t.metadata,
                            t.isNotAi,
                            F.a.now(),
                            this.recordAiP2PFlv(i),
                            void this.recSysRspHandler(!1, null, t)
                        }
                    }, {
                        key: "getAiStat",
                        value: function() {
                            var t = {};
                            this.eventEmitter && this.eventEmitter.getAiStartStat && (t = this.eventEmitter.getAiStartStat()),
                            this.aiP2PSwitchCnt += t.aiStartFlvCnt;
                            var e = {
                                aiP2PCnt: this.aiP2PCnt,
                                aiFlvCnt: this.aiFlvCnt,
                                aiP2PTimeoutCnt: this.aiP2PTimeoutCnt,
                                aiFlvTimeoutCnt: this.aiFlvTimeoutCnt,
                                aiP2PErrorCnt: this.aiP2PErrorCnt,
                                aiFlvErrorCnt: this.aiFlvErrorCnt,
                                aiP2PSwitchCnt: this.aiP2PSwitchCnt,
                                aiFlvSwitchCnt: this.aiFlvSwitchCnt,
                                aiP2PNotSwitchCnt: this.aiP2PNotSwitchCnt,
                                aiFlvNotSwitchCnt: this.aiFlvNotSwitchCnt,
                                aiStartP2PCnt: t.aiStartP2PCnt || 0,
                                aiStartFlvCnt: t.aiStartFlvCnt || 0,
                                aiFlvErrorSwitchCnt: this.aiFlvErrorSwitchCnt,
                                aiFlvErrorNotSwitchCnt: this.aiFlvErrorNotSwitchCnt
                            };
                            return this.resetAiProps(),
                            e
                        }
                    }, {
                        key: "timeoutRecSysRsp",
                        value: function() {
                            if (this.isTimeout) {
                                var t = this.aiP2PFlvProps
                                  , e = t.type;
                                if (t.isNotFirstFetch)
                                    return;
                                "p2p" == e ? this.aiP2PTimeoutCnt++ : "flv" == e && (this.aiFlvTimeoutCnt++,
                                t.isFlvError && this.aiFlvErrorSwitchCnt++),
                                this.recSysRspHandler(!1, null, t),
                                this.isResTimeout = !0
                            }
                        }
                    }, {
                        key: "onPause5Sec",
                        value: function() {
                            this.eventEmitter && (E.a.log("IPlayer(".concat(this._id, ").onPause5Sec")),
                            this.eventEmitter.trigger(y.PAUSE_5SEC_ERROR))
                        }
                    }, {
                        key: "pauseTimer60Sec",
                        value: function(t, e) {
                            this.pauseCnt60Sec >= M.autoReportCfg[1] && 1 === Number(M.autoReportCfg[2]) && this.autoReport(0),
                            this.pauseCnt60Sec = 0
                        }
                    }, {
                        key: "_checkSwitchPause",
                        value: function() {
                            this.isSwitchPause && 1 === Number(M.autoReportCfg[2]) && this.autoReport(1),
                            this.isSwitchPause = !1
                        }
                    }, {
                        key: "autoReport",
                        value: function(t) {
                            1 != this.playerType && 0 != this.playerType || !this.info.isAuto || 1 === Number(M.autoReportCfg[0]) && (E.a.log("IPlayer autoReport type=".concat(t)),
                            this.eventEmitter && this.eventEmitter.trigger(y.P2P_REPORT))
                        }
                    }, {
                        key: "hasPicture",
                        get: function() {
                            return !1
                        }
                    }, {
                        key: "isPlaying",
                        get: function() {
                            return !1
                        }
                    }]),
                    t
                }()
                  , zn = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i(t, s) {
                        var a, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                        Object(p.a)(this, i),
                        a = e.call(this, t, s),
                        E.a.log("FlvPlayer(".concat(a._id, ").constructor"));
                        var n = s.isPureAudio
                          , o = s.isPureVideo;
                        return a.startTs = 0,
                        a.startTime = 0,
                        a.lineType = 0,
                        a.loader = new Cn(Object(Xi.a)(a),!0),
                        a.recvTime = 0,
                        a.firstPkgTime = 0,
                        a.connectTime = 0,
                        a.loadFlvStatus = 0,
                        a.isPureAudio = n,
                        a.isPureVideo = o,
                        a.videoElement = r,
                        a.flvLoadTimeSended = !1,
                        a.enableLowLatency = !1,
                        a.anticode = new hn,
                        a.mse = a.createMse(),
                        a.pauseStartTs = 0,
                        a.metadataTick = new Za(t,a.mse),
                        a.pauseReason = 0,
                        a.loadTime = 0,
                        a.connectTime = 0,
                        a.recvDataTime = 0,
                        a.loadStartTs = 0,
                        a.cdnip = "",
                        a.sendPauseTimeout = 0,
                        a.videoStatus = S,
                        void 0 !== Qa && (a.qaStat = new Qa(Object(Xi.a)(a))),
                        a.playedStat = null,
                        a.flowSize = 0,
                        a.flvDataSize = 0,
                        a.backToP2P = new Ja(Object(Xi.a)(a)),
                        a.volumeCount = 0,
                        a.sendMetricTimer = 0,
                        a.sendMetricTimes = 0,
                        a.businessStartCost = 0,
                        a.startTimeStamp = 0,
                        a.noNeedSendVideoLoadTime = !1,
                        a.exceptionStat = new ln(Object(Xi.a)(a)),
                        a.startUrlBind = a.startUrl.bind(Object(Xi.a)(a)),
                        a.playerType = 0,
                        a
                    }
                    return Object(m.a)(i, [{
                        key: "createMse",
                        value: function() {
                            var t = new za(this,{
                                videoType: "flv",
                                isPureAudio: this.isPureAudio,
                                isPureVideo: this.isPureVideo,
                                h265Proxy: this.h265Proxy,
                                videoElement: this.videoElement
                            });
                            return t.setPushGop(M.pushGop),
                            t
                        }
                    }, {
                        key: "getFrameData",
                        value: function() {
                            return {
                                pts: this.mse.getCurrentRealTime()
                            }
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.started && (E.a.log("FlvPlayer(".concat(this._id, ").reset")),
                            ls.remove(this.onCheckTimer, this),
                            ls.remove(this.onCheckFastTimer, this),
                            this.exceptionStat.reset(),
                            this.loader.close(),
                            this.mse && (this.mse.destroy(),
                            this.mse = null),
                            this.mse = this.createMse(),
                            this.pauseStartTs = 0,
                            this.qaStat.isFirstReport = !0,
                            this.metadataTick.reset(),
                            this.metadataTick.mse = this.mse,
                            this.startTs = 0,
                            this.recvTime = 0,
                            this.startTime = 0,
                            this.enableLowLatency = !1,
                            this.pauseCheckLock = !1,
                            this.loadTime = 0,
                            this.connectTime = 0,
                            this.recvDataTime = 0,
                            this.flowSize = 0,
                            this.flvDataSize = 0,
                            this.recvDataEnough = !1,
                            this.recvFlvData = !1,
                            this.cdnip = "",
                            this.appStartPlayTime = 0,
                            this.backToP2P.reset(),
                            this.stat.reset(),
                            this.stopMetricTimer(),
                            this.audiouitil && (this.audiouitil.reset(),
                            this.audiouitil = null),
                            this.videoStatus = S)
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.loader.connected
                        }
                    }, {
                        key: "isPlaying",
                        get: function() {
                            return this.videoStatus !== S
                        }
                    }, {
                        key: "hasPicture",
                        get: function() {
                            var t = this.isPlaying && 0 !== this.mse.getCurrentTime();
                            return this.h265Proxy.rendering && (t = t && this.isH265Playing),
                            t
                        }
                    }, {
                        key: "getCostTimes",
                        value: function() {
                            return [this.connectTime > 0 ? this.connectTime - this.startTs : 0, this.recvDataTime > 0 ? this.recvDataTime - this.connectTime : 0, this.mse.pushVideoStartRenderTime > 0 ? this.mse.pushVideoStartRenderTime - this.startTs : 0]
                        }
                    }, {
                        key: "getRecvInfo",
                        value: function() {
                            return [this.connectTime > 0 ? this.connectTime - this.startTs : 0, this.recvDataTime > 0 ? this.recvDataTime - this.connectTime : 0, this.mse.pushVideoStartRenderTime > 0 ? this.mse.pushVideoStartRenderTime - this.startTs : 0, this.mse.getVideoFrames(), this.mse.getAudioFrames(), this.flowSize]
                        }
                    }, {
                        key: "checkPcdnMode",
                        value: function(t) {
                            Qi(Object(Ji.a)(i.prototype), "checkPcdnMode", this).call(this, t),
                            this.loader.checkPcdnMode()
                        }
                    }, {
                        key: "_getUsePcdn",
                        value: function(t) {
                            return 1 === Number(t[Ls.EM_PCDN_MODE.E_PcdnMode_FlvOutsideSdkFullstream]) ? 1 : 0
                        }
                    }, {
                        key: "_getPcdnName",
                        value: function(t) {
                            var e = "";
                            return t && (e = t[Ls.EM_PCDN_MODE.E_PcdnMode_FlvOutsideSdkFullstream]),
                            e
                        }
                    }, {
                        key: "start",
                        value: function(t) {
                            this.firstPkgTime = 0,
                            Qi(Object(Ji.a)(i.prototype), "start", this).call(this),
                            this.reset(),
                            this.checkParams(t, this.startUrlBind)
                        }
                    }, {
                        key: "checkParams",
                        value: function(t, e) {
                            E.a.log("FlvPlayer(".concat(this._id, ").checkParams"), (0,
                            d.default)(t)),
                            this.started = !0,
                            this.info = t,
                            t.sFlvUrl && t.sStreamName ? (t.sFlvUrl = t.sFlvUrl.replace("http://", "https://"),
                            this.initDomain(t),
                            t.sFlvAntiCode ? (this.anticode.init(t.sFlvUrl, t.sStreamName, t.sFlvAntiCode),
                            this.anticode.valid().then((function() {
                                e(t)
                            }
                            ))) : e(t)) : t.url ? e(t) : E.a.error("FlvPlayer(".concat(this._id, ").start has no params(sFlvUrl,sStreamName,url)"))
                        }
                    }, {
                        key: "startUrl",
                        value: function(t) {
                            if (this.started) {
                                this.initInfo(t),
                                this.appStartPlayTime = t.appStartPlayTime ? t.appStartPlayTime : 0;
                                var e = F.a.now();
                                if (this.businessStartCost = 0,
                                this.UIStartCost = 0,
                                this.loadStartTs = 0,
                                this.startTimeStamp = Number(t.startTimeStamp) || 0,
                                t.noNeedSendVideoLoadTime ? this.noNeedSendVideoLoadTime = !0 : (this.businessStartCost = Math.floor(t.startTimeStamp > 1 ? (new Date).getTime() - t.startTimeStamp : 0),
                                this.noNeedSendVideoLoadTime = !1),
                                t.uistartTs && t.uistartTs > 0 && (this.UIStartCost = Math.floor((new Date).getTime() - t.uistartTs)),
                                this.startTs = e,
                                E.a.log("FlvPlayer(".concat(this._id, ").startNow"), Date.now(), e),
                                this.startTime = e,
                                this.backToP2P.initJumpTs(e),
                                this.loadFlvStatus = 0,
                                this.mse.setPushGop(M.pushGop),
                                Xa.isNeedAud() ? this.mse.setDeleteH264Aud(-1 === M.deleteH264Aud.indexOf(t.presenterUid) ? 0 : 1) : this.mse.setDeleteH264Aud(0),
                                t.latencyLevel) {
                                    var i = M.latency[t.latencyLevel];
                                    i || (i = [3e3, 2e3, 4e3, 2e3]),
                                    this.mse.latencySeek = i[3],
                                    this.mse.setJitter(i[0], i[1], i[2])
                                } else
                                    this.enableLowLatency ? M.setLowLatency(this.mse) : M.setJitterCfg(this.mse, t.presenterUid, t.curBitrate);
                                var s = this.h265Proxy.isReady
                                  , a = this.isUseAV1(t);
                                this.stat.setComDim(X, 0 === t.originalBitrate ? 1 : 0),
                                this.stat.setComDim(Y, x),
                                this.stat.setComDim(nt, 1),
                                this.stat.setComDim(mt, s ? 1 : 0),
                                this.stat.setComDim(yt, a ? 2 : s ? 1 : 0),
                                a ? (t.url += "&codec=av1",
                                -1 == t.url.indexOf("ratio") && (t.url += "&ratio=0")) : s && (this.h265Proxy.checkUrl(t),
                                this.eventEmitter.tsdbUtil.sendMetrics([this.stat.createAct(ji, {
                                    value: [0],
                                    str: [0]
                                })])),
                                this.statSwitch.check(t, !1),
                                delete t.pullStreamFrom,
                                this.startFastSample(),
                                this._startContinueBuffer(),
                                this.loader.connect(t.url, null == this.videoElement),
                                this.stat.setComDim(q, this.loader.url),
                                cn(this.stat, this.info.url, this.info.sStreamName),
                                ls.add(this.onCheckTimer, this, 1e3),
                                ls.add(this.onCheckFastTimer, this, 100),
                                null != this.videoElement && this.startMetricTimer(2e4)
                            }
                        }
                    }, {
                        key: "_switchStart",
                        value: function(t, e) {
                            Qi(Object(Ji.a)(i.prototype), "_switchStart", this).call(this, t, e),
                            this.initInfo(this.info),
                            -1 !== this.info.url.indexOf("?") ? this.info.url += "&startPts=".concat(e) : this.info.url += "?startPts=".concat(e),
                            this.h265Proxy.checkUrl(this.info),
                            this.mse.parser.reset(),
                            this.loader.close(),
                            1 == localStorage._testBack ? localStorage._testBack = 0 : (this.startTs = F.a.now(),
                            this.loader.connect(this.info.url)),
                            this.updateFlvConfig()
                        }
                    }, {
                        key: "initInfo",
                        value: function(t, e) {
                            this.info = t,
                            t.sFlvUrl && t.sStreamName && (t.url = "".concat(t.sFlvUrl, "/").concat(t.sStreamName, ".flv"));
                            var i = [];
                            this.anticode.hasAnticode() && i.push(this.anticode.getAnticode(e)),
                            -1 !== M.useChangeRate.indexOf(Number(t.presenterUid)) ? i.push("ratio=".concat(t.curBitrate)) : t.iBitRate > 0 ? i.push("ratio=".concat(t.iBitRate)) : localStorage._ratio && i.push("&ratio=".concat(localStorage._ratio)),
                            -1 === t.url.indexOf("va.huya.com") && -1 === t.url.indexOf("cdnweb.huya.com") && -1 === t.url.indexOf("va-cmcc.huya.com") || i.push("&https=1"),
                            i.length > 0 && (t.url += (-1 !== t.url.indexOf("?") ? "&" : "?") + "".concat(i.join("&"))),
                            this.url = t.url,
                            this.lineType = t.lineType
                        }
                    }, {
                        key: "recSysRspHandler",
                        value: function(t, e, i) {
                            i && i.isBackToP2P ? this.backToP2P.recSysRspHandler(t, e, i) : !t || e && e.tRecSysInfo && 1 == e.tRecSysInfo.lAction ? (E.a.warn("FlvPlayer(".concat(this._id, ").recSysRspHandler FLV_TRY_TO_P2P")),
                            this.eventEmitter.trigger(y.FLV_TRY_TO_P2P)) : (E.a.warn("FlvPlayer(".concat(this._id, ").recSysRspHandler jumpToP2PCd=").concat(this.jumpToP2PCd / 6e4, "min fail")),
                            this.eventEmitter.trigger(y.H5_PLAYER_ERROR))
                        }
                    }, {
                        key: "setVideoPlayTimeSended",
                        value: function() {
                            this.flvLoadTimeSended = !0
                        }
                    }, {
                        key: "getPlayVideo",
                        value: function() {
                            return this.mse.getPlayVideo()
                        }
                    }, {
                        key: "setJitter",
                        value: function(t, e, i) {
                            this.mse && this.mse.setJitter(t, e, i)
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.started && (E.a.log("FlvPlayer(".concat(this._id, ").stopFlv")),
                            this._reportFlvFlow(),
                            this.reset(),
                            this.started = !1),
                            this.audiouitil && (this.audiouitil.reset(),
                            this.audiouitil = null),
                            this.recvDataEnough = !1,
                            this.recvFlvData = !1,
                            Qi(Object(Ji.a)(i.prototype), "stop", this).call(this)
                        }
                    }, {
                        key: "recvDataFull",
                        value: function() {
                            this.recvDataTime = F.a.now(),
                            this.eventEmitter.trigger(y.RECV_VIDEO_FRAME),
                            E.a.log("FlvPlayer(".concat(this._id, ").recvDataFull"))
                        }
                    }, {
                        key: "initDomain",
                        value: function(t) {
                            if (!t.inited) {
                                t.inited = !0;
                                var e = t.domainList;
                                if (e && e.length) {
                                    var i = t.sFlvUrl.match(/\/\/(.+?)\//i);
                                    t._domain = i ? i[1] : "",
                                    E.a.log("FlvPlayer(".concat(this._id, ").initDomain:\n\t") + e.join("\n\t"));
                                    var s = e.shift();
                                    this.cdnip = s,
                                    this.stat.setComDim(it, s),
                                    t.sFlvUrl = t.sFlvUrl.replace(/\/\/(.+?)\//, "//" + s + "/" + t._domain + "/")
                                }
                            }
                        }
                    }, {
                        key: "retryVideo",
                        value: function() {
                            this.eventEmitter.trigger(y.REPLAY_VIDEO)
                        }
                    }, {
                        key: "setEnableLowLatency",
                        value: function(t) {
                            this.enableLowLatency = t,
                            t && M.setLowLatency(this.mse)
                        }
                    }, {
                        key: "updateFlvConfig",
                        value: function() {
                            this.enableLowLatency ? M.setLowLatency(this.mse) : M.setJitterCfg(this.mse, this.info.presenterUid, this.info.curBitrate),
                            this.mse && (this.mse.setNeedEmptyAudioFrame(M.flvEmptyAudioFrame > 0),
                            E.a.log("FlvPlayer(".concat(this._id, ").updateFlvConfig flvEmptyAudioFrame=") + this.getConfig("flvEmptyAudioFrame")))
                        }
                    }, {
                        key: "requestUrl",
                        value: function() {
                            var t = this.info
                              , e = t.domainList;
                            if (e && t._domain) {
                                var i = new RegExp("//(.*?)" + t._domain + "/")
                                  , s = e.shift();
                                return s ? (this.cdnip = s,
                                this.stat.setExtDim(Jt, s),
                                E.a.warn("FlvPlayer(".concat(this._id, ").requestUrl change domain to ").concat(s)),
                                t.sFlvUrl = t.sFlvUrl.replace(i, "//" + s + "/" + t._domain + "/")) : (this.cdnip = "",
                                this.stat.delDim(Jt),
                                E.a.warn("FlvPlayer(".concat(this._id, ").requestUrl change domain to ").concat(t._domain)),
                                t.sFlvUrl = t.sFlvUrl.replace(i, "//" + t._domain + "/"),
                                delete t.domainList),
                                this._reportFlvFlow(),
                                void this.startUrl(t)
                            }
                            this.eventEmitter.trigger(y.FLV_URL_UNAVAILABLE)
                        }
                    }, {
                        key: "setConfig",
                        value: function(t, e) {
                            M.setConfig(t, e)
                        }
                    }, {
                        key: "getConfig",
                        value: function(t) {
                            return M[t]
                        }
                    }, {
                        key: "setVolume",
                        value: function(t) {
                            this.mse.setVolume(t)
                        }
                    }, {
                        key: "setMuted",
                        value: function(t) {
                            this.mse.setMuted(t)
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.mse.getMuted()
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return this.mse && this.mse.getBufferLen ? this.mse.getBufferLen() : 0
                        }
                    }, {
                        key: "getFrameBufferLen",
                        value: function() {
                            return this.mse && this.mse.getFrameBufferLen ? this.mse.getFrameBufferLen() : 0
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.mse.getCurrentRealTime()
                        }
                    }, {
                        key: "getCurrentDts",
                        value: function() {
                            return this.mse.getCurrentDts()
                        }
                    }, {
                        key: "getCurrentSeiOffsetDts",
                        value: function() {
                            return this.mse.getCurrentSeiOffsetDts()
                        }
                    }, {
                        key: "getDurationTime",
                        value: function() {
                            var t = (this.mse.video || {}).video
                              , e = 0;
                            return t && (e = Math.floor(t.duration || 0)),
                            e
                        }
                    }, {
                        key: "getVolumeEnergy",
                        value: function() {
                            var t = this.volumeCount > 5 ? 1 : 0;
                            return this.volumeCount = 0,
                            t
                        }
                    }, {
                        key: "getAnticodeHandler",
                        value: function() {
                            return this.anticode
                        }
                    }, {
                        key: "play",
                        value: function() {
                            this.mse.play()
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            this.loader.close(),
                            this.mse && this.mse.pause(),
                            ls.remove(this.onCheckTimer, this),
                            ls.remove(this.onCheckFastTimer, this),
                            this.stopMetricTimer()
                        }
                    }, {
                        key: "setPlaybackrateAccess",
                        value: function(t) {
                            this.mse && this.mse.setPlaybackrateAccess(t)
                        }
                    }, {
                        key: "setAutoJitter",
                        value: function(t) {
                            this.mse.autoJitter = t
                        }
                    }, {
                        key: "setLoadFlvStatus",
                        value: function(t) {
                            t > this.loadFlvStatus && (this.loadFlvStatus = t)
                        }
                    }, {
                        key: "sendLoadVideoErrorStatus",
                        value: function() {
                            this.eventEmitter.tsdbUtil.sendMetrics([this.stat.createAct(Wi.METRIC.VIDEO_VIDEO_LOAD_ERROR, {
                                value: [this.loadFlvStatus]
                            })])
                        }
                    }, {
                        key: "turnToH264",
                        value: function() {
                            this.stop(),
                            this.eventEmitter.trigger(y.TURN_TO_H264)
                        }
                    }, {
                        key: "h265Retry",
                        value: function() {
                            this.stop(),
                            this.eventEmitter.trigger(y.H265_VIDEO_RETRY)
                        }
                    }, {
                        key: "onHeader",
                        value: function(t) {
                            t.hasOwnProperty("cdncip") && this.stat.setComDim(ut, t.cdncip),
                            t.hasOwnProperty("cdnsip") && this.stat.setComDim(ht, t.cdnsip),
                            t.hasOwnProperty("alt-svc") && this.stat.setComDim(lt, t["alt-svc"]),
                            t.hasOwnProperty("x-hy-quic") && this.stat.setComDim(ct, t["x-hy-quic"])
                        }
                    }, {
                        key: "onConnected",
                        value: function() {
                            Qi(Object(Ji.a)(i.prototype), "onConnected", this).call(this),
                            this.connectTime = F.a.now(),
                            E.a.log("%c[TIME] FlvPlayer(".concat(this._id, ").onConnected connectTime=") + (this.connectTime - this.startTs), "color:#A23400;background:#FFF5C2"),
                            this.setLoadFlvStatus(D.LoadVideoTimeoutReason.FLV_CONNECTED),
                            this.exceptionStat.setStat(Vt.CONNECT_SUC, 1)
                        }
                    }, {
                        key: "onClosed",
                        value: function() {
                            this.eventEmitter.trigger(y.VIDEO_LINK_CLOSE, {
                                video: this.mse.getPlayVideo()
                            })
                        }
                    }, {
                        key: "onError",
                        value: function() {
                            this.eventEmitter.trigger(y.ANCHOR_STOP, {
                                video: this.mse.getPlayVideo()
                            })
                        }
                    }, {
                        key: "onData",
                        value: function(t, e) {
                            0 == this.firstPkgTime && (this.firstPkgTime = F.a.now()),
                            this.exceptionStat.setStat(Vt.HAS_DATA, 1);
                            var i = new Uint8Array(t);
                            this.flowSize += i.byteLength,
                            this.addBytes(i.byteLength),
                            this.recvDataEnough || (this.flvDataSize += i.byteLength,
                            this.flvDataSize > 1e6 && (this.setLoadFlvStatus(D.LoadVideoTimeoutReason.FLV_DATA_INVALID),
                            this.recvDataEnough = !0)),
                            1 === e ? this.stat.addCore(Zt, i.byteLength) : this.stat.addCore(Ie, i.byteLength),
                            this.mse.appendFlv(i);
                            var s = F.a.now();
                            0 == this.recvTime && (E.a.log("%c[TIME] FlvPlayer(".concat(this._id, ").onData firstPkgTime=") + (s - this.connectTime), "color:#A23400;background:#FFF5C2"),
                            this.setLoadFlvStatus(D.LoadVideoTimeoutReason.FLV_RECV_DATA)),
                            this.recvTime = s
                        }
                    }, {
                        key: "getMse",
                        value: function() {
                            return this.mse
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(t, e, s, a, r, n, o) {
                            Qi(Object(Ji.a)(i.prototype), "onPlayVideo", this).call(this, t, e, s, a, r, n, o),
                            this.stat.setComDim(et, e + "*" + s);
                            var u = F.a.now();
                            E.a.log("FlvPlayer(".concat(this._id, ").onStartVideo loadeddata=").concat(u)),
                            this.loadTime = u - this.startTs,
                            this.newLoadTime = u - this.eventEmitter.startTs,
                            this.waitRemuxTime = 0,
                            this.mse && this.mse.parser && 0 != this.mse.parser.waitRemuxTime && (this.waitRemuxTime = this.mse.parser.waitRemuxTime);
                            var h = this.connectTime - this.startTs
                              , l = this.recvDataTime - this.startTs
                              , c = this.mse.pushVideoStartRenderTime - this.startTs
                              , d = this.UIStartCost > 0 ? this.loadTime + this.UIStartCost : 0
                              , f = 0;
                            this.startTimeStamp > 1 ? f = this.loadTime + this.businessStartCost : 1 === this.startTimeStamp && (f = this.loadTime);
                            var p = this.firstPkgTime - this.startTs
                              , m = 0;
                            0 != this.mse.parser.decodeIFRTime && (m = this.mse.parser.decodeIFRTime - this.startTs),
                            E.a.log("%cFlvPlayer(".concat(this._id, ").onPlayVideo loadTime=") + this.loadTime + "  businessStartCost=" + this.businessStartCost + "  UIStartCost=" + this.UIStartCost, "color:#A23400;background:#FFF5C2"),
                            E.a.log("%cFlvPlayer(".concat(this._id, ").onPlayVideo newLoadTime=") + this.newLoadTime, "color:#A23400;background:#FFF5C2"),
                            this.tsdb.sendFlvTime(this.newLoadTime, h, l, c, null != this.videoElement, f, d, this.waitRemuxTime, p, m);
                            var v = {
                                video: t,
                                width: e,
                                height: s,
                                loadTime: this.loadTime,
                                connectTime: h,
                                recvDataTime: l,
                                pushVideoTime: c,
                                canvas: r,
                                videoCodec: o,
                                delayRemove: this.info._delayRemove
                            };
                            this.info._delayRemove = !1,
                            this.eventEmitter.trigger(y.VIDEO_PLAY, v),
                            this.updateStatus(g),
                            this.setLoadFlvStatus(D.LoadVideoTimeoutReason.FLV_STARTPLAY),
                            this.eventEmitter.onPlayVideo && this.eventEmitter.onPlayVideo(t)
                        }
                    }, {
                        key: "onAudioFrequency",
                        value: function(t) {
                            t.value && this.volumeCount++
                        }
                    }, {
                        key: "onVideoStop",
                        value: function(t, e) {
                            E.a.log("FlvPlayer(".concat(this._id, ").onVideoStop hasVideo=") + e),
                            e && this.updateStatus(S),
                            this.eventEmitter.trigger(y.VIDEO_STOP, {
                                video: t,
                                hasVideo: e
                            })
                        }
                    }, {
                        key: "onSendSeiData",
                        value: function(t, e, i) {
                            this.eventEmitter.trigger(y.H264_SEI_PLAY, {
                                data: t,
                                ts: e,
                                now: (new Date).getTime(),
                                vt: i
                            })
                        }
                    }, {
                        key: "onSendScriptVolumeInfo",
                        value: function(t, e) {
                            Number(localStorage._printAudioIntensity) && E.a.log("FlvPlayer(".concat(this._id, ").onSendScriptVolumeInfo uid:") + t + "  intensity:" + e),
                            this.eventEmitter.trigger(y.UPDATE_INTERSITY, {
                                uid: t,
                                intensity: e
                            })
                        }
                    }, {
                        key: "onLoadError",
                        value: function(t) {
                            this.eventEmitter.trigger(y.FLV_URL_UNAVAILABLE, {
                                msg: t
                            }),
                            this.setLoadFlvStatus(D.LoadVideoTimeoutReason.FLV_CONNECT_ERROR)
                        }
                    }, {
                        key: "onVideoParseInvalid",
                        value: function() {
                            this.setLoadFlvStatus(D.LoadVideoTimeoutReason.FLV_DATA_INVALID)
                        }
                    }, {
                        key: "onLoadTimeout",
                        value: function() {
                            this.eventEmitter.trigger(y.FLV_URL_LOAD_TIMEOUT)
                        }
                    }, {
                        key: "onPlayerError",
                        value: function(t) {}
                    }, {
                        key: "onErrorEvent",
                        value: function(t) {
                            Qi(Object(Ji.a)(i.prototype), "onErrorEvent", this).call(this, t),
                            this.eventEmitter && this.eventEmitter.lastP2PInfo ? this.getRecSysRsp({
                                info: this.info,
                                type: "flv",
                                metadata: this.mse.metadata,
                                isFlvError: !0
                            }) : this.eventEmitter.trigger(y.H5_PLAYER_ERROR, {
                                code: t.type,
                                msg: "播放错误"
                            })
                        }
                    }, {
                        key: "onPlayPause",
                        value: function(t, e) {
                            this.startSendPauseTimer(),
                            Qi(Object(Ji.a)(i.prototype), "onPlayPause", this).call(this, t, e)
                        }
                    }, {
                        key: "onPlayResume",
                        value: function(t, e) {
                            this.stopSendPauseTimer(),
                            Qi(Object(Ji.a)(i.prototype), "onPlayResume", this).call(this, t, e)
                        }
                    }, {
                        key: "sendPauseEvent",
                        value: function() {
                            this.eventEmitter.trigger(y.PLAY_CARTON)
                        }
                    }, {
                        key: "startMetricTimer",
                        value: function(t) {
                            clearTimeout(this.sendMetricTimer),
                            this.sendMetricTimer = setTimeout(this.heartBeat20sMetric.bind(this), t)
                        }
                    }, {
                        key: "stopMetricTimer",
                        value: function() {
                            this.sendMetricTimes = 0,
                            clearTimeout(this.sendMetricTimer)
                        }
                    }, {
                        key: "setAudioUtil",
                        value: function(t) {
                            this.audiouitil = t,
                            this.audiouitil.removeAllListeners([ir.AUDIO_FREQUENCY]),
                            this.audiouitil.createAudioContext(this.mse.video),
                            this.audiouitil.on(ir.AUDIO_FREQUENCY, this.onAudioFrequency.bind(this))
                        }
                    }, {
                        key: "startSendPauseTimer",
                        value: function() {
                            this.stopSendPauseTimer(),
                            this.sendPauseTimeout = setTimeout(this.sendPauseEvent.bind(this), 200)
                        }
                    }, {
                        key: "stopSendPauseTimer",
                        value: function() {
                            clearTimeout(this.sendPauseTimeout)
                        }
                    }, {
                        key: "heartBeat20sMetric",
                        value: function() {
                            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2e4
                              , e = F.a.now();
                            if (E.a.log("FlvPlayer(".concat(this._id, ").heartBeat20sMetric ")),
                            this.sendMetricTimes++,
                            this._checkPaused(e, Wn),
                            this.qaStat) {
                                0 == this.pauseTime && (this.pauseReason = 0);
                                var i = this.pauseStartTs > 0;
                                this.qaStat.record(this.pauseCnt, this.pauseTime, i, this.flowSize, this.pauseReason, this.getVolumeEnergy())
                            }
                            this.pauseStartTs > 0 && this.autoMonitor.setPause(this.pauseStartTs, this.getBufferLen()),
                            this.pauseCnt = 0,
                            this.pauseTime = 0,
                            this.pauseReason = 0,
                            this.flowSize = 0,
                            this.sendMetricTimes % 15 == 0 && (this.tsdb.sendMetrics([{
                                sMetricName: Wi.METRIC.VIDEO_VIDEO_BAD_QUALITY_5M_RATIO,
                                vField: {
                                    value: this.pauseCnt5 > 0 ? 100 : 0
                                }
                            }]),
                            this.pauseCnt5 = 0,
                            this.pauseTime5 = 0),
                            t > 0 && this.startMetricTimer(t)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            if (this.started) {
                                if (this.connected && this.recvTime > 0 && t - this.recvTime > 8e3) {
                                    var i = this.getBufferLen();
                                    return E.a.warn("FlvPlayer(".concat(this._id, ").onCheckTimer no data received ") + (t - this.recvTime) + " buffLen=" + i),
                                    void this.eventEmitter.trigger(y.NO_DATA_RECEIVED)
                                }
                                if (this.anticode.onCheckTimer(t, e),
                                this.loader.onCheckTimer(t, e),
                                this.mse && this.mse.onCheckTimer(t, e),
                                this.metadataTick.onCheckTimer(t, e),
                                this.connected) {
                                    null == this.videoElement && (0 === this.heart20Ts ? this.heart20Ts = t : t - this.heart20Ts >= 2e4 && (this.heartBeat20sMetric(0),
                                    this.heart20Ts = t));
                                    try {
                                        this.eventEmitter.trigger(y.PLAY_DOWNLINK_INFO, {
                                            buffer: this.getBufferLen() / 1e3,
                                            downLinkSpeed: 0 | this.loader.speed,
                                            videoBufferEnd: this.mse.video.video.buffered.end(this.mse.video.video.buffered.length - 1)
                                        })
                                    } catch (t) {
                                        E.a.log("FlvPlayer(".concat(this._id, ").onCheckTimer cannot get down link info"))
                                    }
                                    this.backToP2P.onCheckTimer(t, e),
                                    this.eventEmitter.trigger(y.PLAY_FRAME_BUFFER, {
                                        frameStorage: this.mse.getFrameReadyed(),
                                        jitterBuffer: this.mse.getBufferLen(),
                                        playdelay: this.mse.getFramePlayDelays()
                                    })
                                }
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            this.started && (this.mse.onCheckFastTimer(t, e),
                            this.backToP2P.onCheckFastTimer(t, e),
                            this.loader.onCheckFastTimer(t, e),
                            !this.pauseCheckLock && this.pauseStartTs > 0 && t - this.pauseStartTs > 200 && (this.pauseCheckLock = !0,
                            this.pauseCheck(t)))
                        }
                    }, {
                        key: "_reportFlvFlow",
                        value: function() {
                            this.qaStat && (this._checkPaused(F.a.now(), "stop"),
                            this.qaStat.sendFlow(this.pauseCnt, this.pauseTime, this.pauseStartTs, this.flowSize, this.pauseReason, this.getVolumeEnergy(), !0),
                            this.pauseCnt = 0,
                            this.pauseTime = 0,
                            this.pauseReason = 0,
                            this.flowSize = 0)
                        }
                    }, {
                        key: "pauseCheck",
                        value: function(t) {
                            if (this.started) {
                                var e = 0
                                  , i = this.info.curBitrate / 8 - 10
                                  , s = this.loader.speed / 1024 | 0;
                                e = s > 0 && s < i ? D.pauseReason.FLV_NET_SLOW : D.pauseReason.FLV_NO_BUFF,
                                this.recvTime > 0 && t - this.recvTime > 2e3 && (e = D.pauseReason.FLV_NO_DATA);
                                var a = this.getBufferLen();
                                a > 1e3 && (e = D.pauseReason.FLV_UNKNOW_PAUSE),
                                e > this.pauseReason && (this.pauseReason = e),
                                E.a.warn("FlvPlayer(".concat(this._id, ").pauseCheck curReason=").concat(e, " reportReason=").concat(this.pauseReason, " buffLen=").concat(a))
                            }
                        }
                    }]),
                    i
                }(Kn)
                  , Xn = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        e && e.xhrSetup && (this.xhrSetup = e.xhrSetup)
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.abort(),
                            this.loader = null
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this.loader && (this.stats.aborted = !0,
                            this.loader.abort()),
                            this.timeoutHandle && window.clearTimeout(this.timeoutHandle)
                        }
                    }, {
                        key: "load",
                        value: function(t, e, i, s, a, r, n, o) {
                            var u = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null;
                            this.url = t,
                            this.responseType = e,
                            this.onSuccess = i,
                            this.onError = s,
                            this.onTimeout = a,
                            this.onProgress = u,
                            this.stats = {
                                trequest: performance.now(),
                                retry: 0
                            },
                            this.timeout = r,
                            this.maxRetry = n,
                            this.retryDelay = o,
                            this.timeoutHandle = window.setTimeout(this.loadtimeout.bind(this), r),
                            this.loadInternal()
                        }
                    }, {
                        key: "loadBuffer",
                        value: function(t, e, i, s, a, r, n, o, u) {
                            this.onOpen = e,
                            this.load(t, "arraybuffer", (function(t) {
                                var e = t.target;
                                return s(e.response)
                            }
                            ), a, r, n, o, u)
                        }
                    }, {
                        key: "loadInternal",
                        value: function() {
                            var t = this.loader = new XMLHttpRequest;
                            t.onload = this.loadsuccess.bind(this),
                            t.onerror = this.loaderror.bind(this),
                            t.onprogress = this.loadprogress.bind(this),
                            t.onloadend = this.loadend.bind(this),
                            t.onloadstart = this.loadstart.bind(this),
                            t.responseType = this.responseType,
                            t.open("GET", this.url, !0),
                            null != this.fromByte && null != this.toByte && t.setRequestHeader("Range", "bytes=" + this.fromByte + "-" + this.toByte),
                            this.stats.tstart = null,
                            this.stats.loaded = 0,
                            this.xhrSetup && this.xhrSetup(t),
                            this.stats.tstart = performance.now(),
                            t.send()
                        }
                    }, {
                        key: "loadsuccess",
                        value: function(t) {
                            window.clearTimeout(this.timeoutHandle),
                            this.stats.tload = performance.now(),
                            t.requestURL = this.url,
                            this.onSuccess(t, this.stats)
                        }
                    }, {
                        key: "loaderror",
                        value: function(t) {
                            404 !== t.currentTarget.status && 0 !== t.currentTarget.status ? this.stats.retry < this.maxRetry ? (E.a.warn("XhrLoader.loaderror url=" + this.url + " retryDelay=" + this.retryDelay),
                            this.destroy(),
                            window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                            this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                            this.stats.retry++) : (window.clearTimeout(this.timeoutHandle),
                            E.a.warn("XhrLoader.loaderror reach max retry url=" + this.url),
                            this.onError(t)) : this.onError(t)
                        }
                    }, {
                        key: "loadtimeout",
                        value: function() {
                            this.stats.retry < this.maxRetry ? (E.a.warn("XhrLoader.loadtimeout url=" + this.url + " retryDelay=" + this.retryDelay),
                            this.destroy(),
                            window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                            this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                            this.stats.retry++) : (window.clearTimeout(this.timeoutHandle),
                            E.a.warn("XhrLoader.loadtimeout max retry url=" + this.url),
                            this.onTimeout())
                        }
                    }, {
                        key: "loadstart",
                        value: function() {
                            this.onOpen && this.onOpen()
                        }
                    }, {
                        key: "loadprogress",
                        value: function(t) {
                            var e = this.stats;
                            null === e.tfirst && (e.tfirst = performance.now()),
                            e.loaded = t.loaded,
                            this.onProgress && this.onProgress(t, e)
                        }
                    }, {
                        key: "loadend",
                        value: function(t) {
                            404 === t.currentTarget.status && this.loaderror(t)
                        }
                    }]),
                    t
                }()
                  , Jn = i(25)
                  , Qn = i.n(Jn)
                  , Zn = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.startSeq = 1e3,
                        this.m3u8Len = 0,
                        this.preTsArr = void 0
                    }
                    return Object(m.a)(t, [{
                        key: "genSnFromM3u8",
                        value: function(t) {
                            var e = this.convertM3u8ToArray(t);
                            if (void 0 === this.preTsArr)
                                this.preTsArr = e;
                            else {
                                var i = this.findSeq(this.preTsArr, e[0], this.startSeq);
                                -1 === i && (i = this.startSeq + this.preTsArr.length),
                                this.preTsArr = e,
                                this.startSeq = i
                            }
                            return this.startSeq
                        }
                    }, {
                        key: "convertM3u8ToArray",
                        value: function(t) {
                            for (var e, i = /#EXT(INF):([\d\.]+)[^\r\n]*[\r\n]+([^#|\r\n]+)?/gi, s = []; null !== (e = i.exec(t)); )
                                e.shift(),
                                "INF" === (e = e.filter((function(t) {
                                    return void 0 !== t
                                }
                                )))[0] && s.push(e[2]),
                                e = [];
                            return s
                        }
                    }, {
                        key: "findSeq",
                        value: function(t, e, i) {
                            for (var s = t.length - 1; s >= 0; s--) {
                                var a = t[s]
                                  , r = a.split("?");
                                a = r.length > 1 ? r[0] : a;
                                var n = e.split("?");
                                if (a === (e = n.length > 1 ? n[0] : e))
                                    return i + s
                            }
                            return -1
                        }
                    }]),
                    t
                }()
                  , $n = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.isLive = e,
                        this.seqGener = new Zn,
                        this.isSwitchSeamLessLine = !1
                    }
                    return Object(m.a)(t, [{
                        key: "resolve",
                        value: function(t, e) {
                            return Qn.a.buildAbsoluteURL(e, t)
                        }
                    }, {
                        key: "cloneObj",
                        value: function(t) {
                            return JSON.parse((0,
                            d.default)(t))
                        }
                    }, {
                        key: "parseMasterPlaylist",
                        value: function(t, e) {
                            for (var i, s, a, r = [], n = {}, o = /#EXT-X-STREAM-INF:([^\n\r]*(BAND)WIDTH=(\d+))?([^\n\r]*(CODECS)=\"([^\"\n\r]*)\",?)?([^\n\r]*(RES)OLUTION=(\d+)x(\d+))?([^\n\r]*(NAME)=\"(.*)\")?[^\n\r]*[\r\n]+([^\r\n]+)/gi; null != (i = o.exec(t)); ) {
                                for (i.shift(),
                                i = i.filter((function(t) {
                                    return void 0 !== t
                                }
                                )),
                                (n = {}).url = this.resolve(i.pop(), e); i.length > 0; )
                                    switch (i.shift()) {
                                    case "RES":
                                        n.width = parseInt(i.shift()),
                                        n.height = parseInt(i.shift());
                                        break;
                                    case "BAND":
                                        n.bitrate = parseInt(i.shift());
                                        break;
                                    case "NAME":
                                        n.name = i.shift();
                                        break;
                                    case "CODECS":
                                        for (s = i.shift().split(","); s.length > 0; )
                                            -1 !== (a = s.shift()).indexOf("avc1") ? n.videoCodec = this.avc1toavcoti(a) : n.audioCodec = a
                                    }
                                r.push(n)
                            }
                            return r
                        }
                    }, {
                        key: "avc1toavcoti",
                        value: function(t) {
                            var e, i = t.split(".");
                            return i.length > 2 ? (e = i.shift() + ".",
                            e += parseInt(i.shift()).toString(16),
                            e += ("00" + parseInt(i.shift()).toString(16)).substr(-4)) : e = t,
                            e
                        }
                    }, {
                        key: "parseKeyParamsByRegex",
                        value: function(t, e) {
                            var i = e.exec(t);
                            return i && (i.shift(),
                            2 === (i = i.filter((function(t) {
                                return void 0 !== t
                            }
                            ))).length) ? i[1] : null
                        }
                    }, {
                        key: "parseLevelPlaylist",
                        value: function(t, e, i) {
                            return this._parseByLine(t, e, i)
                        }
                    }, {
                        key: "_getValue",
                        value: function(t, e, i) {
                            for (var s = e + 1; s < i; s++)
                                if (!t[s].startsWith("#"))
                                    return [s, t[s]];
                            return !1
                        }
                    }, {
                        key: "_getIv",
                        value: function(t) {
                            for (var e = new Uint8Array(16), i = 12; i < 16; i++)
                                e[i] = t >> 8 * (15 - i) & 255;
                            return e
                        }
                    }, {
                        key: "_parseByLine",
                        value: function(t, e, i) {
                            var s, a, r, n, o, u, h = 0, l = 0, c = !1, d = 0, f = {
                                url: e,
                                fragments: [],
                                live: this.isLive,
                                startSN: 0
                            }, p = !1, m = 0, y = !1;
                            this.isLive || (y = !0,
                            s = this.seqGener.genSnFromM3u8(t),
                            f.startSN = s);
                            for (var v = {
                                method: null,
                                key: null,
                                iv: null,
                                uri: null
                            }, _ = t.replace("\r").split("\n"), g = _.length, S = 0; S < g; S++) {
                                var T = _[S];
                                if (-1 !== T.indexOf("#EXT-X-MEDIA-SEQUENCE"))
                                    this.isLive && (l = f.startSN = parseInt(T.match(/\d+/g)[0]));
                                else if (-1 !== T.indexOf("#EXT-X-TARGETDURATION"))
                                    f.targetduration = parseFloat(T.match(/[\d\.]+/g)[0]);
                                else if (-1 !== T.indexOf("#EXT-X-ENDLIST"))
                                    f.live = !1,
                                    E.a.info("M3u8Parser.parseLevelPlaylist ENDLIST isLive=false");
                                else if (-1 !== T.indexOf("#EXT-X-DISCONTINUITY"))
                                    p = !0,
                                    m++;
                                else if (-1 !== T.indexOf("#EXT-X-BYTERANGE")) {
                                    var P = T.match(/[\d@]+/g)[0].split("@");
                                    if (u = 1 === P.length ? o : parseInt(P[1]),
                                    o = parseInt(P[0]) + u,
                                    (n = f.fragments.length ? f.fragments[f.fragments.length - 1] : null) && (n.byteRangeStartOffset = u,
                                    n.byteRangeEndOffset = o,
                                    (a = this._getValue(_, S, g)) && !n.url)) {
                                        var k = a[1];
                                        n.url = k ? this.resolve(k, e) : null
                                    }
                                } else if (-1 !== T.indexOf("#EXT-ALIGN-PTS"))
                                    1 === M.switchSeamLessLine && (h = Number(T.replace("#EXT-ALIGN-PTS:", "")),
                                    c = !0,
                                    this.isSwitchSeamLessLine = !0);
                                else if (-1 !== T.indexOf("#EXTINF")) {
                                    var I = parseFloat(T.match(/[\d\.]+/g)[0]);
                                    if (!isNaN(I)) {
                                        if (y && I < 1)
                                            continue;
                                        var b;
                                        if (y = !1,
                                        r = c ? h : ++l,
                                        this.isLive || (r = s++),
                                        v.method && v.uri && !v.iv ? (b = this.cloneObj(v)).iv = this._getIv(this.isLive ? l : r) : b = v,
                                        a = this._getValue(_, S, g)) {
                                            var C = a[1];
                                            f.fragments.push({
                                                url: C ? this.resolve(C, e) : null,
                                                time: C ? Qn.a.getTimeFromUrl(C, this.isLive) : 0,
                                                duration: I,
                                                start: d,
                                                level: i,
                                                sn: r,
                                                discontinuity: p,
                                                discontinuityCnt: m,
                                                byteRangeStartOffset: u,
                                                byteRangeEndOffset: o,
                                                decryptdata: b
                                            }),
                                            p && (p = !1),
                                            d += I,
                                            u = null
                                        }
                                    }
                                } else if (-1 !== T.indexOf("#EXT-X-KEY")) {
                                    var w = T.replace("#EXT-X-KEY:", "")
                                      , A = this.parseKeyParamsByRegex(w, /(METHOD)=([^,]*)/)
                                      , R = this.parseKeyParamsByRegex(w, /(URI)=["]([^,]*)["]/)
                                      , L = this.parseKeyParamsByRegex(w, /(IV)=([^,]*)/);
                                    A && (v = {
                                        method: null,
                                        key: null,
                                        iv: null,
                                        uri: null
                                    },
                                    R && "AES-128" === A && (v.method = A,
                                    v.uri = this.resolve(R, e),
                                    v.key = null,
                                    L && (v.iv = L,
                                    "0x" === v.iv.substring(0, 2) && (v.iv = v.iv.substring(2)),
                                    v.iv = v.iv.match(/.{8}/g),
                                    v.iv[0] = parseInt(v.iv[0], 16),
                                    v.iv[1] = parseInt(v.iv[1], 16),
                                    v.iv[2] = parseInt(v.iv[2], 16),
                                    v.iv[3] = parseInt(v.iv[3], 16),
                                    v.iv = new Uint32Array(v.iv))))
                                }
                            }
                            return f.totalduration = d,
                            f.endSN = h - 1,
                            this.isLive || (f.endSN = s - 1),
                            f
                        }
                    }, {
                        key: "_parseByReg",
                        value: function(t, e, i) {
                            var s, a, r, n, o, u = 0, h = 0, l = {
                                url: e,
                                fragments: [],
                                live: this.isLive,
                                startSN: 0
                            }, c = !1;
                            this.isLive || (s = this.seqGener.genSnFromM3u8(t),
                            l.startSN = s);
                            for (var d = {
                                method: null,
                                key: null,
                                iv: null,
                                uri: null
                            }, f = /(?:#EXT-X-(MEDIA-SEQUENCE):(\d+))|(?:#EXT-X-(TARGETDURATION):(\d+))|(?:#EXT-X-(KEY):(.*))|(?:#EXT(INF):([\d\.]+)[^\r\n]*([\r\n]+[^#|\r\n]+)?)|(?:#EXT-X-(BYTERANGE):([\d]+[@[\d]*)]*[\r\n]+([^#|\r\n]+)?|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DIS)CONTINUITY))/g; null !== (a = f.exec(t)); )
                                switch (a.shift(),
                                (a = a.filter((function(t) {
                                    return void 0 !== t
                                }
                                )))[0]) {
                                case "MEDIA-SEQUENCE":
                                    this.isLive && (u = l.startSN = parseInt(a[1]));
                                    break;
                                case "TARGETDURATION":
                                    l.targetduration = parseFloat(a[1]);
                                    break;
                                case "ENDLIST":
                                    l.live = !1,
                                    E.a.info("M3u8Parser.parseLevelPlaylist ENDLIST isLive=false");
                                    break;
                                case "DIS":
                                    c = !0;
                                    break;
                                case "BYTERANGE":
                                    var p = a[1].split("@");
                                    o = 1 === p.length ? n : parseInt(p[1]),
                                    n = parseInt(p[0]) + o,
                                    (r = l.fragments.length ? l.fragments[l.fragments.length - 1] : null) && !r.url && (r.byteRangeStartOffset = o,
                                    r.byteRangeEndOffset = n,
                                    r.url = this.resolve(a[2], e));
                                    break;
                                case "INF":
                                    var m = parseFloat(a[1]);
                                    if (!isNaN(m)) {
                                        var y, v = u++;
                                        if (this.isLive || (v = s++),
                                        d.method && d.uri && !d.iv) {
                                            y = this.cloneObj(d);
                                            for (var _ = new Uint8Array(16), g = 12; g < 16; g++)
                                                _[g] = v >> 8 * (15 - g) & 255;
                                            y.iv = _
                                        } else
                                            y = d;
                                        var S = a[2];
                                        l.fragments.push({
                                            url: S ? this.resolve(S, e) : null,
                                            time: S ? Qn.a.getTimeFromUrl(S, this.isLive) : 0,
                                            duration: m,
                                            start: h,
                                            level: i,
                                            sn: v,
                                            discontinuity: c,
                                            byteRangeStartOffset: o,
                                            byteRangeEndOffset: n,
                                            decryptdata: y
                                        }),
                                        c && (c = !1),
                                        h += m,
                                        o = null
                                    }
                                    break;
                                case "KEY":
                                    var T = a[1]
                                      , P = this.parseKeyParamsByRegex(T, /(METHOD)=([^,]*)/)
                                      , k = this.parseKeyParamsByRegex(T, /(URI)=["]([^,]*)["]/)
                                      , I = this.parseKeyParamsByRegex(T, /(IV)=([^,]*)/);
                                    P && (d = {
                                        method: null,
                                        key: null,
                                        iv: null,
                                        uri: null
                                    },
                                    k && "AES-128" === P && (d.method = P,
                                    d.uri = this.resolve(k, e),
                                    d.key = null,
                                    I && (d.iv = I,
                                    "0x" === d.iv.substring(0, 2) && (d.iv = d.iv.substring(2)),
                                    d.iv = d.iv.match(/.{8}/g),
                                    d.iv[0] = parseInt(d.iv[0], 16),
                                    d.iv[1] = parseInt(d.iv[1], 16),
                                    d.iv[2] = parseInt(d.iv[2], 16),
                                    d.iv[3] = parseInt(d.iv[3], 16),
                                    d.iv = new Uint32Array(d.iv))))
                                }
                            return l.totalduration = h,
                            l.endSN = u - 1,
                            this.isLive || (l.endSN = s - 1),
                            l
                        }
                    }]),
                    t
                }()
                  , to = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.hls = e,
                        this.isLive = e.isLive,
                        this.config = e.config,
                        this.m3u8Parser = new $n(e.isLive),
                        this.currLevelId = 0,
                        this.currFrag = null,
                        this.lastFrag = null,
                        this.levels = [],
                        this.flagStartList = null,
                        this.firstLevelLoaded = !1,
                        this.loader = null,
                        this.seekTime = 0,
                        this.manifestLoadedTs = 0,
                        this.isMasterPlayList = !1,
                        this.currLevel = null
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.m3u8Parser = null,
                            this.currLevelId = 0,
                            this.currFrag = null,
                            this.lastFrag = null,
                            this.levels = null,
                            this.currLevel = null,
                            this.firstLevelLoaded = !1,
                            this.loader.abort(),
                            this.loader = null,
                            this.flagStartList = null,
                            this.seekTime = 0,
                            this.manifestLoadedTs = 0,
                            this.isMasterPlayList = !1
                        }
                    }, {
                        key: "currDetails",
                        get: function() {
                            return this.currLevel ? this.currLevel.details : null
                        }
                    }, {
                        key: "currFragNum",
                        get: function() {
                            var t = this.currDetails
                              , e = t ? t.fragments : null;
                            return e ? e.length : 0
                        }
                    }, {
                        key: "totalDuration",
                        get: function() {
                            var t = this.currDetails;
                            return t ? t.totalduration : 0
                        }
                    }, {
                        key: "getNearFragStart",
                        value: function(t) {
                            if (this.flagStartList.length > 1)
                                for (var e = 1; e < this.flagStartList.length; e++)
                                    if (this.flagStartList[e] > t && this.flagStartList[e - 1] < t)
                                        return this.flagStartList[e];
                            return Math.ceil(t + 1)
                        }
                    }, {
                        key: "getNextFrag",
                        value: function() {
                            var t = this.currDetails
                              , e = t.fragments
                              , i = null;
                            return this.isLive ? e.length > 0 && (i = e.shift()) : (null == t.fragIdx && (t.fragIdx = 0),
                            t.fragIdx < e.length && (i = e[t.fragIdx++])),
                            i && (this.lastFrag = this.currFrag,
                            this.currFrag = i),
                            i
                        }
                    }, {
                        key: "getCurrentFrag",
                        value: function() {
                            var t = this.currDetails
                              , e = t.fragments
                              , i = null;
                            return this.isLive ? e.length > 0 && (i = e[0]) : (null == t.fragIdx && (t.fragIdx = 0),
                            t.fragIdx < e.length && (i = e[t.fragIdx])),
                            i && (this.lastFrag = this.currFrag,
                            this.currFrag = i),
                            i
                        }
                    }, {
                        key: "seek",
                        value: function(t) {
                            if (this.isLive)
                                return !1;
                            var e = this.currDetails
                              , i = e ? e.fragments : null;
                            if (!i)
                                return this.seekTime = t,
                                !1;
                            t = Math.min(t, e.totalduration);
                            var s, a, r = !1;
                            if (this.isLive)
                                for (; i.length && !((s = i[0]).start > t); ) {
                                    if (a = s.start + s.duration,
                                    s.start <= t && a > t) {
                                        a - .2 < t && i.length > 1 && i.shift(),
                                        i.length > 0 && (i[0].seeking = !0,
                                        r = !0);
                                        break
                                    }
                                    i.shift()
                                }
                            else {
                                for (var n = 0, o = i.length; n < o; ) {
                                    if (a = (s = i[n]).start + s.duration,
                                    s.start <= t && a > t) {
                                        a - .2 < t && n < o - 1 && n++,
                                        n < o && (i[n].seeking = !0,
                                        r = !0);
                                        break
                                    }
                                    n++
                                }
                                E.a.info("HlsPlaylist.seek seekTime=".concat(t, " fragIdx=").concat(e.fragIdx, ", ").concat(n), i[n] ? i[n].sn : ""),
                                e.fragIdx = n
                            }
                            return this.seekTime = 0,
                            r
                        }
                    }, {
                        key: "loadManifest",
                        value: function(t) {
                            this.m3u8Parser.isSwitchSeamLessLine = !1,
                            this.loader && (this.loader.destroy(),
                            this.loader = null),
                            this.flagStartList || (this.flagStartList = [0]),
                            t = this.addUrlParams(t),
                            this.manifsetUrl = t,
                            this.hls.stat.addComp(De, Oe, 1),
                            this.loader = new Xn(this.config),
                            this.loader.load(t, "", this.onManifestLoaded.bind(this), this.loadManifestError.bind(this), this.loadManifestTimeout.bind(this), this.config.listLoadingTimeOut, this.config.listLoadingMaxRetry, this.config.listLoadingRetryDelay)
                        }
                    }, {
                        key: "refreshManifsetUrl",
                        value: function(t) {
                            t = this.addUrlParams(t),
                            this.manifsetUrl = t
                        }
                    }, {
                        key: "addUrlParams",
                        value: function(t) {
                            var e = M.platform
                              , i = D.PLATFORM_TYPE[e] || D.PLATFORM_TYPE.web;
                            t += -1 === t.indexOf("?") ? "?" : "&";
                            var s = e === D.PLATFORM_TYPE_NAME.wap ? "&uid=".concat(L.uid, "&uuid=").concat(L.uuid) : "&u=".concat(L.convertUid);
                            return t + "".concat(s, "&t=").concat(i, "&sv=").concat(2203101758)
                        }
                    }, {
                        key: "onManifestLoaded",
                        value: function(t, e) {
                            0 == this.manifestLoadedTs && (this.manifestLoadedTs = F.a.now());
                            var i = t.currentTarget.status;
                            if (404 === i || 0 === i || 403 === i)
                                return this.hls.stat.addComp(De, Fe, 1),
                                E.a.warn("HlsPlaylist.onManifestLoaded status=".concat(i)),
                                void this.hls.setLoadStatus(D.LoadVideoTimeoutReason.HLS_LOADMANIFEST_ERROR);
                            var s, a = t.currentTarget.responseText, r = this.manifsetUrl, n = null, o = [];
                            if (-1 == a.indexOf("#EXTM3U"))
                                return this.hls.stat.addComp(De, Ne, 1),
                                E.a.error("HlsPlaylist.onManifestLoaded m3u8 doesn't match #EXTM3U\n", a),
                                void this.hls.setLoadStatus(D.LoadVideoTimeoutReason.HLS_LOADMANIFEST_ERROR);
                            this.hls.stat.addComp(De, Me, 1);
                            var u = -1 == a.indexOf("#EXTINF:");
                            u ? (this.isMasterPlayList = !0,
                            n = this.m3u8Parser.parseMasterPlaylist(a, r)) : (this.isMasterPlayList = !1,
                            n = [{
                                url: r
                            }]),
                            s = (o = n)[0].bitrate,
                            o.sort((function(t, e) {
                                return t.bitrate - e.bitrate
                            }
                            )),
                            this.levels = o;
                            for (var h = 0; h < o.length; h++)
                                if (o[h].bitrate === s) {
                                    this.currLevelId = h;
                                    break
                                }
                            this.currLevel = {
                                bitrate: s
                            },
                            u ? (this.currLevel.url = o[this.currLevelId].url,
                            this.loadLevel()) : (this.currLevel.url = this.manifsetUrl,
                            this.onLevelLoaded(t)),
                            this.hls.setLoadStatus(D.LoadVideoTimeoutReason.HLS_LOADMANIFEST_SUCCESS)
                        }
                    }, {
                        key: "loadManifestError",
                        value: function(t) {
                            this.hls.stat.addComp(De, Fe, 1),
                            E.a.warn("HlsPlaylist.loadManifestError " + t.currentTarget.status),
                            404 !== t.currentTarget.status && 0 !== t.currentTarget.status || this.hls.onAnchorStop(),
                            this.hls.onLoadM3u8Error()
                        }
                    }, {
                        key: "loadManifestTimeout",
                        value: function(t) {
                            this.hls.stat.addComp(De, xe, 1),
                            t >= 2 ? this.hls.onLoadManifestTimeout() : this.hls.onConnectManifestTimeout()
                        }
                    }, {
                        key: "loadLevel",
                        value: function() {
                            if (this.currLevel) {
                                var t = this.currLevel.url;
                                if (!this.isLive && this.currDetails) {
                                    var e = this.currDetails.fragments
                                      , i = e[e.length - 1];
                                    i || (E.a.log("HlsPlaylist.loadLevel: fragments run out"),
                                    i = this.currFrag),
                                    t = e.length <= this.config.minFragBufferNum ? this.currLevel.url.replace(/\?btime=\d*$/, "?btime=".concat(i.time)) : null
                                }
                                t && this._loadLevel(t)
                            }
                        }
                    }, {
                        key: "updateLiveVodUrl",
                        value: function(t) {
                            this.currLevel && (this.manifsetUrl = t,
                            this.m3u8Updating = !0,
                            this.currLevel.url = t,
                            this._loadLevel(t))
                        }
                    }, {
                        key: "_loadLevel",
                        value: function(t) {
                            this.loader && (this.loader.destroy(),
                            this.loader = null),
                            this.anticode && (t += "?" + this.anticode),
                            this.hls.stat.addComp(De, Oe, 1),
                            this.loader = new Xn(this.config),
                            this.loader.load(t, "", this.onLevelLoaded.bind(this), this.loadLevelError.bind(this), this.loadLevelTimeout.bind(this), this.config.listLoadingTimeOut, this.config.listLoadingMaxRetry, this.config.listLoadingRetryDelay)
                        }
                    }, {
                        key: "onLevelLoaded",
                        value: function(t, e) {
                            if (404 !== t.currentTarget.status && 0 !== t.currentTarget.status) {
                                var i = t.currentTarget.responseText
                                  , s = this.manifsetUrl
                                  , a = this.currLevel
                                  , r = null;
                                if (s && (a.url = s),
                                0 === i.indexOf("#EXTM3U") && i.indexOf("#EXTINF:") > 0) {
                                    if (this.hls.stat.addComp(De, Me, 1),
                                    r = this.m3u8Parser.parseLevelPlaylist(i, a.url, this.currLevelId, this.flagStartList),
                                    a.details = this.mergeDetails(a.details, r),
                                    this.isLive || this.hls.eventEmitter.trigger(y.PLAYBACK_M3U8_UPDATED, {
                                        totalDuration: this.totalDuration
                                    }),
                                    this.isLive && a.details.fragments.length > 10)
                                        return E.a.info("HlsPlaylist.onLevelLoaded fragments.length =", a.details.fragments.length),
                                        void this.hls.reconnectLive();
                                    this.hls.setTargetDuration(this.currDetails.targetduration),
                                    this.seekTime && this.seek(this.seekTime),
                                    this.firstLevelLoaded || (this.firstLevelLoaded = !0,
                                    this.hls.loadFragment())
                                } else {
                                    this.hls.stat.addComp(De, Ue, 1);
                                    var n = a.details.fragments.length;
                                    E.a.warn("HlsPlaylist.onLevelLoaded no playlist. fragments.length=".concat(n, "\n").concat(i))
                                }
                                this.hls.isSwitchSeamLessLine = this.m3u8Parser.isSwitchSeamLessLine
                            } else
                                this.hls.stat.addComp(De, Fe, 1)
                        }
                    }, {
                        key: "loadLevelError",
                        value: function(t) {
                            this.hls.stat.addComp(De, Fe, 1),
                            E.a.warn("HlsPlaylist.loadLevelError " + t.currentTarget.status),
                            404 !== t.currentTarget.status && 0 !== t.currentTarget.status || this.hls.onAnchorStop()
                        }
                    }, {
                        key: "loadLevelTimeout",
                        value: function() {
                            this.hls.stat.addComp(De, xe, 1),
                            this.hls.reset()
                        }
                    }, {
                        key: "mergeDetails",
                        value: function(t, e) {
                            if (!t)
                                return e;
                            var i, s, a = 0, r = 0;
                            return s = t.fragments.length > 0 ? t.fragments[t.fragments.length - 1] : this.currFrag,
                            i = s.sn,
                            r = s.start + s.duration,
                            e.fragments.forEach((function(e) {
                                e.sn > i && t.fragments.push(e)
                            }
                            )),
                            t.endSN = e.endSN,
                            t.fragments.forEach((function(t) {
                                a += t.duration,
                                t.sn > i && (t.start = r,
                                r += t.duration)
                            }
                            )),
                            t.totalduration = a,
                            t
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t) {
                            this.isLive && this.loadLevel()
                        }
                    }]),
                    t
                }()
                  , eo = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this._config = e,
                        this._receivedLength = 0
                    }
                    return Object(m.a)(t, [{
                        key: "destroy",
                        value: function() {
                            this.onChunk = null,
                            this.onSuccess = null,
                            this.onError = null,
                            this.onTimeout = null,
                            this.abort()
                        }
                    }, {
                        key: "loadBuffer",
                        value: function(t, e, i, s, a, r, n, o, u) {
                            this.url = t,
                            this.onOpen = e,
                            this.onChunk = i,
                            this.onSuccess = s,
                            this.onError = a,
                            this.onTimeout = r,
                            this.stats = {
                                trequest: performance.now(),
                                retry: 0
                            },
                            this.timeout = n,
                            this.maxRetry = o,
                            this.retryDelay = u,
                            this.timeoutHandle = window.setTimeout(this.loadtimeout.bind(this), n),
                            this.loadInternal()
                        }
                    }, {
                        key: "loadInternal",
                        value: function() {
                            var t = this
                              , e = this.fromByte
                              , i = this.toByte
                              , s = new self.Headers;
                            null != this.fromByte && null != this.toByte && s.append("Range", "bytes=".concat(e, "-").concat(i));
                            var a = {
                                method: "GET",
                                headers: s,
                                mode: "cors",
                                cache: "default",
                                referrerPolicy: "no-referrer-when-downgrade"
                            };
                            fetch(this.url, a).then((function(e) {
                                if (!t._requestAbort)
                                    return e.ok && e.status >= 200 && e.status <= 299 ? (t._onopen(),
                                    t._pump.call(t, e.body.getReader())) : void t._onerror({
                                        code: e.status,
                                        msg: e.statusText
                                    });
                                t._requestAbort = !1
                            }
                            )).catch((function(e) {
                                t._onerror({
                                    code: -1,
                                    msg: e.message
                                })
                            }
                            ))
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this._requestAbort = !0
                        }
                    }, {
                        key: "_clearTimeout",
                        value: function() {
                            var t = this.timeoutHandle;
                            t && (clearTimeout(t),
                            this.timeoutHandle = null)
                        }
                    }, {
                        key: "_pump",
                        value: function(t) {
                            var e = this;
                            return t.read().then((function(i) {
                                if (e._clearTimeout(),
                                i.done)
                                    e._onsuccess();
                                else {
                                    if (!0 === e._requestAbort)
                                        return e._requestAbort = !1,
                                        t.cancel();
                                    var s = i.value.buffer;
                                    e.onChunk && e.onChunk(s),
                                    e._pump(t)
                                }
                            }
                            )).catch((function(t) {
                                if (11 !== t.code || !O.a.msedge) {
                                    var i = {
                                        code: t.code,
                                        msg: t.message
                                    };
                                    e._onerror(i)
                                }
                            }
                            ))
                        }
                    }, {
                        key: "_onopen",
                        value: function() {
                            this.onOpen && this.onOpen()
                        }
                    }, {
                        key: "_onerror",
                        value: function(t) {
                            0 !== t.code && 404 !== t.code ? this.stats.retry < this.maxRetry ? (E.a.warn("FetchLoader.loaderror url=" + this.url + " retryDelay=" + this.retryDelay),
                            window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                            this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                            this.stats.retry++,
                            this.abort()) : (this._clearTimeout(),
                            E.a.warn("FetchLoader.loaderror reach max retry url=" + this.url),
                            this.onError(t)) : this.onError(t)
                        }
                    }, {
                        key: "_onsuccess",
                        value: function(t) {
                            this._clearTimeout(),
                            this.onSuccess && this.onSuccess(t)
                        }
                    }, {
                        key: "loadtimeout",
                        value: function() {
                            this.stats.retry < this.maxRetry ? (E.a.warn("FetchLoader.loadtimeout url=" + this.url + " retryDelay=" + this.retryDelay),
                            this.abort(),
                            window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                            this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                            this.stats.retry++) : (this._clearTimeout(),
                            E.a.warn("FetchLoader.loadtimeout max retry url=" + this.url),
                            this.onTimeout && this.onTimeout())
                        }
                    }], [{
                        key: "isSupported",
                        value: function() {
                            if (1 == localStorage._noFetch)
                                return !1;
                            try {
                                var t = O.a.msedge && O.a.version.minor >= 15048
                                  , e = !O.a.msedge || t;
                                return fetch && ReadableStream && e
                            } catch (t) {
                                return !1
                            }
                        }
                    }]),
                    t
                }()
                  , io = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.hlsPlayer = e,
                        this.stat = this.hlsPlayer.stat,
                        this.tsdbUtil = this.hlsPlayer.tsdb,
                        this.isPaused = !1,
                        this.tsOpens = [],
                        this.tsLoadeds = [],
                        this.tsSpeeds = [],
                        this.tsSizes = []
                    }
                    return Object(m.a)(t, [{
                        key: "setPause",
                        value: function() {
                            this.isPaused = !0,
                            this.stat.setCore(Ct, 100)
                        }
                    }, {
                        key: "start",
                        value: function() {
                            this.stop(),
                            ls.once(this.checkSuc, this, 1e4),
                            ls.once(this.checkVideo, this, 2e4)
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.tsOpens = [],
                            this.tsLoadeds = [],
                            this.tsSpeeds = [],
                            this.tsSizes = [],
                            ls.remove(this.checkSuc, this),
                            ls.remove(this.checkVideo, this)
                        }
                    }, {
                        key: "checkSuc",
                        value: function() {
                            var t = this.hlsPlayer
                              , e = t._loaderType
                              , i = t.hasVideo
                              , s = t.url
                              , a = t.playTs
                              , r = i ? 100 : 0
                              , n = [];
                            n.push(this.stat.createAct(Ti, {
                                value: [r, e],
                                str: [s, "".concat(a)]
                            })),
                            this.tsdbUtil.sendMetrics(n)
                        }
                    }, {
                        key: "checkVideo",
                        value: function() {
                            var t = this.hlsPlayer.hasVideo ? 100 : 0
                              , e = [];
                            e.push(this.stat.createAct(Pi, {
                                value: [t]
                            })),
                            this.tsdbUtil.sendMetrics(e)
                        }
                    }, {
                        key: "report",
                        value: function() {
                            var t = [{
                                sMetricName: Wi.METRIC.VIDEO_BAD_QUALITY_RATIO,
                                vField: {
                                    value: this.isPaused ? 100 : 0
                                },
                                vDimension: {
                                    p2p: 2
                                }
                            }];
                            this.hlsPlayer.mse.metadata.recvAudioFps && this.stat.setComp(Ht, Yt, this.hlsPlayer.mse.metadata.recvAudioFps),
                            this.hlsPlayer.mse.metadata.recvVideoFps && this.stat.setComp(Ht, Wt, this.hlsPlayer.mse.metadata.recvVideoFps),
                            this.stat.setComp(Ht, zt, this.hlsPlayer.getSpeed()),
                            this.stat.setComp(Ht, jt, this.hlsPlayer.mse.curVideoDts),
                            this.stat.setComp(Ht, Gt, this.hlsPlayer.mse.curAudioDts),
                            this.stat.setCompFormat(Ht, ":", ","),
                            this.stat.setCore(te, this.hlsPlayer.getBufferLen()),
                            this.stat.setCore(Be, this.hlsPlayer.getFrameBufferLen()),
                            this.stat.setCoreDim(Ct, this.isPaused ? 100 : 0),
                            this.stat.setComp(De, Ye, this.getAvg(this.tsOpens)),
                            this.stat.setComp(De, We, this.getAvg(this.tsLoadeds)),
                            this.stat.setComp(De, qe, this.getAvg(this.tsSpeeds)),
                            this.stat.setComp(De, Ke, this.getAvg(this.tsSizes)),
                            this.stat.fill(t, !1),
                            this.tsdbUtil.sendMetrics(t),
                            this.isPaused = !1,
                            this.tsOpens = [],
                            this.tsLoadeds = [],
                            this.tsSpeeds = [],
                            this.tsSizes = []
                        }
                    }, {
                        key: "getAvg",
                        value: function(t) {
                            var e = t.length;
                            if (0 === e)
                                return 0;
                            for (var i = 0, s = 0; s < e; s++)
                                i += t[s];
                            return Math.floor(i / e)
                        }
                    }]),
                    t
                }()
                  , so = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this._hlsPlayer = e,
                        this._seekTime = 0
                    }
                    return Object(m.a)(t, [{
                        key: "seek",
                        value: function(t) {
                            this._seekTime = t
                        }
                    }, {
                        key: "check",
                        value: function() {
                            this._seekTime > 0 && (this._seek() ? this._seekTime = 0 : this._reseek())
                        }
                    }, {
                        key: "_seek",
                        value: function() {
                            for (var t = this._seekTime, e = this._hlsPlayer.mse.video.video.buffered, i = [], s = !1, a = 0; a < e.length; a++) {
                                var r = e.start(a)
                                  , n = e.end(a);
                                if (i.push("[".concat(r, ", ").concat(n, "]")),
                                r - .5 <= t && t < n + 1) {
                                    s = !0;
                                    break
                                }
                                if (t < r) {
                                    this._seekTime = r;
                                    break
                                }
                            }
                            return s && (this._hlsPlayer.onVideoSeek(t),
                            !this._hlsPlayer.userPaused && this._hlsPlayer.play()),
                            E.a.log("HlsSeek.buffered", i.join(" ")),
                            s
                        }
                    }, {
                        key: "_reseek",
                        value: function() {
                            E.a.log("HlsSeek._reseek");
                            var t = this._hlsPlayer.playlist.currDetails;
                            t && t.fragments && (t.fragIdx > 1 && t.fragIdx--,
                            this._hlsPlayer.mse.seek(this._seekTime),
                            this._hlsPlayer.mse.resetHls(),
                            this._hlsPlayer.seekTime = this._seekTime,
                            E.a.log("HlsSeek._reseek", t.fragIdx))
                        }
                    }, {
                        key: "_findIdxFront",
                        value: function(t, e, i) {
                            for (var s = e.length, a = null, r = i; r < s; r++)
                                if ((t += (a = e[r]).duration) >= this._seekTime)
                                    return a.seeking = !0,
                                    r;
                            return s - 1
                        }
                    }, {
                        key: "_findIdxBack",
                        value: function(t, e, i) {
                            for (var s = null, a = i; a > 0; a--)
                                if ((t -= (s = e[a]).duration) < this._seekTime)
                                    return s.seeking = !0,
                                    a;
                            return 0
                        }
                    }]),
                    t
                }()
                  , ao = function() {
                    function t(e, i) {
                        Object(p.a)(this, t);
                        var s = i.stat
                          , a = i.tsdb
                          , r = i.videoElement
                          , n = i.h265Proxy;
                        this.config = {
                            autoStartLoad: !0,
                            maxBufferLength: 30,
                            minBufferLength: 15,
                            bs2Delay: 3e3,
                            fragLoadingTimeOut: 5e3,
                            fragLoadingMaxRetry: r ? 3 : 1,
                            fragLoadingRetryDelay: 1e3,
                            listLoadingTimeOut: r ? 15e3 : 3e3,
                            listLoadingMaxRetry: r ? 0 : 3,
                            listLoadingRetryDelay: 1e3,
                            appendErrorMaxRetry: 200,
                            minFragBufferNum: 3,
                            autoReconnect: !0
                        },
                        this.eventEmitter = e,
                        this.stat = s,
                        this.tsdb = a,
                        this.h265Proxy = n,
                        this.isLive = !1,
                        this.liveType = 0,
                        this.url = null,
                        this.cdnName = null,
                        this.seekTime = 0,
                        this.playlist = null,
                        this.mse = null,
                        this.userPaused = !1,
                        this.targetDuration = 0,
                        this.isLoading = !1,
                        this.fragStartTs = 0,
                        this.fragOpenTs = 0,
                        this.fragSize = 0,
                        this.startTs = 0,
                        this.pauseTs = 0,
                        this.pauseCnt = 0,
                        this.playTs = 0,
                        this.started = !1,
                        this.isTryAgain = !1,
                        this.fragLoader = null,
                        this.tryTimer = null,
                        this.hasVideo = !1,
                        this.playStat = new io(this),
                        this.hlsSeek = new so(this),
                        this.firstPlay = !0,
                        this.firstFragLoadTs = 0,
                        this.firstFragLoadedTs = 0,
                        this.firstFragSize = 0,
                        this.videoStatus = S,
                        this.flvLoadTimeSended = !1,
                        this.curAppendFrag = null,
                        this.seeking = !1,
                        this.skipStatForSeek = !1,
                        this.playTriggered = !1;
                        var u, h, l, c, d = (u = M.hlsUseFetch > Math.floor(100 * Math.random()) && eo.isSupported(),
                        l = (h = D.HLS_LOAD_TYPE).FETCH,
                        c = h.XHR,
                        {
                            clz: u ? eo : Xn,
                            type: u ? l : c
                        }), f = d.clz, m = d.type;
                        this._loaderClz = f,
                        this._loaderType = m,
                        this.videoElement = r,
                        this.loadHlsStatus = D.LoadVideoTimeoutReason.HLS_DISCONNECTED,
                        this.needReset = !1,
                        this.resetPlayTs = 0,
                        this.lastPlayTs = 0,
                        this.pauseInBufferFullTimes = 0,
                        this.sendPauseTimeout = 0,
                        this.businessStartCost = 0,
                        this.startTimeStamp = 0,
                        this.loadStartTs = 0,
                        this.anticode = new hn,
                        this.isSwitchSeamLessLine = !1,
                        this.pausedByBrowser = !1,
                        this._nextRefreshTime = o.default,
                        this.avgSpeed = new Ki(20),
                        this.exceptionStat = new ln(this),
                        this.realStartBind = this.realStart.bind(this),
                        this._clickEventBind = this._clickEvent.bind(this),
                        this.refreshAnticodeBind = this.refreshAnticode.bind(this),
                        this.anticode.on(hn.Events.REFRESH, this.refreshAnticodeBind)
                    }
                    return Object(m.a)(t, [{
                        key: "selectXhrLoader",
                        value: function() {
                            this._loaderClz = Xn,
                            this._loaderType = D.HLS_LOAD_TYPE.XHR
                        }
                    }, {
                        key: "getSpeed",
                        value: function() {
                            var t = this.avgSpeed.average();
                            return t === R.UintMax ? 0 : t
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            E.a.log("HlsPlayer.destroy"),
                            this.started = !1,
                            this.removeTimer(),
                            this.tryTimer && (clearTimeout(this.tryTimer),
                            this.tryTimer = null),
                            this.mse && (this.mse.destroy(),
                            this.mse = null),
                            this.playlist && (this.playlist.destroy(),
                            this.playlist = null),
                            this.releaseLoader(),
                            this.isSwitchSeamLessLine = !1
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            E.a.log("HlsPlayer.reset"),
                            this.exceptionStat.reset(),
                            this.avgSpeed.reset(),
                            this.removeTimer(),
                            this.isLive = null,
                            this.liveType = 0,
                            this.url = null,
                            this.cdnName = null,
                            this.seekTime = 0,
                            this.targetDuration = 0,
                            this.isLoading = !1,
                            this.startTs = 0,
                            this.pauseTs = 0,
                            this.pauseCnt = 0,
                            this.playTs = 0,
                            this.hasVideo = !1,
                            this.started = !1,
                            this.userPaused = !1,
                            this.isTryAgain = !1,
                            this.playStat.stop(),
                            this.firstFragLoadTs = 0,
                            this.firstFragLoadedTs = 0,
                            this.firstFragSize = 0,
                            this.curAppendFrag = null,
                            this.seeking = !1,
                            this.skipStatForSeek = !1,
                            this.firstPlay = !0,
                            this.playTriggered = !1,
                            this.stat.reset(),
                            this.isSwitchSeamLessLine = !1,
                            this.pausedByBrowser = !1
                        }
                    }, {
                        key: "resetMediasource",
                        value: function() {
                            this.resetPlayTs = 0,
                            this.needReset = !0
                        }
                    }, {
                        key: "reloadInError",
                        value: function() {
                            var t = this.playlist.getCurrentFrag();
                            t && (this.releaseLoader(),
                            this.destroyMse(),
                            this.mse = this.createMse(),
                            this.isLoading = !1,
                            this.seek(t.start + .5))
                        }
                    }, {
                        key: "destroyMse",
                        value: function() {
                            this.mse && (this.mse.destroy(),
                            this.mse = null)
                        }
                    }, {
                        key: "createMse",
                        value: function() {
                            var t = {
                                isLive: this.isLive,
                                videoType: "ts",
                                videoElement: this.videoElement,
                                h265Proxy: this.h265Proxy,
                                ignoreSei: this.ignoreSei,
                                closeFetch: this.closeFetch
                            };
                            return 1 == localStorage._isPureAudio && (t.isPureAudio = !0),
                            1 == localStorage._isPureVideo && (t.isPureVideo = !0),
                            new za(this,t)
                        }
                    }, {
                        key: "releaseLoader",
                        value: function() {
                            this.fragLoader && (this.fragLoader.destroy(),
                            this.fragLoader = null)
                        }
                    }, {
                        key: "removeTimer",
                        value: function() {
                            ls.remove(this.onCheckTimer, this),
                            ls.remove(this.onCheckFastTimer, this)
                        }
                    }, {
                        key: "setConfig",
                        value: function(t, e) {}
                    }, {
                        key: "start",
                        value: function(t) {
                            this.stop(),
                            this.checkParams(t, this.realStartBind)
                        }
                    }, {
                        key: "checkParams",
                        value: function(t, e) {
                            E.a.log("HlsPlayer.checkParams", (0,
                            d.default)(t)),
                            this.started = !0,
                            t.isLive && t.sHlsUrl && t.sStreamName ? (t.sHlsUrl = t.sHlsUrl.replace("http://", "https://"),
                            t.sHlsAntiCode ? (this.anticode.init(t.sHlsUrl, t.sStreamName, t.sHlsAntiCode),
                            this.anticode.valid().then((function() {
                                e(t)
                            }
                            ))) : e(t)) : t.url ? e(t) : E.a.error("HlsPlayer.checkParams has no params(sHlsUrl,sStreamName,url)")
                        }
                    }, {
                        key: "initInfo",
                        value: function(t) {
                            this.info = t;
                            var e = t.url;
                            t.sHlsUrl && t.sStreamName && (e = t.sHlsUrl + "/" + t.sStreamName + ".m3u8");
                            var i = [];
                            return this.anticode.hasAnticode() && i.push(this.anticode.getAnticode()),
                            t.iBitRate > 0 && i.push("ratio=".concat(t.iBitRate)),
                            i.length > 0 && (e += (-1 !== e.indexOf("?") ? "&" : "?") + "".concat(i.join("&"))),
                            this.lineType = t.lineType,
                            e
                        }
                    }, {
                        key: "realStart",
                        value: function(t) {
                            if (this.started) {
                                this.url = this.initInfo(t);
                                var e = (new Date).getTime();
                                this.businessStartCost = 0,
                                this.UIStartCost = 0,
                                this.loadStartTs = 0,
                                this.startTimeStamp = Number(t.startTimeStamp) || 0,
                                t.noNeedSendVideoLoadTime ? this.noNeedSendVideoLoadTime = !0 : (this.businessStartCost = t.startTimeStamp ? Math.floor(e - t.startTimeStamp) : 0,
                                this.noNeedSendVideoLoadTime = !1),
                                t.uistartTs && t.uistartTs > 0 && (this.UIStartCost = Math.floor(e - t.uistartTs)),
                                E.a.log("HlsPlayer.start startTimeStamp=" + t.startTimeStamp, "uistartTs=" + t.uistartTs, "businessStartCost=" + this.businessStartCost, "UIStartCost=" + this.UIStartCost, "now=" + e, "uistartTs=" + t.uistartTs),
                                this.url ? (this.loadHlsStatus = D.LoadVideoTimeoutReason.HLS_DISCONNECTED,
                                this.isLive = t.isLive,
                                this.closeFetch = Boolean(t.closeFetch),
                                this.ignoreSei = Boolean(t.ignoreSei),
                                this.cdnName = t.cdnName,
                                this.liveType = t.liveType,
                                this.closeFetch && this.selectXhrLoader(),
                                E.a.log("HlsPlayer.start isLive=".concat(this.isLive, " url=").concat(this.url)),
                                this.playlist = new to(this),
                                this.destroyMse(),
                                this.mse = this.createMse(),
                                this.playlist.loadManifest(this.url),
                                cn(this.stat, this.url, this.info.sStreamName),
                                this.seek(t.seekTime || this.seekTime),
                                this.startTs = F.a.now(),
                                this.playStat.start(),
                                this.stat.setComDim(q, this.url),
                                this.stat.setComDim(Y, V),
                                this.stat.setComDim(nt, 3),
                                this.stat.setComDim(ot, t.isLhls ? 2 : 1)) : E.a.error("HlsPlayer.start invalid argument, pls check the url.")
                            }
                        }
                    }, {
                        key: "refreshAnticode",
                        value: function() {
                            this.url = this.initInfo(this.info),
                            this.playlist.refreshManifsetUrl(this.url)
                        }
                    }, {
                        key: "setVideoPlayTimeSended",
                        value: function() {
                            this.flvLoadTimeSended = !0
                        }
                    }, {
                        key: "setLoadStatus",
                        value: function(t) {
                            this.loadHlsStatus < t && (t === D.LoadVideoTimeoutReason.HLS_LOADMANIFEST_SUCCESS && this.exceptionStat.setStat(Vt.CONNECT_SUC, 1),
                            this.loadHlsStatus = t)
                        }
                    }, {
                        key: "sendLoadVideoErrorStatus",
                        value: function() {
                            this.eventEmitter.tsdbUtil.sendMetrics([this.stat.createAct(TsdbUtil.METRIC.VIDEO_VIDEO_LOAD_ERROR, {
                                value: [this.loadHlsStatus]
                            })])
                        }
                    }, {
                        key: "getPlayVideo",
                        value: function() {
                            return this.mse.getPlayVideo()
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.started && (E.a.log("HlsPlayer.stop"),
                            this.destroy(),
                            this.reset())
                        }
                    }, {
                        key: "seek",
                        value: function(t) {
                            if (!this.isLive && null != t) {
                                if (this.seeking = !0,
                                this.skipStatForSeek = !0,
                                this.seekTime = t,
                                this.hlsSeek.seek(0),
                                0 == t) {
                                    if (this.firstPlay = !1,
                                    !this.mse || !this.mse.video)
                                        return;
                                    if (0 == this.mse.video.currentTime)
                                        return
                                }
                                this.playlist && (E.a.log("HlsPlayer.seek " + t),
                                t = Math.max(0, Number(t)),
                                this.playlist.seek(t) ? (this.mse.seek(t),
                                this.mse.resetHls(),
                                this.releaseLoader(),
                                this.isLoading = !1,
                                this.loadFragment(),
                                this.hlsSeek.seek(this.seekTime)) : this.playlist.firstLevelLoaded && (E.a.warn("HlsPlayer.seek out of range."),
                                this.stop(),
                                this.onAnchorStop()))
                            }
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            this.started && (E.a.info("HlsPlayer.pause"),
                            this.userPaused = !0,
                            this.mse && this.mse.pause())
                        }
                    }, {
                        key: "play",
                        value: function() {
                            this.started && (E.a.info("HlsPlayer.play"),
                            this.userPaused = !1,
                            this.mse && this.mse.play())
                        }
                    }, {
                        key: "setVolume",
                        value: function(t) {
                            this.mse && this.mse.setVolume(t)
                        }
                    }, {
                        key: "getVolume",
                        value: function() {
                            return this.mse ? this.mse.getVolume() : -1
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return this.mse.getBufferLen()
                        }
                    }, {
                        key: "getFrameBufferLen",
                        value: function() {
                            return this.mse.getFrameBufferLen()
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.mse && (this.lastPlayTs = Math.round(this.mse.getCurrentTime() / 1e3)),
                            this.lastPlayTs > this.getDurationTime() ? this.getDurationTime() : this.lastPlayTs
                        }
                    }, {
                        key: "getCurrentDts",
                        value: function() {
                            return this.mse.getCurrentDts()
                        }
                    }, {
                        key: "getCurrentSeiOffsetDts",
                        value: function() {
                            return this.mse.getCurrentSeiOffsetDts()
                        }
                    }, {
                        key: "getDurationTime",
                        value: function() {
                            return Math.floor(this.playlist && this.playlist.totalDuration ? this.playlist.totalDuration : 0)
                        }
                    }, {
                        key: "getAnticodeHandler",
                        value: function() {
                            return this.anticode
                        }
                    }, {
                        key: "updateFlvConfig",
                        value: function() {
                            this.mse && this.mse.setJitter(M.hlsJitCfg[0], M.hlsJitCfg[1], M.hlsJitCfg[2])
                        }
                    }, {
                        key: "updateLiveVodUrl",
                        value: function(t, e) {
                            e !== this.cdnName ? this.eventEmitter.trigger(y.PLAYBACK_DIF_CDN) : this.playlist.updateLiveVodUrl(t)
                        }
                    }, {
                        key: "setMuted",
                        value: function(t) {
                            this.mse && this.mse.setMuted(t)
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.mse ? this.mse.getMuted() : -1
                        }
                    }, {
                        key: "reconnectLive",
                        value: function() {
                            E.a.log("HlsPlayer.reconnectLive"),
                            this.isLive ? (this.url,
                            this.isLive,
                            this.destroy(),
                            this.reset(),
                            this.start(this.info)) : this.loadFragment()
                        }
                    }, {
                        key: "setTargetDuration",
                        value: function(t) {
                            this.targetDuration = t * this.config.minFragBufferNum
                        }
                    }, {
                        key: "loadFragment",
                        value: function() {
                            var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                            if (!this.isLoading && null !== this.playlist.currDetails && (this.hlsSeek.check(),
                            this.started)) {
                                var e = void 0;
                                if (0 == this.seekTime) {
                                    var i = this.targetDuration > this.config.maxBufferLength ? this.config.maxBufferLength : this.targetDuration < this.config.minBufferLength ? this.config.minBufferLength : this.targetDuration
                                      , s = this.mse.getPlayVideo();
                                    if ((e = this.bufferedInfo(s.currentTime, s.buffered).len) >= i)
                                        return
                                }
                                var a = t ? this.playlist.getCurrentFrag() : this.playlist.getNextFrag();
                                if (a) {
                                    var r = this.config
                                      , n = r.bs2Delay + this.targetDuration / 3 * 1e3
                                      , o = a.url;
                                    0 == this.firstFragLoadTs && (this.firstFragLoadTs = F.a.now()),
                                    this.isLoading = !0,
                                    this.releaseLoader();
                                    var u = new this._loaderClz(r);
                                    this.fragLoader = u,
                                    a.byteRangeEndOffset && (u.fromByte = a.byteRangeStartOffset,
                                    u.toByte = a.byteRangeEndOffset - 1),
                                    1 == localStorage._printFragSn && E.a.log("HlsPlayer.loadFragment sn=" + a.sn, o),
                                    this.fragStartTs = F.a.now(),
                                    this.fragSize = 0,
                                    this.stat.addComp(De, Ve, 1),
                                    u.loadBuffer(o, this.loadOpen.bind(this), this.loadChunk.bind(this), this.loadSuccess.bind(this), this.loadError.bind(this), this.loadTimeout.bind(this), n, r.fragLoadingMaxRetry, r.fragLoadingRetryDelay)
                                } else if (null != e && e <= 1) {
                                    if (E.a.log("HlsPlayer.loadFragment ANCHOR_STOP bufferedLen=" + e.toFixed(2)),
                                    !this.isLive) {
                                        var h = this.mse.getPlayVideo()
                                          , l = h.currentTime
                                          , c = this.playlist && this.playlist.totalDuration ? this.playlist.totalDuration : 0;
                                        c - l - e <= 2 && (2 === Number(this.liveType) ? (this.stop(),
                                        this.onAnchorStop()) : (h.currentTime = c,
                                        this.started = !1,
                                        this.eventEmitter.trigger("M3U8_PLAY_ENDED")))
                                    }
                                } else if (this.seekTime > 0)
                                    if (E.a.warn("HlsPlayer.seek out of range."),
                                    this.isLive)
                                        this.stop(),
                                        this.onAnchorStop();
                                    else {
                                        var d = this.mse.getPlayVideo().currentTime
                                          , f = this.getDurationTime();
                                        f - d <= 2 && this.seek(f)
                                    }
                            }
                        }
                    }, {
                        key: "loadOpen",
                        value: function() {
                            this.fragOpenTs = F.a.now();
                            var t = this.fragOpenTs - this.fragStartTs;
                            t < 5e3 && this.playStat.tsOpens.push(t)
                        }
                    }, {
                        key: "loadChunk",
                        value: function(t) {
                            this.pushData(t)
                        }
                    }, {
                        key: "loadSuccess",
                        value: function(t) {
                            this.isLoading = !1,
                            this.pushData(t);
                            var e = F.a.now() - this.fragOpenTs;
                            e < 1e4 && (this.playStat.tsLoadeds.push(e),
                            this.playStat.tsSpeeds.push(this.fragSize / e),
                            this.playStat.tsSizes.push(this.fragSize)),
                            this.stat.addComp(De, He, 1),
                            this.fragSize = 0
                        }
                    }, {
                        key: "pushData",
                        value: function(t) {
                            if (t) {
                                this.exceptionStat.setStat(Vt.HAS_DATA, 1),
                                this.avgSpeed.addCur(t.byteLength),
                                this.fragSize += t.byteLength,
                                this.stat.addCore(Zt, t.byteLength);
                                var e = this.playlist.currLevel
                                  , i = this.playlist.currFrag
                                  , s = this.playlist.lastFrag
                                  , a = e.details.totalduration;
                                0 == this.firstFragLoadedTs && (this.firstFragLoadedTs = F.a.now(),
                                this.firstFragSize = t.byteLength / 1024 | 0);
                                var r = i.discontinuity;
                                this.curAppendFrag && this.curAppendFrag.sn === i.sn ? r = !1 : this.curAppendFrag && this.curAppendFrag.sn !== i.sn && (this.curAppendFrag = i),
                                this.curAppendFrag || (this.curAppendFrag = i),
                                this.mse.appendTs({
                                    data: t,
                                    audioCodec: e.audioCodec,
                                    videoCodec: e.videoCodec,
                                    timeOffset: i.start,
                                    duration: a,
                                    discontinuity: r,
                                    _discontinuity: i.seeking && s && i.discontinuityCnt !== s.discontinuityCnt,
                                    level: i.level,
                                    sn: i.sn,
                                    seeking: i.seeking,
                                    hlsDT: i.hlsDT,
                                    tsDT: i.tsDT
                                }),
                                i && i.seeking && (i.seeking = !1,
                                this.firstPlay && (this.firstPlay = !1,
                                this.mse.seek(this.seekTime),
                                this.onVideoSeek(this.seekTime),
                                this.play()),
                                this.seekTime = 0),
                                ls.has(this.onCheckTimer, this) || (ls.add(this.onCheckTimer, this, 1e3),
                                ls.add(this.onCheckFastTimer, this, 100)),
                                this.setLoadStatus(D.LoadVideoTimeoutReason.HLS_LOADFRAMENT_SUCCESS)
                            }
                        }
                    }, {
                        key: "loadError",
                        value: function(t) {
                            var e = t.code
                              , i = t.currentTarget;
                            this.stat.addComp(De, Ge, 1),
                            E.a.warn("load fragment error:".concat(e || i.status)),
                            this.isLoading = !1,
                            this.config.autoReconnect && this.reconnectLive(),
                            this.setLoadStatus(D.LoadVideoTimeoutReason.HLS_LOADFRAMENT_ERROR)
                        }
                    }, {
                        key: "loadTimeout",
                        value: function(t) {
                            this.stat.addComp(De, je, 1),
                            E.a.warn("load fragment timeout", t),
                            this.isLoading = !1,
                            this.config.autoReconnect && this.reconnectLive()
                        }
                    }, {
                        key: "bufferedInfo",
                        value: function(t, e) {
                            var i, s, a, r, n, o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .3, u = [], h = [];
                            for (n = 0; n < e.length; n++)
                                u.push({
                                    start: e.start(n),
                                    end: e.end(n)
                                });
                            for (u.sort((function(t, e) {
                                return t.start - e.start || e.end - t.end
                            }
                            )),
                            n = 0; n < u.length; n++) {
                                var l = h.length;
                                if (l) {
                                    var c = h[l - 1].end;
                                    u[n].start - c < o ? u[n].end > c && (h[l - 1].end = u[n].end) : h.push(u[n])
                                } else
                                    h.push(u[n])
                            }
                            for (n = 0,
                            i = 0,
                            s = a = t; n < h.length; n++) {
                                var d = h[n].start
                                  , f = h[n].end;
                                if (t + o >= d && t < f)
                                    s = d,
                                    i = (a = f) - t;
                                else if (t + o < d) {
                                    r = d;
                                    break
                                }
                            }
                            return {
                                len: i,
                                start: s,
                                end: a,
                                nextStart: r
                            }
                        }
                    }, {
                        key: "checkCatonError",
                        value: function() {
                            if (this.mse && this.mse.getBufferLen && this.mse.getBufferLen() > 8e3 && !this.mse.video.paused && Math.floor(this.mse.getCurrentTime() / 1e3) < 5) {
                                if (Math.floor(this.lastPlayTs) == Math.floor(this.mse.getCurrentTime() / 1e3) && this.pauseInBufferFullTimes++,
                                this.playTriggered)
                                    return;
                                if (this.pauseInBufferFullTimes >= 5) {
                                    var t = this.playlist.getNearFragStart(this.lastPlayTs + 1);
                                    this.seek(t),
                                    this.pauseInBufferFullTimes = 0
                                }
                            }
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            if (this.anticode.onCheckTimer(t, e),
                            this.avgSpeed.calculate(),
                            this.started && this.mse && !this.needReset && (this.loadFragment(),
                            this.mse && !this.mse.userPaused)) {
                                if (this.mse && this.mse.onCheckTimer(t, e),
                                this.playlist && this.playlist.onCheckTimer(e),
                                this.playTs > 0) {
                                    var i = t - this.pauseTs;
                                    this.playStat && (this.pauseTs > 0 && i > 200 && !this.skipStatForSeek && 0 == this.pauseCnt && this.playStat.setPause(),
                                    this.pauseCnt > 0 && (this.pauseCnt = 0,
                                    this.playStat.setPause()),
                                    e % 20 == 0 && this.playStat.report()),
                                    this.pauseTs > 0 && i > 5e3 && (E.a.warn("HlsPlayer.onCheckTimer pauseTime=".concat(i, ", bufferLen=").concat(this.getBufferLen())),
                                    this.isLive || (this.triggerH5PlayError(),
                                    this.pauseTs = 0))
                                }
                                this.checkCatonError(),
                                this.eventEmitter.trigger(y.PLAY_TIME_STATUS, {
                                    current: this.getCurrentTime(),
                                    total: this.getDurationTime()
                                }),
                                this.eventEmitter.trigger(y.PLAY_FRAME_BUFFER, {
                                    frameStorage: this.mse && this.mse.getFrameReadyed(),
                                    jitterBuffer: this.mse && this.mse.getBufferLen()
                                })
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            if (this.needReset)
                                return 0 === this.resetPlayTs && (this.resetPlayTs = t + this.mse.getBufferLen() - 500),
                                void ((this.mse && this.mse.getBufferLen() < 500 || t > this.resetPlayTs) && (this.reloadInError(),
                                this.needReset = !1,
                                this.resetPlayTs = 0));
                            if (this.started && this.mse && !this.mse.userPaused) {
                                this.mse && this.mse.onCheckFastTimer(t, e);
                                var i = t - this.pauseTs;
                                if (this.info && 9 === this.info.type) {
                                    var s = this.getBufferLen();
                                    if (this.pauseTs > 0 && i >= 1e3 && s > 2e3) {
                                        var a = this.mse.video.video;
                                        a.currentTime += 1,
                                        E.a.log("HlsPlayer.onCheckFastTimer.playback pauseTime=".concat(i, ", currentTime + 1, currentTime=").concat(a.currentTime)),
                                        this.play()
                                    }
                                }
                            }
                        }
                    }, {
                        key: "updateStatus",
                        value: function(t) {
                            this.videoStatus !== t && (this.videoStatus = t,
                            this.eventEmitter.trigger(y.PLAY_STATUS, {
                                status: t
                            }))
                        }
                    }, {
                        key: "onStartVideo",
                        value: function() {
                            this.loadStartTs = F.a.now()
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(t, e, i, s) {
                            var a = F.a.now();
                            if (this.playTs = a,
                            this.hasVideo = s,
                            0 !== this.startTs) {
                                var r = a - this.startTs
                                  , n = this.playlist.manifestLoadedTs - this.startTs
                                  , o = this.firstFragLoadTs - this.playlist.manifestLoadedTs
                                  , u = this.firstFragLoadedTs - this.firstFragLoadTs
                                  , h = this.UIStartCost > 0 ? r + this.UIStartCost : 0
                                  , l = 0;
                                this.startTimeStamp > 1 ? l = r + this.businessStartCost : 1 === this.startTimeStamp && (l = a - this.loadStartTs),
                                this.tsdb.sendHlsTime(this._loaderType, r, n, o, u, this.firstFragSize, l, h),
                                E.a.log("%cHlsPlayer.onPlayVideo loadTime=" + r, "color:#A23400;background:#FFF5C2"),
                                this.startTs = 0
                            }
                            this.eventEmitter.trigger(y.VIDEO_PLAY, {
                                video: t,
                                width: e,
                                height: i
                            }),
                            !this.pausedByBrowser && this.updateStatus(g),
                            this.seeking = !1,
                            this.skipStatForSeek = !1,
                            this.playTriggered = !0
                        }
                    }, {
                        key: "onVideoStop",
                        value: function(t, e) {
                            E.a.log("HlsPlayer.onVideoStop hasVideo=" + e),
                            this.hasVideo = !1,
                            e && (this.updateStatus(S),
                            this.eventEmitter.trigger(y.VIDEO_STOP, {
                                video: t
                            }))
                        }
                    }, {
                        key: "onAnchorStop",
                        value: function() {
                            var t = this.mse ? this.mse.getPlayVideo() : null;
                            this.eventEmitter.trigger(y.ANCHOR_STOP, {
                                video: t
                            })
                        }
                    }, {
                        key: "onLoadM3u8Error",
                        value: function() {
                            this.eventEmitter.trigger(y.HLS_URL_UNAVAILABLE)
                        }
                    }, {
                        key: "onLoadManifestTimeout",
                        value: function() {
                            this.eventEmitter.trigger(y.HLS_MAINFEST_LOAD_TIMEOUT)
                        }
                    }, {
                        key: "onConnectManifestTimeout",
                        value: function() {
                            this.eventEmitter.trigger(y.HLS_URL_LOAD_TIMEOUT)
                        }
                    }, {
                        key: "onPlayerError",
                        value: function(t) {
                            this.videoElement
                        }
                    }, {
                        key: "triggerH5PlayError",
                        value: function() {
                            if (9 !== this.info.type) {
                                var t = this.getCurrentTime();
                                E.a.log("HlsPlayer.triggerH5PlayError seekTime = ".concat(t)),
                                this.info && (this.eventEmitter.trigger(y.PAUSE_5S_RETRY),
                                this.info.seekTime = t,
                                this.start(this.info))
                            }
                        }
                    }, {
                        key: "onErrorEvent",
                        value: function(t) {
                            var e = this.mse ? this.mse.getPlayVideo() : null;
                            this.eventEmitter.trigger(y.H5_PLAYER_ERROR, {
                                video: e,
                                code: t.type,
                                msg: "播放错误"
                            }),
                            this.setLoadStatus(D.LoadVideoTimeoutReason.HLS_PLAY_ERROR)
                        }
                    }, {
                        key: "onPlayPause",
                        value: function(t, e) {
                            if (e && (this.pauseTs = t,
                            this.updateStatus(T),
                            this.playlist && !this.isLive)) {
                                var i = 1e3 * this.playlist.totalDuration
                                  , s = this.mse ? this.mse.getCurrentTime() : 0;
                                i > 0 && s > 0 && Math.abs(i - s) < 1e3 && this.isLive && (E.a.warn("HlsPlayer detect anchor stop."),
                                this.onAnchorStop(),
                                this.stop()),
                                this.startSendPauseTimer()
                            }
                        }
                    }, {
                        key: "onPlayResume",
                        value: function(t, e) {
                            if (this.pauseTs > 0) {
                                var i = t - this.pauseTs;
                                i > 200 && !this.skipStatForSeek && (E.a.warn("HlsPlayer.onPlayResume pauseTime=" + i),
                                this.pauseCnt++,
                                this.stat.addCore(he, 1),
                                this.stat.addCore(le, i),
                                this.eventEmitter.trigger(y.VIDEO_BAD_QUALITY)),
                                this.pauseTs = 0
                            }
                            this.skipStatForSeek = this.seeking,
                            e && this.updateStatus(g)
                        }
                    }, {
                        key: "onVideoSeek",
                        value: function(t) {
                            this.seeking = !1;
                            var e = this.mse ? this.mse.getPlayVideo() : null;
                            this.eventEmitter.trigger(y.VIDEO_SEEK, {
                                video: e,
                                currentTime: t
                            })
                        }
                    }, {
                        key: "onPauseByBrowser",
                        value: function() {
                            window && (E.a.warn("HlsPlayer.onPauseBrowser: video was paused by browser, define click listener"),
                            window.removeEventListener("click", this._clickEventBind, !0),
                            window.addEventListener("click", this._clickEventBind, !0),
                            this.pausedByBrowser = !0)
                        }
                    }, {
                        key: "_clickEvent",
                        value: function() {
                            document && (E.a.log("HlsPlayer._clickEvent: click for play a temp video"),
                            document.createElement("video").play(),
                            this.pausedByBrowser = !1,
                            window && window.removeEventListener("click", this._clickEventBind, !0))
                        }
                    }, {
                        key: "startSendPauseTimer",
                        value: function() {
                            this.stopSendPauseTimer(),
                            this.sendPauseTimeout = setTimeout(this.sendPauseEvent.bind(this), 200)
                        }
                    }, {
                        key: "stopSendPauseTimer",
                        value: function() {
                            clearTimeout(this.sendPauseTimeout)
                        }
                    }, {
                        key: "sendPauseEvent",
                        value: function() {
                            this.videoStatus !== g && this.eventEmitter.trigger(y.PLAY_CARTON)
                        }
                    }, {
                        key: "isPlaying",
                        get: function() {
                            return this.videoStatus !== S
                        }
                    }, {
                        key: "hasPicture",
                        get: function() {
                            return this.isPlaying && 0 !== this.mse.getCurrentTime()
                        }
                    }, {
                        key: "getCostTimes",
                        value: function() {
                            return this.playlist ? [this.playlist.manifestLoadedTs > 0 ? this.playlist.manifestLoadedTs - this.startTs : 0, this.firstFragLoadedTs > 0 ? this.firstFragLoadTs - this.playlist.manifestLoadedTs : 0, this.firstFragLoadedTs > 0 ? this.firstFragLoadedTs - this.firstFragLoadTs : 0] : [0, 0, 0]
                        }
                    }, {
                        key: "switchLevel",
                        value: function(t) {
                            var e = this.playlist.levels
                              , i = t.curBitRate;
                            if (e.length > 0 && this.playlist.isMasterPlayList) {
                                for (var s = 0; s < e.length; s++)
                                    if (e[s].bitrate === i && this.playlist.currLevel.bitrate != i) {
                                        this.playlist.currLevel.bitrate = i,
                                        this.playlist.currLevelId = s,
                                        this.playlist.currLevel.url = e[s].url,
                                        this.mse.parser.switchLevel(),
                                        this.play();
                                        break
                                    }
                            } else
                                this.playlist.currLevel.url = t.url,
                                this.playlist.currLevel.bitrate = i,
                                this.mse.parser.switchLevel(),
                                this.play()
                        }
                    }]),
                    t
                }()
                  , ro = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.comDim = new v.default,
                        this.coreDim = new v.default,
                        this.actDim = new v.default,
                        this.extDim = new v.default,
                        this.comFormatMap = new v.default,
                        this.coreMap = new v.default,
                        this.compMap = new v.default,
                        this.heart_type = H
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.comDim.clear(),
                            this.coreDim.clear(),
                            this.actDim.clear(),
                            this.extDim.clear(),
                            this.coreMap.clear(),
                            this.compMap.clear(),
                            this.heart_type = H
                        }
                    }, {
                        key: "createAct",
                        value: function(t, e) {
                            return this._createAct(t, e)
                        }
                    }, {
                        key: "createActs",
                        value: function(t) {
                            var e = [];
                            if (t)
                                for (var i = 0; i < t.length; i++) {
                                    var s = t[i]
                                      , a = this._createAct(s.type, s.params);
                                    e.push(a)
                                }
                            return e
                        }
                    }, {
                        key: "_createAct",
                        value: function(t, e) {
                            var i = {
                                sMetricName: fi,
                                vField: {},
                                vDimension: {}
                            };
                            if (i.vDimension[pi] = t,
                            this._fillFromMap(i.vDimension, this.comDim),
                            this._fillFromMap(i.vDimension, this.actDim),
                            e) {
                                var s = 0;
                                if (e.hasOwnProperty(U)) {
                                    var a = e[U];
                                    for (s = 0; s < a.length; s++)
                                        i.vField[U + (s + 1)] = a[s]
                                }
                                if (e.hasOwnProperty(N)) {
                                    var r = e.str;
                                    for (s = 0; s < r.length; s++)
                                        i.vDimension[N + (s + 1)] = r[s]
                                }
                                e.hasOwnProperty("dim") && (0,
                                k.default)(i.vDimension, e.dim)
                            }
                            return i.vDimension.appid = L.appid,
                            this.actDim.clear(),
                            i
                        }
                    }, {
                        key: "fill",
                        value: function(t, e) {
                            e ? (this.heart_type = j,
                            this._fill(t),
                            this.heart_type = H) : this._fill(t)
                        }
                    }, {
                        key: "_fill",
                        value: function(t) {
                            if (0 != this.coreMap.size || 0 != this.compMap.size) {
                                var e = {
                                    sMetricName: Qt,
                                    vField: {},
                                    vDimension: {},
                                    vExLog: {}
                                };
                                this.coreDim.set(Rt, this.heart_type),
                                this._fillFromMap(e.vDimension, this.comDim),
                                this._fillFromMap(e.vDimension, this.coreDim),
                                this._fillFromMap(e.vExLog, this.extDim),
                                this._fillFromMap(e.vField, this.coreMap),
                                this._fillComp(e.vDimension),
                                this.coreDim.clear(),
                                this.extDim.clear(),
                                this.coreMap.clear(),
                                this.compMap.clear(),
                                this.heart_type == H && (this.heart_type = G),
                                e.vDimension.appid = L.appid,
                                t.push(e)
                            }
                        }
                    }, {
                        key: "_fillComp",
                        value: function(t) {
                            var e, i = Object(qi.a)(this.compMap.keys());
                            try {
                                for (i.s(); !(e = i.n()).done; ) {
                                    var s, a = e.value, r = this._getCompMapFormat(a), n = r.get("ref") || ",", o = r.get("split") || ";", u = this.compMap.get(a), h = "", l = Object(qi.a)(u.keys());
                                    try {
                                        for (l.s(); !(s = l.n()).done; ) {
                                            var c = s.value;
                                            h.length > 0 && (h += o),
                                            h += c + n + u.get(c)
                                        }
                                    } catch (t) {
                                        l.e(t)
                                    } finally {
                                        l.f()
                                    }
                                    t[a] = h
                                }
                            } catch (t) {
                                i.e(t)
                            } finally {
                                i.f()
                            }
                        }
                    }, {
                        key: "_fillFromMap",
                        value: function(t, e) {
                            var i, s = Object(qi.a)(e.keys());
                            try {
                                for (s.s(); !(i = s.n()).done; ) {
                                    var a = i.value;
                                    t[a] = e.get(a)
                                }
                            } catch (t) {
                                s.e(t)
                            } finally {
                                s.f()
                            }
                        }
                    }, {
                        key: "setComDim",
                        value: function(t, e) {
                            this.comDim.set(t, e)
                        }
                    }, {
                        key: "setCoreDim",
                        value: function(t, e) {
                            this.coreDim.set(t, e)
                        }
                    }, {
                        key: "setActDim",
                        value: function(t, e) {
                            this.actDim.set(t, e)
                        }
                    }, {
                        key: "setExtDim",
                        value: function(t, e) {
                            this.extDim.set(t, e)
                        }
                    }, {
                        key: "delDim",
                        value: function(t) {
                            this.comDim.has(t) ? this.comDim.delete(t) : this.coreDim.has(t) ? this.coreDim.delete(t) : this.actDim.has(t) && this.actDim.delete(t)
                        }
                    }, {
                        key: "setCore",
                        value: function(t, e) {
                            this.coreMap.set(t, e)
                        }
                    }, {
                        key: "addCore",
                        value: function(t, e) {
                            this._addValue(this.coreMap, t, e)
                        }
                    }, {
                        key: "setComp",
                        value: function(t, e, i) {
                            this._getCompMap(t).set(e, i)
                        }
                    }, {
                        key: "addComp",
                        value: function(t, e, i) {
                            var s = this._getCompMap(t);
                            this._addValue(s, e, i)
                        }
                    }, {
                        key: "setCompFormat",
                        value: function(t, e, i) {
                            var s = this._getCompMapFormat(t);
                            s.set("ref", e),
                            s.set("split", i)
                        }
                    }, {
                        key: "_getCompMapFormat",
                        value: function(t) {
                            if (this.comFormatMap.has(t))
                                return this.comFormatMap.get(t);
                            var e = new v.default;
                            return this.comFormatMap.set(t, e),
                            e
                        }
                    }, {
                        key: "_getCompMap",
                        value: function(t) {
                            if (this.compMap.has(t))
                                return this.compMap.get(t);
                            var e = new v.default;
                            return this.compMap.set(t, e),
                            e
                        }
                    }, {
                        key: "_addValue",
                        value: function(t, e, i) {
                            if (t.has(e)) {
                                var s = t.get(e);
                                t.set(e, s + i)
                            } else
                                t.set(e, i)
                        }
                    }]),
                    t
                }()
                  , no = [P.H264_SEI_PLAY, P.AUDIO_SOUND, P.SIGNAL_DATA, P.UPDATE_INTERSITY, P.SIGNAL_HEART, P.METADATA, P.TRANS_END, P.PLAY_DOWNLINK_INFO, P.PLAY_FRAME_BUFFER, P.PLAY_TIME_STATUS, P.PLAYBACK_UPDATE, P.PLAYBACK_M3U8_UPDATED, "VIDEO_TIMEUPDATE", "VIDEO_PROGRESS"]
                  , oo = i(26)
                  , uo = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i(t) {
                        var s, a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 100;
                        return Object(p.a)(this, i),
                        (s = e.call(this, a)).duration = t,
                        s.lastTs = 0,
                        s
                    }
                    return Object(m.a)(i, [{
                        key: "addCur",
                        value: function(t, e) {
                            Qi(Object(Ji.a)(i.prototype), "addCur", this).call(this, t, e),
                            this.samples.addCur(t),
                            this.calculate(e)
                        }
                    }, {
                        key: "calculate",
                        value: function(t) {
                            0 === this.lastTs ? this.lastTs = t : t - this.lastTs >= this.duration && (this.lastTs = t,
                            this.samples.calculate())
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            this.calculate(t)
                        }
                    }]),
                    i
                }($s)
                  , ho = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.recvTotalSample = new uo(1e3),
                        this.recvLanSample = new uo(1e3),
                        this.realFlacSample = new ta
                    }
                    return Object(m.a)(t, [{
                        key: "start",
                        value: function() {
                            ls.add(this.onCheckFastTimer, this, 100)
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            ls.remove(this.onCheckFastTimer, this)
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(t, e) {
                            this.recvTotalSample.onCheckFastTimer(t, e),
                            this.recvLanSample.onCheckFastTimer(t, e)
                        }
                    }, {
                        key: "addTotalSample",
                        value: function(t) {
                            this.recvTotalSample.addCur(t, F.a.now())
                        }
                    }, {
                        key: "recordStat",
                        value: function(t, e) {
                            this._recordStat(t, Re, this.recvTotalSample, !0, e),
                            this._recordStat(t, Le, this.recvLanSample, !0, e),
                            this._recordStat(t, Ae, this.realFlacSample)
                        }
                    }, {
                        key: "_recordStat",
                        value: function(t, e, i, s, a) {
                            if (i.hasSample) {
                                var r = i.getResult();
                                "" !== r && (i.reset(),
                                s ? t.setCoreDim(e, "type:".concat(a ? 2 : t.heart_type, ",").concat(r)) : t.setCoreDim(e, r))
                            }
                        }
                    }, {
                        key: "addLanSample",
                        value: function(t) {
                            this.recvLanSample.addCur(t, F.a.now())
                        }
                    }]),
                    t
                }()
                  , lo = function(t) {
                    Object(Zi.a)(i, t);
                    var e = Object($i.a)(i);
                    function i(t, s) {
                        var a;
                        return Object(p.a)(this, i),
                        (a = e.call(this, t, s)).playerParams = s,
                        a.player = null,
                        a.updating = !1,
                        a.seeking = !1,
                        a.waitSeekTime = 0,
                        a.onSeekBind = a.onSeek.bind(Object(Xi.a)(a)),
                        a.onM3u8UpdatedBind = a.onM3u8Updated.bind(Object(Xi.a)(a)),
                        a.m3u8UpdateTime = 30,
                        a
                    }
                    return Object(m.a)(i, [{
                        key: "start",
                        value: function(t) {
                            t.isLive = !1,
                            Qi(Object(Ji.a)(i.prototype), "start", this).call(this, t),
                            t.m3u8UpdateTime && (this.m3u8UpdateTime = Number(t.m3u8UpdateTime)),
                            this.seeking = !0,
                            this.player = new ao(this.eventEmitter,this.playerParams),
                            this.player.start(t),
                            ls.add(this.onCheckTimer, this, 1e3),
                            this.eventEmitter.on(y.VIDEO_SEEK, this.onSeekBind),
                            this.eventEmitter.on(y.PLAYBACK_M3U8_UPDATED, this.onM3u8UpdatedBind)
                        }
                    }, {
                        key: "seek",
                        value: function(t) {
                            this.player && this.player.playlist && (this.seeking = !0,
                            this.player.playlist.totalDuration - t < 30 ? (this.waitSeekTime = t,
                            this.eventEmitter.trigger(y.NEED_UPDATE_M3U8)) : (this.waitSeekTime = 0,
                            this.player.seek(t)))
                        }
                    }, {
                        key: "onSeek",
                        value: function(t, e) {
                            this.seeking = !1
                        }
                    }, {
                        key: "onM3u8Updated",
                        value: function(t, e) {
                            E.a.log("PlaybackPlayer.onM3u8Updated totalDuration=".concat(e.totalDuration)),
                            this.waitSeekTime && (this.player.seek(this.waitSeekTime),
                            this.waitSeekTime = 0),
                            this.updating = !1
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.player && (this.player.stop(),
                            this.player = null),
                            this.seeking = !1,
                            ls.remove(this.onCheckTimer, this),
                            this.eventEmitter.off(y.VIDEO_SEEK, this.onSeekBind),
                            this.eventEmitter.off(y.PLAYBACK_M3U8_UPDATED, this.onM3u8UpdatedBind)
                        }
                    }, {
                        key: "setVolume",
                        value: function(t) {
                            this.player && this.player.setVolume(t)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            !this.updating && this.needUpdate() && (this.updating = !0,
                            this.eventEmitter.trigger(y.NEED_UPDATE_M3U8)),
                            !this.seeking && this.player && this.player.mse && this.player.playlist && this.eventEmitter.trigger(y.PLAYBACK_UPDATE, {
                                currentTime: this.player.mse.getCurrentTime(),
                                totalDuration: this.player.playlist.totalDuration
                            })
                        }
                    }, {
                        key: "needUpdate",
                        value: function() {
                            if (this.player && this.player.mse && this.player.playlist) {
                                var t = this.player.mse.getCurrentTime() / 1e3;
                                if (t > 0) {
                                    var e = this.player.playlist.totalDuration;
                                    if (e > 0)
                                        return e - t < this.m3u8UpdateTime
                                }
                            }
                            return !1
                        }
                    }, {
                        key: "updateLiveVodUrl",
                        value: function(t) {
                            this.player && this.player.updateLiveVodUrl(t)
                        }
                    }, {
                        key: "getDurationTime",
                        value: function() {
                            return this.player ? this.player.getDurationTime() : 0
                        }
                    }]),
                    i
                }(Kn)
                  , co = function() {
                    function t(e, i, s) {
                        Object(p.a)(this, t),
                        this.tsdb = e,
                        this.stat = i,
                        this.autoMonitor = null,
                        this.recSysStat = null,
                        this.autoForce = null,
                        this.lineType = -1,
                        this.curBitrate = -1,
                        this.isAuto = !1,
                        this.handler = s
                    }
                    return Object(m.a)(t, [{
                        key: "init",
                        value: function(t, e, i) {
                            this.autoMonitor = t,
                            this.recSysStat = e,
                            this.autoForce = i
                        }
                    }, {
                        key: "check",
                        value: function(t, e) {
                            if (!isNaN(t.lineType) && !isNaN(t.curBitrate) && -1 !== t.lineType) {
                                if (-1 !== this.lineType) {
                                    var i = null;
                                    if (this.lineType !== t.lineType)
                                        i = this.stat.createAct(vi, {
                                            value: [this.lineType, t.lineType]
                                        });
                                    else {
                                        var s = 1e3 * t.curBitrate
                                          , a = 1e3 * this.curBitrate
                                          , r = this.isAuto ? 1 : 0
                                          , n = 0;
                                        e ? this.curBitrate !== t.curBitrate && (n = 2) : t && 1 == t.pullStreamFrom && (n = 1);
                                        var o = [s, a, r, n, 0, 0, 1, t.bitrateList ? t.bitrateList.length : 0];
                                        1 == n && this.handler && (o[8] = F.a.now() - this.handler.inRoomTimeNow),
                                        1 === r && (this.recSysStat.recordAct(this.stat),
                                        1 === n && (this.autoForce.addForce(),
                                        this.recSysStat.removeItem(1))),
                                        this.autoMonitor.addSwitch(F.a.now(), s, a, n),
                                        i = this.stat.createAct(mi, {
                                            value: o
                                        }),
                                        E.a.log("StatSwitch.reportSwitchBitrate value4=".concat(n, " metric="), i)
                                    }
                                    i && this.tsdb.sendMetrics([i])
                                }
                                this.lineType = t.lineType,
                                this.curBitrate = t.curBitrate,
                                this.isAuto = t.isAuto
                            }
                        }
                    }, {
                        key: "sendSwitchAuto",
                        value: function(t) {
                            t[0] === ya ? this.stat.addComp(ze, Xe, 1) : t[0] === va ? this.stat.addComp(ze, Je, 1) : t[0] === _a && this.stat.addComp(ze, Qe, 1);
                            var e = this.stat.createAct(yi, {
                                value: t
                            });
                            this.tsdb.sendMetrics([e])
                        }
                    }, {
                        key: "sendSwitchCost",
                        value: function(t, e) {
                            this._sendMetric(Ui, t, e)
                        }
                    }, {
                        key: "sendSwitchPts",
                        value: function(t, e) {
                            this._sendMetric(_i, t, e)
                        }
                    }, {
                        key: "_sendMetric",
                        value: function(t, e, i) {
                            var s = this.stat.createAct(t, {
                                value: e,
                                str: i
                            });
                            this.tsdb.sendMetrics([s])
                        }
                    }]),
                    t
                }()
                  , fo = i(17)
                  , po = i.n(fo)
                  , mo = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this.stat = e,
                        this.tsdb = i,
                        this.isP2PUseH265 = !0,
                        this.isFlvUseH265 = !0,
                        this.costUs = 0,
                        this.isCodecSupport = !1,
                        this.isBrowserSupport = !1,
                        this.isCfgSupport = !1
                    }
                    return Object(m.a)(t, [{
                        key: "isSupported",
                        get: function() {
                            return this.isCodecSupport && this.isBrowserSupport && this.isCfgSupport
                        }
                    }, {
                        key: "canPreload",
                        get: function() {
                            return this.isBrowserSupport && this.isCfgSupport
                        }
                    }, {
                        key: "onTurntoH264",
                        value: function(t) {
                            2 === t ? this.isP2PUseH265 = !1 : 1 === t && (this.isFlvUseH265 = !1)
                        }
                    }, {
                        key: "init",
                        value: function(t) {
                            this.isCodecSupport = !1,
                            this.isBrowserSupport = !1,
                            this.isCfgSupport = !1,
                            this._initCodec(t),
                            this._initBrowser(),
                            this._initRandom(t),
                            this._initCfg(),
                            E.a.log("H265Support.init isCodecSupport=".concat(this.isCodecSupport, " isBrowserSupport=").concat(this.isBrowserSupport, " isCfgSupport=").concat(this.isCfgSupport))
                        }
                    }, {
                        key: "_initCodec",
                        value: function(t) {
                            var e = arguments;
                            if (1 == localStorage.open265 && (localStorage.w265LastCost = 0),
                            this.isReport265 || 5 === t.type || (this.tsdb.sendMetrics([this.stat.createAct(ji, {
                                value: [10],
                                str: [R.is64bitSoftware() ? 1 : 2]
                            })]),
                            this.tsdb.sendMetrics([this.stat.createAct(ji, {
                                value: [5],
                                str: [navigator.hardwareConcurrency]
                            })]),
                            E.a.log("HYPlayer.initH265 support hardwareConcurrency hardwareConcurrency=", navigator.hardwareConcurrency),
                            this.isReport265 = !0),
                            this._isSupported(t) && po.a && po.a.getInstance) {
                                var i = {
                                    enableWebH265: 1,
                                    baseCostUs: {
                                        2e3: 32e3,
                                        4e3: 3e4
                                    },
                                    loopCount: 100,
                                    singleThreadBitKbps: [10],
                                    multiThreadBitKbps: [4e3, 2e3, 500],
                                    threadCount: 2,
                                    degrade: 0,
                                    statIntervalMs: 1e3,
                                    fmt: 11,
                                    share: 0,
                                    wasmLoad: 500,
                                    core: {
                                        2e3: 3,
                                        4e3: 4
                                    },
                                    x86: {
                                        4e3: 1
                                    }
                                }
                                  , s = {};
                                R.is64bitSoftware() || (M.h265Config[3][1][1] = M.h265Config2[0]),
                                1 == Number(M.h265Config2[1]) ? i.x86 = {
                                    4e3: 1
                                } : i.x86 = {
                                    4e3: 0
                                },
                                M.h265Config[0][0].forEach((function(t, e) {
                                    s[t] = M.h265Config[0][1][e]
                                }
                                )),
                                i.baseCostUs = s,
                                i.multiThreadBitKbps = M.h265Config[1];
                                var a = {};
                                M.h265Config[3][0].forEach((function(t, e) {
                                    a[t] = M.h265Config[3][1][e]
                                }
                                )),
                                i.core = a,
                                1 === Number(localStorage._enable4000Bitrate) && (i.multiThreadBitKbps = [4e3, 2e3, 500],
                                i.core = 2),
                                po.a.getInstance().parseConfigs(i);
                                var r = po.a.getInstance().isSupportH265(0 === t.originalBitrate ? 0 : t.curBitrate)
                                  , n = window.screen.height;
                                1 != M.isH265Filter4MCfg[0] || 4e3 != t.curBitrate || R.isGameIdSupport265(M.h265GameIds, t.gameId) ? 1 == M.isH265Filter4MCfg[1] && 4e3 == t.curBitrate && -1 != navigator.userAgent.indexOf("Macintosh") ? (r.isSupport = !1,
                                r.reason = 101) : 1 == M.isH265Filter4MCfg[2] && 4e3 == t.curBitrate && n < (M.isH265Filter4MCfg[3] || 1080) && (r.isSupport = !1,
                                r.reason = 102) : (r.isSupport = !1,
                                r.reason = 100),
                                E.a.log("H265Support.initH265 bitRate", 0 === t.originalBitrate ? 0 : t.curBitrate, r),
                                this.isCodecSupport = r.isSupport,
                                this.costUs = r.costUs,
                                this.tsdb.sendMetrics([this.stat.createAct(ji, {
                                    value: [2],
                                    str: [r.reason]
                                })]),
                                po.a.getInstance().setLogCallback((function() {
                                    var t = ["H265 render setLogCallback"].concat(Array.apply(null, e));
                                    E.a.log.apply(E.a, t)
                                }
                                ))
                            }
                        }
                    }, {
                        key: "_isSupported",
                        value: function(t) {
                            var e;
                            return e = t.iIsHEVCSupport > 0 && t.iHEVCBitRate >= 0 || this._isH265(t.iCodecType) && 0 === t.iBitRate,
                            1 === t.type ? this.isFlvUseH265 && e : 2 === t.type && this.isP2PUseH265 && e
                        }
                    }, {
                        key: "_isH265",
                        value: function(t) {
                            return 1 === t || 4 === t || 6 === t || 8 === t
                        }
                    }, {
                        key: "_initBrowser",
                        value: function() {
                            var t = O.a.version.major
                              , e = !1;
                            O.a.chrome && t >= M.h265Config[2] && (e = !0),
                            1 === Number(localStorage._enableBrowser) && (e = !0),
                            this.isBrowserSupport = e
                        }
                    }, {
                        key: "_initRandom",
                        value: function(t) {
                            var e = this._getRandomUse(t);
                            this.isCodecSupport && (e ? this.stat.setComDim("backup_field2", 1) : (this.isCodecSupport = !1,
                            this.stat.setComDim("backup_field2", 2))),
                            t.randomH265 = e
                        }
                    }, {
                        key: "_getRandomUse",
                        value: function(t) {
                            var e = localStorage.h265PresentUid
                              , i = t.presenterUid
                              , s = !0;
                            if (M.h265BlackUids.forEach((function(t) {
                                i && t.toString() == i.toString() && (s = !1)
                            }
                            )),
                            !s)
                                return !1;
                            localStorage.randomH265Percent && e == i || (localStorage.randomH265Percent = M.randomH265Percent),
                            1 == localStorage.open265 ? localStorage.randomH265Percent = 3e3 : 2 == localStorage.open265 && (localStorage.randomH265Percent = 6e3);
                            var a = Number(localStorage.randomH265Percent);
                            return localStorage.h265PresentUid = t.presenterUid,
                            a < M.h265PercentConfig
                        }
                    }, {
                        key: "_initCfg",
                        value: function() {
                            this.isCfgSupport = 1 === Number(M.isConfigSupportH265)
                        }
                    }]),
                    t
                }()
                  , yo = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this._stat = e,
                        this._tsdb = i,
                        this._onMessageBind = this._onMessage.bind(this),
                        this._onErrorBind = this._onError.bind(this),
                        this._startTs = 0,
                        this._readyTs = 0,
                        this._isReady = !1,
                        this._isTimeout = !1,
                        this._isError = !1,
                        this._decoder = null,
                        this._callbacks = null,
                        this._onMessageCb = null
                    }
                    return Object(m.a)(t, [{
                        key: "onMessageCb",
                        set: function(t) {
                            this._onMessageCb = t
                        }
                    }, {
                        key: "decoder",
                        get: function() {
                            return this._decoder
                        }
                    }, {
                        key: "isReady",
                        get: function() {
                            return this._isReady
                        }
                    }, {
                        key: "terminate",
                        value: function() {
                            E.a.log("H265Decoder.terminate"),
                            this._destroyDecoder(),
                            ls.remove(this._onTimeout, this),
                            this._callbacks = null,
                            this._onMessageCb = null,
                            this._isReady = !1,
                            this._startTs = 0,
                            this._readyTs = 0
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            E.a.log("H265Decoder.destroy"),
                            this._stat = null,
                            this._tsdb = null,
                            this.stopDecoder()
                        }
                    }, {
                        key: "_destroyDecoder",
                        value: function() {
                            if (this._decoder) {
                                this._decoder.onmessage = null,
                                this._decoder.onerror = null,
                                this.stopDecoder();
                                try {
                                    this._decoder.terminate()
                                } catch (t) {
                                    E.a.log("H265Decoder._destroyDecoder", t)
                                }
                                this._decoder = null
                            }
                        }
                    }, {
                        key: "stopDecoder",
                        value: function() {
                            this._decoder && this._decoder.postMessage({
                                t: 6
                            })
                        }
                    }, {
                        key: "load",
                        value: function(t, e) {
                            if (this._callbacks = e,
                            this._decoder)
                                this._callbacks && this._callbacks.ready();
                            else {
                                var i = O.a.chrome && O.a.version.major >= 91;
                                1 == Number(localStorage._unSupportSimd) && (i = !1),
                                E.a.log("H265Decoder.load"),
                                this._startTs = F.a.now();
                                var s = 'importScripts("'.concat(t + (i ? "decoder.worker.simd.js" : "decoder.worker.js"), '")')
                                  , a = new Blob([s],{
                                    type: "application/javascript"
                                })
                                  , r = window.URL.createObjectURL(a)
                                  , n = new Worker(r);
                                n.onmessage = this._onMessageBind,
                                n.onerror = this._onErrorBind,
                                this._decoder = n,
                                ls.once(this._onTimeout, this, 1e3)
                            }
                        }
                    }, {
                        key: "_onMessage",
                        value: function(e) {
                            switch (e.data.t) {
                            case 0:
                                this._decoder.postMessage({
                                    t: 1
                                });
                                break;
                            case 2:
                                E.a.log("H265Decoder._onMessage worker isReady!"),
                                ls.remove(this._onTimeout, this),
                                t.preloaded = !0,
                                this._isReady = !0,
                                this._readyTs = F.a.now();
                                var i = this._readyTs - this._startTs;
                                this._tsdb.sendMetrics([this._stat.createAct(Gi, {
                                    value: [i]
                                })]),
                                this._isError || this._isTimeout || this._callbacks && this._callbacks.ready()
                            }
                            this._onMessageCb && this._onMessageCb(e)
                        }
                    }, {
                        key: "_onError",
                        value: function(t) {
                            E.a.error("H265Decoder._onError", t),
                            this._tsdb.sendMetrics([this._stat.createAct(ji, {
                                value: [1],
                                str: [11]
                            })]),
                            this._destroyDecoder(),
                            ls.remove(this._onTimeout, this),
                            this._readyTs = 0,
                            this._isReady = !1,
                            this._isError = !0,
                            localStorage.h265WorkerError = 1,
                            this._callbacks && this._callbacks.error()
                        }
                    }, {
                        key: "_onTimeout",
                        value: function() {
                            E.a.log("H265Decoder._onTimeout"),
                            this._destroyDecoder(),
                            this._readyTs = 0,
                            this._isTimeout = !0,
                            this._isReady = !1,
                            this._callbacks && this._callbacks.timeout()
                        }
                    }]),
                    t
                }();
                yo.preloaded = !1;
                var vo = yo
                  , _o = i(39).default
                  , go = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this._stat = e,
                        this._tsdb = i,
                        this._support = new mo(e,i),
                        this._decoder = new vo(e,i),
                        this._render = new _o(e,i),
                        this._renderInited = !1,
                        this._rendering = !1
                    }
                    return Object(m.a)(t, [{
                        key: "stop",
                        value: function() {
                            E.a.log("H265Proxy.stop"),
                            this._rendering = !1,
                            this._renderInited = !1,
                            this._decoder.stopDecoder(),
                            this._render && this._render.destroy && this._render.destroy()
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this._render.destroy(),
                            this._support.destroy(),
                            this._decoder.destroy(),
                            this._stat = null,
                            this._tsdb = null,
                            this._render = null,
                            this._support = null,
                            this._decoder = null
                        }
                    }, {
                        key: "initSupport",
                        value: function(t) {
                            this._support.init(t)
                        }
                    }, {
                        key: "loadDecoder",
                        value: function(t, e) {
                            this._decoder.load(t, e)
                        }
                    }, {
                        key: "initRender",
                        value: function(t) {
                            this.isSupported && (E.a.log("H265Proxy.initRender isSupported=".concat(this._support.isSupported, " isReady=").concat(this._decoder.isReady)),
                            this._rendering = !1,
                            this._renderInited = !1,
                            this._render.destroy(),
                            this.isReady && (this._renderInited = !0,
                            this._render.attachMse(t)))
                        }
                    }, {
                        key: "terminate",
                        value: function() {
                            this._decoder.terminate()
                        }
                    }, {
                        key: "containerResize",
                        value: function(t) {
                            this.rendering && this._render.containerResize(t)
                        }
                    }, {
                        key: "pushVideoFrame",
                        value: function(t, e) {
                            this._rendering = !0,
                            this._render && this._render.pushVideoFrame(t, e)
                        }
                    }, {
                        key: "onTurnToH264",
                        value: function(t) {
                            this._rendering = !1,
                            this._renderInited = !1,
                            this._support.onTurntoH264(t)
                        }
                    }, {
                        key: "checkUrl",
                        value: function(t) {
                            this.isReady && -1 === t.url.indexOf("codec=265") && (t.url += "&codec=265")
                        }
                    }, {
                        key: "on265StartCodeError",
                        value: function(t) {
                            this._render && this._render.handlerError(t)
                        }
                    }, {
                        key: "reportDecodeRenderTime",
                        value: function(t, e) {
                            this._render && this._render.reportDecodeRenderTime(t, e)
                        }
                    }, {
                        key: "getStats",
                        value: function() {
                            return this._render.getStats()
                        }
                    }, {
                        key: "jumpBuffer",
                        value: function(t, e, i, s) {
                            this._rendering && this._render.jumpBuffer(t, e, i, s)
                        }
                    }, {
                        key: "render",
                        get: function() {
                            return this._render
                        }
                    }, {
                        key: "canvas",
                        get: function() {
                            return this._render.canvas
                        }
                    }, {
                        key: "decoder",
                        get: function() {
                            return this._decoder
                        }
                    }, {
                        key: "isSupported",
                        get: function() {
                            return this._support.isSupported
                        }
                    }, {
                        key: "isReady",
                        get: function() {
                            return this._support.isSupported && this._decoder.isReady
                        }
                    }, {
                        key: "needPreload",
                        get: function() {
                            return !vo.preloaded && this._support.canPreload && !this._decoder.isReady
                        }
                    }, {
                        key: "renderInited",
                        get: function() {
                            return this._renderInited
                        }
                    }, {
                        key: "rendering",
                        get: function() {
                            return this._rendering
                        }
                    }]),
                    t
                }()
                  , So = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._buffer = -1
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this._buffer = -1
                        }
                    }, {
                        key: "buffer",
                        get: function() {
                            return this._buffer
                        },
                        set: function(t) {
                            (-1 === this._buffer || t < this._buffer) && (this._buffer = t < 0 ? 0 : t)
                        }
                    }]),
                    t
                }()
                  , To = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._badBuffer = new So
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this._badBuffer.reset()
                        }
                    }, {
                        key: "setItem",
                        value: function(t) {
                            this._badBuffer.buffer = t.badBuffer
                        }
                    }, {
                        key: "setBuffers",
                        value: function(t) {
                            this._badBuffer.buffer = t
                        }
                    }, {
                        key: "badBuffer",
                        get: function() {
                            return this._badBuffer.buffer
                        }
                    }]),
                    t
                }()
                  , Po = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.autoBuffer = new To,
                        this.videoBuffer = new To
                    }
                    return Object(m.a)(t, [{
                        key: "reset",
                        value: function() {
                            this.autoBuffer.reset(),
                            this.videoBuffer.reset()
                        }
                    }]),
                    t
                }()
                  , ko = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this.stat = null,
                        this.endTs = 0,
                        this.pausedStartTs = 0,
                        this.isInTime = !1,
                        this.switchType = 0,
                        this.switchCodecType = 0,
                        this.recordCodecType = 0,
                        this.heartType = 0,
                        this.monitorTime = Number(M.autoCfg.monitorTime),
                        this.tempBuffer = new Po,
                        this.usefulBuffer = new Po,
                        this._continueBuffer = -1,
                        this._badReasons = 0,
                        this._minReason = 0
                    }
                    return Object(m.a)(t, [{
                        key: "init",
                        value: function(t) {
                            this.stat = t
                        }
                    }, {
                        key: "start",
                        value: function(t, e) {
                            0 === this.endTs && (this._badReasons = 0,
                            this._minReason = 0),
                            this.switchType = t,
                            this.switchCodecType = e,
                            E.a.log("AutoSwitchMonitor.start"),
                            this.endTs = F.a.now() + this.monitorTime,
                            this.pausedStartTs > 0 && (this.isInTime = !0,
                            this.tempBuffer.autoBuffer.setItem(this.tempBuffer.videoBuffer)),
                            this._checkStat(),
                            ls.add(this.onCheckTimer, this, 100)
                        }
                    }, {
                        key: "_checkStat",
                        value: function() {
                            this.endTs > F.a.now() ? (this.heartType = this._getHeartType(),
                            this.recordCodecType = this.switchCodecType) : (this.heartType = 0,
                            this.recordCodecType = 0)
                        }
                    }, {
                        key: "recordHeartType",
                        value: function() {
                            this.stat.setCoreDim(Mt, this.heartType),
                            this.stat.setCoreDim(Ft, this.recordCodecType),
                            this.stat.setCoreDim(ke, this.usefulBuffer.autoBuffer.badBuffer),
                            this.stat.setCoreDim(ce, this.usefulBuffer.videoBuffer.badBuffer),
                            this.stat.setCore(Ee, this._continueBuffer),
                            this.usefulBuffer.reset(),
                            this._continueBuffer = -1,
                            this._checkStat()
                        }
                    }, {
                        key: "_getHeartType",
                        value: function() {
                            return this.switchType === ya ? 1 : 2
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.endTs = 0,
                            ls.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "addBadReason",
                        value: function(t) {
                            this._badReasons |= t;
                            var e = (0,
                            s.default)(t) + 1;
                            (0 === this._minReason || this._minReason > e) && (this._minReason = e)
                        }
                    }, {
                        key: "addSwitch",
                        value: function(t, e, i, s) {
                            1 === s && (E.a.log("AutoSwitchMonitor.addSwitch"),
                            this.stat.addCore(fe, 1),
                            e === i && this.stat.addCore(pe, 1),
                            this.endTs > t && (e === i && this.stat.addCore(Se, 1),
                            this.switchType === ya && this.stat.addCore(Te, 1),
                            this.stat.addCore(ge, 1)))
                        }
                    }, {
                        key: "addBadQuality",
                        value: function(t, e, i, s) {
                            E.a.log("AutoSwitchMonitor.addBadQuality isIntime=".concat(this.isInTime, " pausedStartTs=").concat(this.pausedStartTs, " endTs=").concat(this.endTs, " now=").concat(t)),
                            this.usefulBuffer.videoBuffer.setItem(this.tempBuffer.videoBuffer),
                            this.isInTime && (this.usefulBuffer.autoBuffer.setItem(this.tempBuffer.autoBuffer),
                            this.stat.addCore(me, 1),
                            this.stat.addCore(ve, e),
                            this.stat.setCoreDim(Ut, this._badReasons),
                            this.stat.setCoreDim(Nt, this._minReason),
                            this._continueBuffer = s,
                            this.switchType === ya && (this.stat.addCore(ye, 1),
                            this.stat.addCore(_e, e))),
                            i !== Wn && (this.pausedStartTs = 0,
                            this.isInTime = !1),
                            this.tempBuffer.reset()
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(t, e) {
                            t >= this.endTs && (E.a.log("AutoSwitchMonitor.onCheckTimer stop."),
                            this.stat.setCore(Pe, 1),
                            this.stop())
                        }
                    }, {
                        key: "resetPausedTs",
                        value: function() {
                            this.tempBuffer.reset(),
                            this.pausedStartTs = 0,
                            this.isInTime = !1
                        }
                    }, {
                        key: "setPause",
                        value: function(t, e) {
                            E.a.log("AutoSwitchMonitor.setPause now=".concat(t, " buffer=").concat(e, " endTs=").concat(this.endTs)),
                            this.pausedStartTs = t,
                            this.tempBuffer.videoBuffer.setBuffers(e),
                            this.endTs > t ? (this.isInTime = !0,
                            this.tempBuffer.autoBuffer.setBuffers(e)) : this.isInTime = !1
                        }
                    }]),
                    t
                }()
                  , Eo = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.hyPlayer = e,
                        this.hasEvent = !1,
                        this.isSupported = void 0 !== document.addEventListener && void 0 !== document.hidden,
                        this.onVisibilitychangeBind = this.onVisibilitychange.bind(this),
                        this.stat = null
                    }
                    return Object(m.a)(t, [{
                        key: "setStat",
                        value: function(t) {
                            this.stat = t,
                            this.onVisibilitychange(),
                            this.addVisibilitychange()
                        }
                    }, {
                        key: "addVisibilitychange",
                        value: function() {
                            !this.hasEvent && this.isSupported && (this.hasEvent = !0,
                            document.addEventListener("visibilitychange", this.onVisibilitychangeBind))
                        }
                    }, {
                        key: "delVisibilitychange",
                        value: function() {
                            this.hasEvent && (this.hasEvent = !1,
                            document.removeEventListener("visibilitychange", this.onVisibilitychangeBind))
                        }
                    }, {
                        key: "onVisibilitychange",
                        value: function() {
                            this.isSupported && (E.a.log("Visibility.onVisibilitychange visibilityState=".concat(document.visibilityState)),
                            this.stat && this.stat.setComDim(Et, document.visibilityState),
                            this.hyPlayer.trigger(y.VISIBILITY_CHANGE))
                        }
                    }]),
                    t
                }()
                  , Io = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        this.scene = e,
                        this.sDispatchId = "",
                        this.expiredTime = 0
                    }
                    return Object(m.a)(t, [{
                        key: "isExpired",
                        value: function(t) {
                            return t > this.expiredTime
                        }
                    }]),
                    t
                }()
                  , bo = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._sysMap = new v.default
                    }
                    return Object(m.a)(t, [{
                        key: "addItem",
                        value: function(t, e, i) {
                            E.a.log("RecSysStat.addItem scene=".concat(t, " now=").concat(F.a.now(), " expiredTime=").concat(i));
                            var s = this._sysMap.get(t);
                            s || (s = new Io(t),
                            this._sysMap.set(t, s)),
                            s.sDispatchId = e,
                            s.expiredTime = Number(i) || F.a.now() + 6e4
                        }
                    }, {
                        key: "removeItem",
                        value: function(t) {
                            this._sysMap.delete(t)
                        }
                    }, {
                        key: "recordAct",
                        value: function(t) {
                            var e = this.getResult();
                            e.length > 0 && t.setActDim(xt, e)
                        }
                    }, {
                        key: "recordHeart",
                        value: function(t) {
                            var e = this.getResult();
                            e.length > 0 && t.setCoreDim(xt, e)
                        }
                    }, {
                        key: "getResult",
                        value: function() {
                            var t = []
                              , e = F.a.now();
                            return this._sysMap.forEach((function(i) {
                                i.isExpired(e) || t.push("".concat(i.scene, ":").concat(i.sDispatchId))
                            }
                            )),
                            t.join(",")
                        }
                    }]),
                    t
                }()
                  , Co = "force_auto_count"
                  , wo = "force_auto_effective_time"
                  , Ao = localStorage
                  , Ro = function() {
                    function t(e, i) {
                        Object(p.a)(this, t),
                        this._abConfig = i,
                        this._forceCnt = 0,
                        this._sysForceCnt = 0,
                        this._effectiveTime = 0,
                        this._sysEffectiveTime = 0,
                        this._isInit = !1,
                        this._closed = !1,
                        e.on(P.AUTO_FORCE_RSP, this.onAutoForceRsp.bind(this))
                    }
                    return Object(m.a)(t, [{
                        key: "_init",
                        value: function() {
                            if (!this._isInit)
                                if (this._isInit = !0,
                                this._sysEffectiveTime > 0 ? this._effectiveTime = this._sysEffectiveTime : this._effectiveTime = Number(M.force_auto_effective_time),
                                this._sysForceCnt > 0)
                                    this._forceCnt = this._sysForceCnt,
                                    E.a.log("AutoForce._init useSys");
                                else {
                                    this._forceCnt = Number(M.force_auto_count);
                                    var t = []
                                      , e = this._abConfig.getConfig("quitAutoCount");
                                    null !== e && (this._forceCnt = Number(e),
                                    t.push("_forceCnt=".concat(this._forceCnt)));
                                    var i = this._abConfig.getConfig("isWebAutoABBBB");
                                    null !== i && (this._closed = 1 === i,
                                    t.push("isWebAutoAB=".concat(i))),
                                    E.a.log("AutoForce._init ".concat(t.join(" ")))
                                }
                        }
                    }, {
                        key: "onAutoForceRsp",
                        value: function(t, e) {
                            var i = e.force_auto_count
                              , s = e.force_auto_effective_time;
                            E.a.log("AutoForce.onAutoForceRsp force_auto_count=".concat(i, " force_auto_effective_time=").concat(s)),
                            this._forceCnt = this._sysForceCnt = i,
                            this._effectiveTime = this._sysEffectiveTime = 1e3 * s,
                            this._checkEffective()
                        }
                    }, {
                        key: "addForce",
                        value: function() {
                            var t = Number(Ao.getItem(Co)) || 0;
                            Ao.setItem(Co, t + 1),
                            E.a.log("AutoForce.addForce forceCnt=".concat(t + 1)),
                            this._checkEffective()
                        }
                    }, {
                        key: "_checkEffective",
                        value: function() {
                            (Number(Ao.getItem(Co)) || 0) >= this._forceCnt && !Ao.hasOwnProperty(wo) && (Ao.setItem(wo, Date.now() + this._effectiveTime),
                            E.a.log("AutoForce._checkEffective cooling"))
                        }
                    }, {
                        key: "getUseAuto",
                        value: function() {
                            if (this._init(),
                            this._closed)
                                return !1;
                            if (Ao.hasOwnProperty(wo)) {
                                var t = Number(Ao.getItem(wo));
                                if (Date.now() < t)
                                    return E.a.log("AutoForce.getUseAuto cooling!"),
                                    !1;
                                Ao.removeItem(Co),
                                Ao.removeItem(wo)
                            }
                            var e = Number(Ao.getItem(Co)) || 0;
                            return E.a.log("AutoForce.getUseAuto forceCnt=".concat(e, " _forceCnt=").concat(this._forceCnt)),
                            e < this._forceCnt
                        }
                    }]),
                    t
                }()
                  , Lo = localStorage
                  , Bo = function() {
                    function t() {
                        Object(p.a)(this, t),
                        this._isInit = !1,
                        this._mpConfig = null
                    }
                    return Object(m.a)(t, [{
                        key: "_init",
                        value: function() {
                            if (!this._isInit) {
                                E.a.log("AbConfigParser._init", Lo.abConfig),
                                this._isInit = !0;
                                try {
                                    var t = JSON.parse(Lo.abConfig);
                                    t && t.mpConfig && (this._mpConfig = t.mpConfig)
                                } catch (t) {
                                    E.a.log("AbConfigParser._init ".concat(t.message))
                                }
                            }
                        }
                    }, {
                        key: "getConfig",
                        value: function(t) {
                            return this._init(),
                            this._mpConfig && this._mpConfig.hasOwnProperty(t) ? this._mpConfig[t] : null
                        }
                    }]),
                    t
                }()
                  , Do = function() {
                    function t(e) {
                        Object(p.a)(this, t),
                        F.a.now();
                        var i = Number(localStorage.sdkLogLevel);
                        isNaN(i) || this.setLogLevel(i),
                        L.initUUId(),
                        this.uuid = L.uuid,
                        this.VideoPlayTimeSended = !1;
                        var s = O.a.platform + " " + O.a.name + " " + O.a.version.string;
                        E.a.warn("SDK ".concat(2203101758, " | ").concat("2022-03-10 17:58:43", " | ").concat("RELEASE", " | ").concat(s, " | ").concat(this.uuid)),
                        this.config = M,
                        this.config.init(e),
                        this.config.jitBufLen = 6e3,
                        this.config.jitMaxBufLen = 16e3,
                        this.config.jitMinBufLen = 3e3;
                        var a = function() {
                            var t = new tr.a;
                            return t.trigger = function(e) {
                                for (var i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++)
                                    s[a - 1] = arguments[a];
                                var r = s;
                                "Array" === s.constructor.name && (r = s[0]),
                                e === P.PLAY_STATUS ? E.a.log("%c" + e + " %c" + r.status, "color:#F9F900;background:gray", "color:#53FF53;background:gray") : -1 === no.indexOf(e) && E.a.log("%c" + e, "color:#F9F900;background:gray", r),
                                t.emit.apply(t, [e, e].concat(s))
                            }
                            ,
                            t.off = function(e) {
                                for (var i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++)
                                    s[a - 1] = arguments[a];
                                t.removeListener.apply(t, [e].concat(s))
                            }
                            ,
                            t
                        }();
                        this.on = a.on.bind(a),
                        this.off = a.off.bind(a),
                        this.trigger = a.trigger.bind(a),
                        this.volume = 1,
                        this._type = 0,
                        this.player = null,
                        this.lastFlvInfo = null,
                        this.lastP2PInfo = null,
                        this.noPictureSended = !1,
                        this.playingMgr = null,
                        this.videoPlaybackrateAccess = !O.a.firefox,
                        this.stat = new ro,
                        this.metrics = new zi,
                        this.abConfig = new Bo,
                        this.tsdbUtil = new Wi({
                            stat: this.stat,
                            eventEmiter: this
                        }),
                        this.statSwitch = new co(this.tsdbUtil,this.stat,this),
                        this.h265Proxy = new go(this.stat,this.tsdbUtil),
                        this.autoMonitor = new ko,
                        this.recSysStat = new bo,
                        this.autoMonitor = new ko,
                        this.visibility = new Eo(this),
                        this.autoForce = new Ro(this,this.abConfig),
                        this.sampleController = new ho,
                        this.statSwitch.init(this.autoMonitor, this.recSysStat, this.autoForce),
                        this.autoMonitor.init(this.stat),
                        this.enableLowLatency = !1,
                        this.nimoPlayConfig = null,
                        this.audiouitil = null,
                        this.stat.setComDim(J, O.a.name),
                        this.stat.setComDim(Q, O.a.version.major),
                        this.stat.setComDim(Z, O.a.name),
                        this.stat.setComDim($, O.a.version.major),
                        this.startTs = 0,
                        this.on(P.VIDEO_PLAY, this.onPlayVideo.bind(this)),
                        this.on(P.P2P_TIMEOUT, this.onP2pTimeout.bind(this)),
                        this.on(P.FLV_TRY_TO_P2P, this.flvTryToP2P.bind(this))
                    }
                    return Object(m.a)(t, [{
                        key: "isSupportP2P",
                        get: function() {
                            return !1
                        }
                    }, {
                        key: "isBrowserSupport",
                        value: function() {
                            return O.a.firefox || O.a.opera || O.a.chrome && 53 != O.a.version.major
                        }
                    }, {
                        key: "isNeedAud",
                        value: function() {
                            return O.a.chrome && O.a.version.major >= 73
                        }
                    }, {
                        key: "isP2PCooling",
                        value: function() {
                            return !1
                        }
                    }, {
                        key: "setOexp",
                        value: function(t) {
                            this.stat.setComDim(W, t)
                        }
                    }, {
                        key: "setExtendConfig",
                        value: function(t) {
                            var e = {};
                            t.p2pConfig && ((0,
                            k.default)(e, t.p2pConfig),
                            delete t.p2pConfig),
                            t.sdk && (t.sdk.p2pConfig && ((0,
                            k.default)(e, t.sdk.p2pConfig),
                            delete t.sdk.p2pConfig),
                            (0,
                            k.default)(e, t.sdk),
                            delete t.sdk),
                            (0,
                            k.default)(e, t),
                            this.config.init(e)
                        }
                    }, {
                        key: "setConfig",
                        value: function(t, e) {
                            this.config[t] != e && (this.config[t] = e,
                            E.a.log("HYPlayer.setConfig ".concat(t, "=").concat(e)))
                        }
                    }, {
                        key: "setNimoConfig",
                        value: function(t) {
                            try {
                                t.nimoConfig && (this.nimoPlayConfig = JSON.parse(t.nimoConfig)),
                                this.setExtendConfig(this.nimoPlayConfig),
                                this.player && this.player.updateFlvConfig && this.player.updateFlvConfig(),
                                this.player && this.player.updateP2PConfig && this.player.updateP2PConfig()
                            } catch (t) {
                                E.a.log("config err")
                            }
                        }
                    }, {
                        key: "getConfig",
                        value: function(t) {
                            return this.config[t]
                        }
                    }, {
                        key: "getVolume",
                        value: function() {
                            return this.volume
                        }
                    }, {
                        key: "setVolume",
                        value: function(t) {
                            var e = Math.max(0, Number(t));
                            e = Math.min(1, e),
                            this.volume = e,
                            this.player && this.player.setVolume(e)
                        }
                    }, {
                        key: "getRecvInfo",
                        value: function() {
                            return this.player && this.player.getRecvInfo ? this.player.getRecvInfo() : null
                        }
                    }, {
                        key: "pause",
                        value: function() {
                            this.player && (this.player.pause ? this.player.pause() : this.player.stop())
                        }
                    }, {
                        key: "play",
                        value: function() {
                            this.player && this.player.play && this.player.play()
                        }
                    }, {
                        key: "setLogLevel",
                        value: function(t) {
                            E.a.setLevel(t)
                        }
                    }, {
                        key: "updateLiveVodUrl",
                        value: function(t) {
                            this.player && this.player.updateLiveVodUrl && this.player.updateLiveVodUrl(t)
                        }
                    }, {
                        key: "getExceptionStat",
                        value: function() {
                            return this.player.exceptionStat ? this.player.exceptionStat.getStat() : ""
                        }
                    }, {
                        key: "seek",
                        value: function(t) {
                            this.player && this.player.seek && this.player.seek(t)
                        }
                    }, {
                        key: "getLog",
                        value: function() {
                            return E.a.getLog()
                        }
                    }, {
                        key: "getMetrics",
                        value: function() {
                            return this.metrics.getResult()
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return this.player && this.player.getBufferLen && this.player.getBufferLen() || 0
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.player ? this.player.getCurrentTime() : 0
                        }
                    }, {
                        key: "getCurrentDts",
                        value: function() {
                            return this.player && this.player.getCurrentDts ? this.player.getCurrentDts() : 0
                        }
                    }, {
                        key: "getCurrentSeiOffsetDts",
                        value: function() {
                            return this.player && this.player.getCurrentSeiOffsetDts ? this.player.getCurrentSeiOffsetDts() : 0
                        }
                    }, {
                        key: "getCurrentSeiDts",
                        value: function() {
                            return this.getCurrentDts() - this.getCurrentSeiOffsetDts()
                        }
                    }, {
                        key: "getDurationTime",
                        value: function() {
                            return this.player ? this.player.getDurationTime() : 0
                        }
                    }, {
                        key: "sendMetrics",
                        value: function(t) {
                            this.trigger(P.DATA_METRIC2, t)
                        }
                    }, {
                        key: "sendDanmuCarton",
                        value: function(t, e, i) {
                            this.tsdbUtil.sendMetrics([this.stat.createAct(Wi.METRIC.RECV_DANMU_CARTON, {
                                str: [t, e, i]
                            })])
                        }
                    }, {
                        key: "start",
                        value: function(e) {
                            e.appid && (L.appId = e.appid,
                            L.appid = e.appid),
                            M.isConfigSupportH265 = 0,
                            M.autoCfg.close = 1,
                            M.isAiP2PToFlv = 0,
                            e = (0,
                            k.default)({
                                uuid: this.uuid,
                                type: 0,
                                lineType: -1,
                                curBitrate: 0,
                                originalBitrate: 0,
                                enableLowLatency: 0
                            }, e),
                            this.stop(),
                            this.enableLowLatency = e.enableLowLatency,
                            E.a.log("HYPlayer.start type=".concat(e.type), e),
                            e.type === t.P2PFLV && (e.iIsP2PSupport ? (this.lastP2PInfo = e,
                            e.type = t.P2P) : e.type = t.FLV),
                            this.stat.setComDim(at, e.type),
                            this.stat.setComDim(rt, e.liveType || 0),
                            this.stat.setComDim(dt, e.startType || 1),
                            this.visibility.setStat(this.stat),
                            this._type = e.type,
                            L.uid = e.uid || L.uid,
                            L.sGuid = e.sGuid || L.sGuid,
                            0 === L.convertUid && L.uid > 0 && (L.convertUid = R.rotUid(L.uid, e.presenterUid)),
                            /*!this.noPictureSended && */
                            e.type === t.FLV || e.type === t.P2P ? ls.once(this.onNoPictureFlv, this, 1e4) : e.type === t.HLS && ls.once(this.onNoPictureHls, this, 1e4),
                            e.url && (e.url = e.url.replace("http://", "https://")),
                            this.startTs = F.a.now();
                            var i = {
                                stat: this.stat,
                                tsdb: this.tsdbUtil,
                                statSwitch: this.statSwitch,
                                sampleController: this.sampleController,
                                h265Proxy: this.h265Proxy,
                                autoMonitor: this.autoMonitor,
                                recSysStat: this.recSysStat,
                                videoElement: this.videoElement
                            };
                            switch (E.a.log("HYPlayer.startNow", Date.now(), this.startTs),
                            e.type) {
                            case t.FLV:
                                this.player = new zn(this,i,this.videoElement),
                                this.lastFlvInfo = e,
                                this.lastP2PInfo && (this.player.backToP2P.lastP2PInfo = this.lastP2PInfo);
                                break;
                            case t.HLS:
                                var s = t.isSupported() ? ao : HlsTagPlayer;
                                this.player = new s(this,i);
                                break;
                            case t.PLAYBACK:
                                this.player = new lo(this,i)
                            }
                            this.player.setVideoPlayTimeSended && this.VideoPlayTimeSended && this.player.setVideoPlayTimeSended(),
                            this.player.start(e),
                            this.nimoPlayConfig && this.setNimoConfig(this.nimoPlayConfig),
                            this.enableLowLatency && this.player && this.player.setEnableLowLatency && this.player.setEnableLowLatency(!0),
                            this.player.setPlaybackrateAccess && this.player.setPlaybackrateAccess(this.videoPlaybackrateAccess),
                            this.playingMgr = this.player
                        }
                    }, {
                        key: "attachMediaElement",
                        value: function(t) {
                            this.videoElement = t
                        }
                    }, {
                        key: "sendVideoLoadError",
                        value: function() {
                            this.player && this.player.sendLoadVideoErrorStatus()
                        }
                    }, {
                        key: "onNoPictureP2P",
                        value: function() {
                            this.player && this.isP2P && !this.noPictureP2PSended && this.onNoPicture()
                        }
                    }, {
                        key: "onNoPictureFlv",
                        value: function() {
                            this.player && this.isFlv && !this.noPictureFlvSended && this.onNoPicture()
                        }
                    }, {
                        key: "onNoPictureHls",
                        value: function() {
                            this.player && this.isHls && !this.noPictureHlsSended && (this.noPictureHlsSended = !0,
                            this.onNoPicture())
                        }
                    }, {
                        key: "onNoPicture",
                        value: function() {
                            var t = this.player.getRecvInfo ? this.player.getRecvInfo() : []
                              , e = [this.player.isPlaying ? 0 : 100, this.player.hasPicture ? 0 : 100].concat(t)
                              , i = [this.stat.createAct(Si, {
                                value: e
                            })];
                            this.trigger(P.DATA_METRIC2, i)
                        }
                    }, {
                        key: "reportNoPictureProps",
                        value: function() {
                            E.a.log("HYNimoPlayer.reportNoPictureProps");
                            var t = this.player.getCostTimes ? this.player.getCostTimes() : []
                              , e = [this.player.isPlaying ? 0 : 100, this.player.hasPicture ? 0 : 100].concat(t)
                              , i = [this.stat.createAct(Hi, {
                                value: e
                            })];
                            this.trigger(P.DATA_METRIC2, i)
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(t) {
                            this.audiouitil || (this.audiouitil = new ir),
                            this.player && this.player.setAudioUtil && this.player.setAudioUtil(this.audiouitil),
                            this.VideoPlayTimeSended = !0
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            E.a.group("HYPlayer.stop"),
                            ls.remove(this.onNoPictureFlv, this),
                            ls.remove(this.onNoPictureP2P, this),
                            ls.remove(this.onNoPictureHls, this),
                            this.player && (this.player.stop(),
                            this.player.destroy && this.player.destroy(),
                            this.player = null),
                            this.visibility.delVisibilitychange(),
                            E.a.groupEnd(),
                            this.startTs = 0
                        }
                    }, {
                        key: "setAppHandler",
                        value: function(t) {
                            t.onHySDKPlayerInited(this)
                        }
                    }, {
                        key: "setTafHandler",
                        value: function(t) {
                            oo.default.setTafHandler(t),
                            Ds.start()
                        }
                    }, {
                        key: "flvTryToP2P",
                        value: function() {
                            this.lastP2PInfo && (this.metrics.setP2p(1),
                            L.flvTryToP2P = 1,
                            this.lastP2PInfo.type = t.P2P,
                            this.trigger(P.FLV_TO_P2P),
                            this.start(this.lastP2PInfo),
                            this.isForceFlv = !1,
                            this.sdkTurnToP2P = !0,
                            ls.once(this.tryPlayP2PTimeout, this, 3e3)),
                            this.flacMgr && this.player && (this.stopFlac(),
                            this.startFlac())
                        }
                    }, {
                        key: "onP2pTimeout",
                        value: function() {
                            this.stat.reset(),
                            this._isP2pPlayIng = !1,
                            this.isForceFlv = !0,
                            this.lastP2PInfo.type === t.VR ? this.lastP2PInfo.vr.playerType = 0 : this.lastP2PInfo.type = t.FLV,
                            this.start(this.lastP2PInfo)
                        }
                    }, {
                        key: "tryPlayP2PTimeout",
                        value: function() {
                            this.isP2P && this.player.isPlaying || this.trigger(P.P2P_TIMEOUT)
                        }
                    }, {
                        key: "reportLoadP2PLib",
                        value: function(t) {
                            var e = [this.stat.createAct(Ni, {
                                value: [t ? 100 : 0],
                                str: [O.a.platform]
                            })];
                            this.trigger(P.DATA_METRIC2, e)
                        }
                    }, {
                        key: "switchLevel",
                        value: function(t) {
                            t && t.url && (t.url = t.url.replace("http://", "https://")),
                            this.player && this.player.switchLevel(t)
                        }
                    }, {
                        key: "setAbTestConfig",
                        value: function(t) {
                            if (E.a.log("HYPlayer.setAbTestConfig abConfig", t),
                            !t)
                                return null;
                            "" != t.mpExperiment && this.stat.setComDim(W, t.mpExperiment)
                        }
                    }, {
                        key: "getUseAuto",
                        value: function() {
                            return this.autoForce.getUseAuto()
                        }
                    }, {
                        key: "getSupportAuto",
                        value: function() {
                            return !M.getEnableJumpBuffer()
                        }
                    }, {
                        key: "type",
                        get: function() {
                            return this._type
                        }
                    }, {
                        key: "isFlv",
                        get: function() {
                            return this._type == t.FLV
                        }
                    }, {
                        key: "isP2P",
                        get: function() {
                            return this._type == t.P2P
                        }
                    }, {
                        key: "isHls",
                        get: function() {
                            return this._type == t.HLS
                        }
                    }], [{
                        key: "isSupported",
                        value: function() {
                            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"') && !O.a.msie
                        }
                    }, {
                        key: "Events",
                        get: function() {
                            return P
                        }
                    }]),
                    t
                }();
                Do.FLV = 1,
                Do.P2P = 2,
                Do.HLS = 3,
                Do.HUYA = 4,
                Do.STREAM = 5,
                Do.PLAYBACK = 9,
                Do.P2PFLV = 10,
                e.default = Do,
                window.HYPlayer = Do,
                window.H5Player = Do
            }
            ])
        }
        , function(t, e, i) {
            t.exports = {
                default: i(120),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(121),
            t.exports = i(0).Math.log2
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S, "Math", {
                log2: function(t) {
                    return Math.log(t) / Math.LN2
                }
            })
        }
        , function(t, e, i) {
            t.exports = {
                default: i(123),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(30),
            i(19),
            i(26),
            i(130),
            i(134),
            i(136),
            i(137),
            t.exports = i(0).Set
        }
        , function(t, e, i) {
            var s = i(53)
              , a = i(54);
            t.exports = function(t) {
                return function(e, i) {
                    var r, n, o = String(a(e)), u = s(i), h = o.length;
                    return u < 0 || u >= h ? t ? "" : void 0 : (r = o.charCodeAt(u)) < 55296 || r > 56319 || u + 1 === h || (n = o.charCodeAt(u + 1)) < 56320 || n > 57343 ? t ? o.charAt(u) : r : t ? o.slice(u, u + 2) : n - 56320 + (r - 55296 << 10) + 65536
                }
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(32)
              , a = i(29)
              , r = i(34)
              , n = {};
            i(13)(n, i(6)("iterator"), (function() {
                return this
            }
            )),
            t.exports = function(t, e, i) {
                t.prototype = s(n, {
                    next: a(1, i)
                }),
                r(t, e + " Iterator")
            }
        }
        , function(t, e, i) {
            var s = i(16)
              , a = i(42)
              , r = i(127);
            t.exports = function(t) {
                return function(e, i, n) {
                    var o, u = s(e), h = a(u.length), l = r(n, h);
                    if (t && i != i) {
                        for (; h > l; )
                            if ((o = u[l++]) != o)
                                return !0
                    } else
                        for (; h > l; l++)
                            if ((t || l in u) && u[l] === i)
                                return t || l || 0;
                    return !t && -1
                }
            }
        }
        , function(t, e, i) {
            var s = i(53)
              , a = Math.max
              , r = Math.min;
            t.exports = function(t, e) {
                return (t = s(t)) < 0 ? a(t + e, 0) : r(t, e)
            }
        }
        , function(t, e, i) {
            "use strict";
            var s = i(129)
              , a = i(82)
              , r = i(24)
              , n = i(16);
            t.exports = i(55)(Array, "Array", (function(t, e) {
                this._t = n(t),
                this._i = 0,
                this._k = e
            }
            ), (function() {
                var t = this._t
                  , e = this._k
                  , i = this._i++;
                return !t || i >= t.length ? (this._t = void 0,
                a(1)) : a(0, "keys" == e ? i : "values" == e ? t[i] : [i, t[i]])
            }
            ), "values"),
            r.Arguments = r.Array,
            s("keys"),
            s("values"),
            s("entries")
        }
        , function(t, e) {
            t.exports = function() {}
        }
        , function(t, e, i) {
            "use strict";
            var s = i(83)
              , a = i(64);
            t.exports = i(87)("Set", (function(t) {
                return function() {
                    return t(this, arguments.length > 0 ? arguments[0] : void 0)
                }
            }
            ), {
                add: function(t) {
                    return s.def(a(this, "Set"), t = 0 === t ? 0 : t, t)
                }
            }, s)
        }
        , function(t, e, i) {
            var s = i(11)
              , a = i(56)
              , r = i(20)
              , n = i(42)
              , o = i(132);
            t.exports = function(t, e) {
                var i = 1 == t
                  , u = 2 == t
                  , h = 3 == t
                  , l = 4 == t
                  , c = 6 == t
                  , d = 5 == t || c
                  , f = e || o;
                return function(e, o, p) {
                    for (var m, y, v = r(e), _ = a(v), g = s(o, p, 3), S = n(_.length), T = 0, P = i ? f(e, S) : u ? f(e, 0) : void 0; S > T; T++)
                        if ((d || T in _) && (y = g(m = _[T], T, v),
                        t))
                            if (i)
                                P[T] = y;
                            else if (y)
                                switch (t) {
                                case 3:
                                    return !0;
                                case 5:
                                    return m;
                                case 6:
                                    return T;
                                case 2:
                                    P.push(m)
                                }
                            else if (l)
                                return !1;
                    return c ? -1 : h || l ? l : P
                }
            }
        }
        , function(t, e, i) {
            var s = i(133);
            t.exports = function(t, e) {
                return new (s(t))(e)
            }
        }
        , function(t, e, i) {
            var s = i(5)
              , a = i(88)
              , r = i(6)("species");
            t.exports = function(t) {
                var e;
                return a(t) && ("function" != typeof (e = t.constructor) || e !== Array && !a(e.prototype) || (e = void 0),
                s(e) && null === (e = e[r]) && (e = void 0)),
                void 0 === e ? Array : e
            }
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.P + s.R, "Set", {
                toJSON: i(89)("Set")
            })
        }
        , function(t, e, i) {
            var s = i(35);
            t.exports = function(t, e) {
                var i = [];
                return s(t, !1, i.push, i, e),
                i
            }
        }
        , function(t, e, i) {
            i(90)("Set")
        }
        , function(t, e, i) {
            i(91)("Set")
        }
        , function(t, e, i) {
            t.exports = {
                default: i(139),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(140),
            t.exports = i(0).Object.values
        }
        , function(t, e, i) {
            var s = i(1)
              , a = i(141)(!1);
            s(s.S, "Object", {
                values: function(t) {
                    return a(t)
                }
            })
        }
        , function(t, e, i) {
            var s = i(7)
              , a = i(25)
              , r = i(16)
              , n = i(36).f;
            t.exports = function(t) {
                return function(e) {
                    for (var i, o = r(e), u = a(o), h = u.length, l = 0, c = []; h > l; )
                        i = u[l++],
                        s && !n.call(o, i) || c.push(t ? [i, o[i]] : o[i]);
                    return c
                }
            }
        }
        , function(t, e, i) {
            i(30),
            i(19),
            i(26),
            i(143),
            i(146),
            i(147),
            t.exports = i(0).Promise
        }
        , function(t, e, i) {
            "use strict";
            var s, a, r, n, o = i(31), u = i(4), h = i(11), l = i(44), c = i(1), d = i(5), f = i(18), p = i(62), m = i(35), y = i(93), v = i(94).set, _ = i(144)(), g = i(65), S = i(96), T = i(145), P = i(97), k = u.TypeError, E = u.process, I = E && E.versions, b = I && I.v8 || "", C = u.Promise, w = "process" == l(E), A = function() {}, R = a = g.f, L = !!function() {
                try {
                    var t = C.resolve(1)
                      , e = (t.constructor = {})[i(6)("species")] = function(t) {
                        t(A, A)
                    }
                    ;
                    return (w || "function" == typeof PromiseRejectionEvent) && t.then(A)instanceof e && 0 !== b.indexOf("6.6") && -1 === T.indexOf("Chrome/66")
                } catch (t) {}
            }(), B = function(t) {
                var e;
                return !(!d(t) || "function" != typeof (e = t.then)) && e
            }, D = function(t, e) {
                if (!t._n) {
                    t._n = !0;
                    var i = t._c;
                    _((function() {
                        for (var s = t._v, a = 1 == t._s, r = 0, n = function(e) {
                            var i, r, n, o = a ? e.ok : e.fail, u = e.resolve, h = e.reject, l = e.domain;
                            try {
                                o ? (a || (2 == t._h && F(t),
                                t._h = 1),
                                !0 === o ? i = s : (l && l.enter(),
                                i = o(s),
                                l && (l.exit(),
                                n = !0)),
                                i === e.promise ? h(k("Promise-chain cycle")) : (r = B(i)) ? r.call(i, u, h) : u(i)) : h(s)
                            } catch (t) {
                                l && !n && l.exit(),
                                h(t)
                            }
                        }; i.length > r; )
                            n(i[r++]);
                        t._c = [],
                        t._n = !1,
                        e && !t._h && O(t)
                    }
                    ))
                }
            }, O = function(t) {
                v.call(u, (function() {
                    var e, i, s, a = t._v, r = M(t);
                    if (r && (e = S((function() {
                        w ? E.emit("unhandledRejection", a, t) : (i = u.onunhandledrejection) ? i({
                            promise: t,
                            reason: a
                        }) : (s = u.console) && s.error && s.error("Unhandled promise rejection", a)
                    }
                    )),
                    t._h = w || M(t) ? 2 : 1),
                    t._a = void 0,
                    r && e.e)
                        throw e.v
                }
                ))
            }, M = function(t) {
                return 1 !== t._h && 0 === (t._a || t._c).length
            }, F = function(t) {
                v.call(u, (function() {
                    var e;
                    w ? E.emit("rejectionHandled", t) : (e = u.onrejectionhandled) && e({
                        promise: t,
                        reason: t._v
                    })
                }
                ))
            }, U = function(t) {
                var e = this;
                e._d || (e._d = !0,
                (e = e._w || e)._v = t,
                e._s = 2,
                e._a || (e._a = e._c.slice()),
                D(e, !0))
            }, N = function(t) {
                var e, i = this;
                if (!i._d) {
                    i._d = !0,
                    i = i._w || i;
                    try {
                        if (i === t)
                            throw k("Promise can't be resolved itself");
                        (e = B(t)) ? _((function() {
                            var s = {
                                _w: i,
                                _d: !1
                            };
                            try {
                                e.call(t, h(N, s, 1), h(U, s, 1))
                            } catch (t) {
                                U.call(s, t)
                            }
                        }
                        )) : (i._v = t,
                        i._s = 1,
                        D(i, !1))
                    } catch (t) {
                        U.call({
                            _w: i,
                            _d: !1
                        }, t)
                    }
                }
            };
            L || (C = function(t) {
                p(this, C, "Promise", "_h"),
                f(t),
                s.call(this);
                try {
                    t(h(N, this, 1), h(U, this, 1))
                } catch (t) {
                    U.call(this, t)
                }
            }
            ,
            (s = function(t) {
                this._c = [],
                this._a = void 0,
                this._s = 0,
                this._d = !1,
                this._v = void 0,
                this._h = 0,
                this._n = !1
            }
            ).prototype = i(61)(C.prototype, {
                then: function(t, e) {
                    var i = R(y(this, C));
                    return i.ok = "function" != typeof t || t,
                    i.fail = "function" == typeof e && e,
                    i.domain = w ? E.domain : void 0,
                    this._c.push(i),
                    this._a && this._a.push(i),
                    this._s && D(this, !1),
                    i.promise
                },
                catch: function(t) {
                    return this.then(void 0, t)
                }
            }),
            r = function() {
                var t = new s;
                this.promise = t,
                this.resolve = h(N, t, 1),
                this.reject = h(U, t, 1)
            }
            ,
            g.f = R = function(t) {
                return t === C || t === n ? new r(t) : a(t)
            }
            ),
            c(c.G + c.W + c.F * !L, {
                Promise: C
            }),
            i(34)(C, "Promise"),
            i(86)("Promise"),
            n = i(0).Promise,
            c(c.S + c.F * !L, "Promise", {
                reject: function(t) {
                    var e = R(this);
                    return (0,
                    e.reject)(t),
                    e.promise
                }
            }),
            c(c.S + c.F * (o || !L), "Promise", {
                resolve: function(t) {
                    return P(o && this === n ? C : this, t)
                }
            }),
            c(c.S + c.F * !(L && i(98)((function(t) {
                C.all(t).catch(A)
            }
            ))), "Promise", {
                all: function(t) {
                    var e = this
                      , i = R(e)
                      , s = i.resolve
                      , a = i.reject
                      , r = S((function() {
                        var i = []
                          , r = 0
                          , n = 1;
                        m(t, !1, (function(t) {
                            var o = r++
                              , u = !1;
                            i.push(void 0),
                            n++,
                            e.resolve(t).then((function(t) {
                                u || (u = !0,
                                i[o] = t,
                                --n || s(i))
                            }
                            ), a)
                        }
                        )),
                        --n || s(i)
                    }
                    ));
                    return r.e && a(r.v),
                    i.promise
                },
                race: function(t) {
                    var e = this
                      , i = R(e)
                      , s = i.reject
                      , a = S((function() {
                        m(t, !1, (function(t) {
                            e.resolve(t).then(i.resolve, s)
                        }
                        ))
                    }
                    ));
                    return a.e && s(a.v),
                    i.promise
                }
            })
        }
        , function(t, e, i) {
            var s = i(4)
              , a = i(94).set
              , r = s.MutationObserver || s.WebKitMutationObserver
              , n = s.process
              , o = s.Promise
              , u = "process" == i(33)(n);
            t.exports = function() {
                var t, e, i, h = function() {
                    var s, a;
                    for (u && (s = n.domain) && s.exit(); t; ) {
                        a = t.fn,
                        t = t.next;
                        try {
                            a()
                        } catch (s) {
                            throw t ? i() : e = void 0,
                            s
                        }
                    }
                    e = void 0,
                    s && s.enter()
                };
                if (u)
                    i = function() {
                        n.nextTick(h)
                    }
                    ;
                else if (!r || s.navigator && s.navigator.standalone)
                    if (o && o.resolve) {
                        var l = o.resolve(void 0);
                        i = function() {
                            l.then(h)
                        }
                    } else
                        i = function() {
                            a.call(s, h)
                        }
                        ;
                else {
                    var c = !0
                      , d = document.createTextNode("");
                    new r(h).observe(d, {
                        characterData: !0
                    }),
                    i = function() {
                        d.data = c = !c
                    }
                }
                return function(s) {
                    var a = {
                        fn: s,
                        next: void 0
                    };
                    e && (e.next = a),
                    t || (t = a,
                    i()),
                    e = a
                }
            }
        }
        , function(t, e, i) {
            var s = i(4).navigator;
            t.exports = s && s.userAgent || ""
        }
        , function(t, e, i) {
            "use strict";
            var s = i(1)
              , a = i(0)
              , r = i(4)
              , n = i(93)
              , o = i(97);
            s(s.P + s.R, "Promise", {
                finally: function(t) {
                    var e = n(this, a.Promise || r.Promise)
                      , i = "function" == typeof t;
                    return this.then(i ? function(i) {
                        return o(e, t()).then((function() {
                            return i
                        }
                        ))
                    }
                    : t, i ? function(i) {
                        return o(e, t()).then((function() {
                            throw i
                        }
                        ))
                    }
                    : t)
                }
            })
        }
        , function(t, e, i) {
            "use strict";
            var s = i(1)
              , a = i(65)
              , r = i(96);
            s(s.S, "Promise", {
                try: function(t) {
                    var e = a.f(this)
                      , i = r(t);
                    return (i.e ? e.reject : e.resolve)(i.v),
                    e.promise
                }
            })
        }
        , function(t, e, i) {
            i(149),
            t.exports = 9007199254740991
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S, "Number", {
                MAX_SAFE_INTEGER: 9007199254740991
            })
        }
        , function(t, e, i) {
            i(151);
            var s = i(0).Object;
            t.exports = function(t, e) {
                return s.getOwnPropertyDescriptor(t, e)
            }
        }
        , function(t, e, i) {
            var s = i(16)
              , a = i(46).f;
            i(27)("getOwnPropertyDescriptor", (function() {
                return function(t, e) {
                    return a(s(t), e)
                }
            }
            ))
        }
        , function(t, e, i) {
            t.exports = {
                default: i(153),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(154),
            t.exports = i(0).Reflect.get
        }
        , function(t, e, i) {
            var s = i(46)
              , a = i(60)
              , r = i(15)
              , n = i(1)
              , o = i(5)
              , u = i(8);
            n(n.S, "Reflect", {
                get: function t(e, i) {
                    var n, h, l = arguments.length < 3 ? e : arguments[2];
                    return u(e) === l ? e[i] : (n = s.f(e, i)) ? r(n, "value") ? n.value : void 0 !== n.get ? n.get.call(l) : void 0 : o(h = a(e)) ? t(h, i, l) : void 0
                }
            })
        }
        , function(t, e, i) {
            t.exports = {
                default: i(156),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(19),
            i(157),
            t.exports = i(0).Array.from
        }
        , function(t, e, i) {
            "use strict";
            var s = i(11)
              , a = i(1)
              , r = i(20)
              , n = i(84)
              , o = i(85)
              , u = i(42)
              , h = i(158)
              , l = i(63);
            a(a.S + a.F * !i(98)((function(t) {
                Array.from(t)
            }
            )), "Array", {
                from: function(t) {
                    var e, i, a, c, d = r(t), f = "function" == typeof this ? this : Array, p = arguments.length, m = p > 1 ? arguments[1] : void 0, y = void 0 !== m, v = 0, _ = l(d);
                    if (y && (m = s(m, p > 2 ? arguments[2] : void 0, 2)),
                    null == _ || f == Array && o(_))
                        for (i = new f(e = u(d.length)); e > v; v++)
                            h(i, v, y ? m(d[v], v) : d[v]);
                    else
                        for (c = _.call(d),
                        i = new f; !(a = c.next()).done; v++)
                            h(i, v, y ? n(c, m, [a.value, v], !0) : a.value);
                    return i.length = v,
                    i
                }
            })
        }
        , function(t, e, i) {
            "use strict";
            var s = i(9)
              , a = i(29);
            t.exports = function(t, e, i) {
                e in t ? s.f(t, e, a(0, i)) : t[e] = i
            }
        }
        , function(t, e, i) {
            i(26),
            i(19),
            t.exports = i(160)
        }
        , function(t, e, i) {
            var s = i(44)
              , a = i(6)("iterator")
              , r = i(24);
            t.exports = i(0).isIterable = function(t) {
                var e = Object(t);
                return void 0 !== e[a] || "@@iterator"in e || r.hasOwnProperty(s(e))
            }
        }
        , function(t, e, i) {
            var s = i(0)
              , a = s.JSON || (s.JSON = {
                stringify: JSON.stringify
            });
            t.exports = function(t) {
                return a.stringify.apply(a, arguments)
            }
        }
        , function(t, e, i) {
            i(163),
            t.exports = i(0).Object.keys
        }
        , function(t, e, i) {
            var s = i(20)
              , a = i(25);
            i(27)("keys", (function() {
                return function(t) {
                    return a(s(t))
                }
            }
            ))
        }
        , function(t, e, i) {
            t.exports = {
                default: i(165),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(166),
            t.exports = i(0).Number.isNaN
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S, "Number", {
                isNaN: function(t) {
                    return t != t
                }
            })
        }
        , function(t, e, i) {
            i(168);
            var s = i(0).Object;
            t.exports = function(t) {
                return s.getOwnPropertyNames(t)
            }
        }
        , function(t, e, i) {
            i(27)("getOwnPropertyNames", (function() {
                return i(103).f
            }
            ))
        }
        , function(t, e, i) {
            i(106),
            t.exports = i(0).Object.getOwnPropertySymbols
        }
        , function(t, e, i) {
            var s = i(25)
              , a = i(68)
              , r = i(36);
            t.exports = function(t) {
                var e = s(t)
                  , i = a.f;
                if (i)
                    for (var n, o = i(t), u = r.f, h = 0; o.length > h; )
                        u.call(t, n = o[h++]) && e.push(n);
                return e
            }
        }
        , function(t, e, i) {
            i(30),
            i(19),
            i(26),
            i(172),
            i(173),
            i(174),
            i(175),
            t.exports = i(0).Map
        }
        , function(t, e, i) {
            "use strict";
            var s = i(83)
              , a = i(64);
            t.exports = i(87)("Map", (function(t) {
                return function() {
                    return t(this, arguments.length > 0 ? arguments[0] : void 0)
                }
            }
            ), {
                get: function(t) {
                    var e = s.getEntry(a(this, "Map"), t);
                    return e && e.v
                },
                set: function(t, e) {
                    return s.def(a(this, "Map"), 0 === t ? 0 : t, e)
                }
            }, s, !0)
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.P + s.R, "Map", {
                toJSON: i(89)("Map")
            })
        }
        , function(t, e, i) {
            i(90)("Map")
        }
        , function(t, e, i) {
            i(91)("Map")
        }
        , function(t, e, i) {
            i(26),
            i(19),
            t.exports = i(177)
        }
        , function(t, e, i) {
            var s = i(8)
              , a = i(63);
            t.exports = i(0).getIterator = function(t) {
                var e = a(t);
                if ("function" != typeof e)
                    throw TypeError(t + " is not iterable!");
                return s(e.call(t))
            }
        }
        , function(t, e, i) {
            i(179),
            t.exports = i(0).Object.getPrototypeOf
        }
        , function(t, e, i) {
            var s = i(20)
              , a = i(60);
            i(27)("getPrototypeOf", (function() {
                return function(t) {
                    return a(s(t))
                }
            }
            ))
        }
        , function(t, e, i) {
            i(181),
            t.exports = i(0).Object.setPrototypeOf
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S, "Object", {
                setPrototypeOf: i(182).set
            })
        }
        , function(t, e, i) {
            var s = i(5)
              , a = i(8)
              , r = function(t, e) {
                if (a(t),
                !s(e) && null !== e)
                    throw TypeError(e + ": can't set as prototype!")
            };
            t.exports = {
                set: Object.setPrototypeOf || ("__proto__"in {} ? function(t, e, s) {
                    try {
                        (s = i(11)(Function.call, i(46).f(Object.prototype, "__proto__").set, 2))(t, []),
                        e = !(t instanceof Array)
                    } catch (t) {
                        e = !0
                    }
                    return function(t, i) {
                        return r(t, i),
                        e ? t.__proto__ = i : s(t, i),
                        t
                    }
                }({}, !1) : void 0),
                check: r
            }
        }
        , function(t, e, i) {
            i(19),
            i(26),
            t.exports = i(47).f("iterator")
        }
        , function(t, e, i) {
            t.exports = {
                default: i(185),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(186),
            t.exports = i(0).Reflect.construct
        }
        , function(t, e, i) {
            var s = i(1)
              , a = i(32)
              , r = i(18)
              , n = i(8)
              , o = i(5)
              , u = i(14)
              , h = i(187)
              , l = (i(4).Reflect || {}).construct
              , c = u((function() {
                function t() {}
                return !(l((function() {}
                ), [], t)instanceof t)
            }
            ))
              , d = !u((function() {
                l((function() {}
                ))
            }
            ));
            s(s.S + s.F * (c || d), "Reflect", {
                construct: function(t, e) {
                    r(t),
                    n(e);
                    var i = arguments.length < 3 ? t : r(arguments[2]);
                    if (d && !c)
                        return l(t, e, i);
                    if (t == i) {
                        switch (e.length) {
                        case 0:
                            return new t;
                        case 1:
                            return new t(e[0]);
                        case 2:
                            return new t(e[0],e[1]);
                        case 3:
                            return new t(e[0],e[1],e[2]);
                        case 4:
                            return new t(e[0],e[1],e[2],e[3])
                        }
                        var s = [null];
                        return s.push.apply(s, e),
                        new (h.apply(t, s))
                    }
                    var u = i.prototype
                      , f = a(o(u) ? u : Object.prototype)
                      , p = Function.apply.call(t, f, e);
                    return o(p) ? p : f
                }
            })
        }
        , function(t, e, i) {
            "use strict";
            var s = i(18)
              , a = i(5)
              , r = i(95)
              , n = [].slice
              , o = {}
              , u = function(t, e, i) {
                if (!(e in o)) {
                    for (var s = [], a = 0; a < e; a++)
                        s[a] = "a[" + a + "]";
                    o[e] = Function("F,a", "return new F(" + s.join(",") + ")")
                }
                return o[e](t, i)
            };
            t.exports = Function.bind || function(t) {
                var e = s(this)
                  , i = n.call(arguments, 1)
                  , o = function() {
                    var s = i.concat(n.call(arguments));
                    return this instanceof o ? u(e, s.length, s) : r(e, s, t)
                };
                return a(e.prototype) && (o.prototype = e.prototype),
                o
            }
        }
        , function(t, e, i) {
            i(189),
            t.exports = i(0).Object.assign
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S + s.F, "Object", {
                assign: i(190)
            })
        }
        , function(t, e, i) {
            "use strict";
            var s = i(7)
              , a = i(25)
              , r = i(68)
              , n = i(36)
              , o = i(20)
              , u = i(56)
              , h = Object.assign;
            t.exports = !h || i(14)((function() {
                var t = {}
                  , e = {}
                  , i = Symbol()
                  , s = "abcdefghijklmnopqrst";
                return t[i] = 7,
                s.split("").forEach((function(t) {
                    e[t] = t
                }
                )),
                7 != h({}, t)[i] || Object.keys(h({}, e)).join("") != s
            }
            )) ? function(t, e) {
                for (var i = o(t), h = arguments.length, l = 1, c = r.f, d = n.f; h > l; )
                    for (var f, p = u(arguments[l++]), m = c ? a(p).concat(c(p)) : a(p), y = m.length, v = 0; y > v; )
                        f = m[v++],
                        s && !d.call(p, f) || (i[f] = p[f]);
                return i
            }
            : h
        }
        , function(t, e, i) {
            i(192);
            var s = i(0).Object;
            t.exports = function(t, e) {
                return s.create(t, e)
            }
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S, "Object", {
                create: i(32)
            })
        }
        , function(t, e, i) {
            i(106),
            i(30),
            i(194),
            i(195),
            t.exports = i(0).Symbol
        }
        , function(t, e, i) {
            i(67)("asyncIterator")
        }
        , function(t, e, i) {
            i(67)("observable")
        }
        , function(t, e, i) {
            i(30),
            t.exports = i(47).f("toStringTag")
        }
        , function(t, e, i) {
            i(198);
            var s = i(0).Object;
            t.exports = function(t, e, i) {
                return s.defineProperty(t, e, i)
            }
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S + s.F * !i(7), "Object", {
                defineProperty: i(9).f
            })
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = u(i(200))
              , a = u(i(49))
              , r = u(i(21))
              , n = u(i(41))
              , o = u(i(214));
            function u(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            r.default.PlayerClass = o.default;
            var h = {
                Events: s.default,
                PlayerEvents: a.default,
                setAppId: r.default.setAppId.bind(r.default),
                setSignalSdk: n.default.init.bind(n.default),
                loginMedia: r.default.loginMedia.bind(r.default),
                setProperties: r.default.setProperties.bind(r.default),
                createPlayer: r.default.createPlayer.bind(r.default),
                isSupported: r.default.isSupported.bind(r.default)
            };
            e.default = h
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s, a = (s = i(2)) && s.__esModule ? s : {
                default: s
            }, r = function t() {
                (0,
                a.default)(this, t)
            };
            r.WEBSOCKET_CONNECTED = "WEBSOCKET_CONNECTED",
            r.WEBSOCKET_CLOSED = "WEBSOCKET_CLOSED",
            r.WEBSOCKET_ERROR = "WEBSOCKET_ERROR",
            r.SERVER_OPEN = "SERVER_OPEN",
            r.SERVER_CLOSE = "SERVER_CLOSE",
            r.SERVER_ERROR = "SERVER_ERROR",
            r.SERVER_PROTO = "SERVER_PROTO",
            r.SERVER_INITED = "SERVER_INITED",
            r.SERVER_LOGIN = "SERVER_LOGIN",
            r.SERVER_CFG_INITED = "SERVER_CFG_INITED",
            r.UPDATE_STREAM_INFO = "UPDATE_STREAM_INFO",
            r.UPDATE_STREAM_INFO_FAIL = "UPDATE_STREAM_INFO_FAIL",
            r.ROOM_LIVE_END = "ROOM_LIVE_END",
            r.MEDIA_STOPSTREAM_NOTICE = "MEDIA_STOPSTREAM_NOTICE",
            r.MEDIA_STREAMCHANGED_NOTICE = "MEDIA_STREAMCHANGED_NOTICE",
            e.default = r
        }
        , function(t, e) {
            t.exports = function(t) {
                return t.webpackPolyfill || (t.deprecate = function() {}
                ,
                t.paths = [],
                t.children || (t.children = []),
                Object.defineProperty(t, "loaded", {
                    enumerable: !0,
                    get: function() {
                        return t.l
                    }
                }),
                Object.defineProperty(t, "id", {
                    enumerable: !0,
                    get: function() {
                        return t.i
                    }
                }),
                t.webpackPolyfill = 1),
                t
            }
        }
        , function(t, e, i) {
            t.exports = {
                default: i(203),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(204),
            t.exports = i(0).Object.preventExtensions
        }
        , function(t, e, i) {
            var s = i(5)
              , a = i(45).onFreeze;
            i(27)("preventExtensions", (function(t) {
                return function(e) {
                    return t && s(e) ? t(a(e)) : e
                }
            }
            ))
        }
        , function(t, e, i) {
            t.exports = {
                default: i(206),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(207),
            t.exports = i(0).Object.isExtensible
        }
        , function(t, e, i) {
            var s = i(5);
            i(27)("isExtensible", (function(t) {
                return function(e) {
                    return !!s(e) && (!t || t(e))
                }
            }
            ))
        }
        , function(t, e, i) {
            t.exports = {
                default: i(209),
                __esModule: !0
            }
        }
        , function(t, e, i) {
            i(210);
            var s = i(0).Object;
            t.exports = function(t, e) {
                return s.defineProperties(t, e)
            }
        }
        , function(t, e, i) {
            var s = i(1);
            s(s.S + s.F * !i(7), "Object", {
                defineProperties: i(79)
            })
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = i(17);
            e.default = s.TafMx
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.default = {
                kMediaPackTypeStreamChangeNotice: 1e5,
                kMediaPackTypeMediaStopStream: 100102,
                kMediaPackTypeMediaChgUpStream: 100200,
                kMediaPackTypeRoomStreamChangeNotice: 100300
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.default = {
                WEBSOCKET_CONNECTED: "WEBSOCKET_CONNECTED",
                WEBSOCKET_DOLAUNCH: "WEBSOCKET_DOLAUNCH",
                VERIFYCOOKIE_PASS: "VERIFYCOOKIE_PASS",
                WS_REGISTER_GROUP_RSP: "WS_REGISTER_GROUP_RSP",
                WS_UNREGISTER_GROUP_RSP: "WS_UNREGISTER_GROUP_RSP",
                WS_CONNET_STATE: "WS_CONNET_STATE"
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = P(i(37))
              , a = P(i(28))
              , r = P(i(10))
              , n = P(i(2))
              , o = P(i(3))
              , u = P(i(22))
              , h = P(i(110))
              , l = P(i(23))
              , c = P(i(215))
              , d = P(i(49))
              , f = P(i(224))
              , p = P(i(116))
              , m = P(i(50))
              , y = P(i(115))
              , v = P(i(12))
              , _ = P(i(225))
              , g = P(i(21))
              , S = P(i(226))
              , T = P(i(227));
            function P(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var k = function(t) {
                function e(t) {
                    (0,
                    n.default)(this, e);
                    var i = (0,
                    u.default)(this, (e.__proto__ || (0,
                    r.default)(e)).call(this, t));
                    return i.playInfo = null,
                    i.antiCode = new T.default,
                    i
                }
                return (0,
                l.default)(e, t),
                (0,
                o.default)(e, [{
                    key: "autoFeedback",
                    value: function(t) {
                        var e = (t || "") + "\n\n" + this.getLog();
                        2 === m.default.wap && this.fbCtrl.feedback(y.default.BLACK_SCREEN_WAP, e)
                    }
                }, {
                    key: "getLog",
                    value: function() {
                        var t = v.default.getLog();
                        return (0,
                        a.default)(t)
                    }
                }, {
                    key: "startPlay",
                    value: function(t, i) {
                        (0,
                        h.default)(e.prototype.__proto__ || (0,
                        r.default)(e.prototype), "startPlay", this).call(this, t, i),
                        this.playInfo = {},
                        this.stat.setComDim("stream_type", p.default[this.startPlayInfo.type] === p.default.mp4 ? 6 : 3)
                    }
                }, {
                    key: "playStreamInfo",
                    value: function(t) {
                        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1
                          , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                        this.playStream(t, e, i)
                    }
                }, {
                    key: "playStream",
                    value: function(t) {
                        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1
                          , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
                          , s = !1;
                        if (t && t.length > 0) {
                            var a = t[0];
                            if (a.vMediaStreamInfo.length > 0)
                                for (var r = 0; r < a.vMediaStreamInfo.length; r++) {
                                    var n = a.vMediaStreamInfo[r];
                                    Number(a.chooseLine) === Number(n.iLineIndex) && this.playStreamCdn(e, a, n, i)
                                }
                            else
                                s = !0
                        } else
                            s = !0;
                        s ? (v.default.log("WapPlayer(" + this.id + ").playStream ROOM_NO_STREAM"),
                        this.trigger(d.default.ROOM_NO_STREAM),
                        this._stop()) : v.default.log("WapPlayer(" + this.id + ").playStream")
                    }
                }, {
                    key: "playStreamCdn",
                    value: function(t, e, i, s) {
                        var a = this;
                        v.default.log("Wapplayer.playStreamCdn");
                        var r = this._getGearInfo(e, t)
                          , n = this._getLineInfo(e)
                          , o = S.default.isTest(this.room.roomId)
                          , u = -1 !== t ? t : e.defaultBitRate
                          , h = e.playFormat;
                        h && "p2p" == h.sFormatName && (h.sFormatName = "flv");
                        var l = h.sFormatName || "hls";
                        this.startPlayInfo.type = l;
                        var c = ""
                          , f = ""
                          , p = S.default.getStreamName(i.sStreamName, u, o)
                          , m = this.getParams(e, i, 0);
                        switch (l) {
                        case "flv":
                            c = this.validUrl(i.sFlvUrl) + p + i.sFlvSuffix,
                            f = i.sFlvUrl;
                            break;
                        case "hls":
                            2 == (2 & h.lFormatPropertyFlag) && m.push("lowlatency=1"),
                            c = this.validUrl(i.sHlsUrl) + i.sStreamName + i.sHlsSuffix,
                            f = i.sHlsUrl
                        }
                        this.currentRoomStream.mediaFormat = l,
                        h && "" !== h.sAdditionalParam && m.push(h.sAdditionalParam),
                        "" !== r.sAdditionalParam && m.push(r.sAdditionalParam);
                        var y = e.sAntiCode;
                        this.setCurrentRoomStreamGearInfo(e, u, m),
                        this.saveCurrentStream(f, i.sStreamName, u, e.chooseLine);
                        var _ = r.tResolution || {}
                          , T = _.iWidth > 0 && _.iHeight > 0 && 0 === r.iBitRate
                          , P = T ? e.iBitRate : r.iBitRate
                          , k = r.iBitRate;
                        this.playInfo = {
                            video: this.playerVideo,
                            playFormat: h.sFormatName,
                            bLive: this.startPlayInfo.bLive,
                            pid: this.startPlayInfo.pid,
                            myid: this.startPlayInfo.myid,
                            place: this.startPlayInfo.place,
                            anonymousuid: this.startPlayInfo.anonymousuid,
                            appid: g.default.appId,
                            roomId: this.startPlayInfo.roomId,
                            lineType: n.iLineIndex,
                            liveType: this.startPlayInfo.bLive ? 1 : 3,
                            startType: this.start_type,
                            stream_from: this.stream_from,
                            sGuid: g.default.deviceId,
                            bitrate: P,
                            curBitrate: P,
                            iBitRate: k,
                            originalBitrate: T ? 1 : 0,
                            sFlvUrl: n.sFlvUrl,
                            sFlvSuffix: n.sFlvSuffix,
                            sFlvAntiCode: y,
                            sHlsUrl: n.sHlsUrl,
                            sHlsSuffix: n.sHlsSuffix,
                            sHlsAntiCode: y,
                            sP2pUrl: n.sP2pUrl,
                            sP2pSuffix: n.sP2pSuffix,
                            enableLowLatency: this.startPlayInfo.enableLowLatency,
                            startTimeStamp: this.startPlayInfo.startTimeStamp,
                            uistartTs: this.uistartTs,
                            isPureAudio: this.startPlayInfo.isPureAudio || !1,
                            cdnName: n.sCdnName,
                            h5Root: this.startPlayInfo.h5Root,
                            sStreamName: n.sStreamName,
                            sAdditionalParam: m.join("&")
                        },
                        "hls" === l && 1 == (1 & h.lFormatPropertyFlag) ? m.push("ratio=abr") : u > 0 && m.push("ratio=" + u),
                        this.bUserStoped || (this.startPlayInfo.bLive ? (this.antiCode.init(this.playInfo.sStreamName, y),
                        this.antiCode.valid().then((function() {
                            m.push(a.antiCode.getAnticode()),
                            c += m.length > 0 ? "?" + m.join("&") : "",
                            a.startPlayUrl(c)
                        }
                        ))) : (c += m.length > 0 ? "?" + m.join("&") : "",
                        this.startPlayUrl(c))),
                        this.trigger(d.default.MEDIA_STREAM_UPDATE, {
                            streamGearInfo: e.vStreamGearInfo,
                            streamInfo: e.vMediaStreamInfo,
                            currentRoomStream: this.currentRoomStream
                        })
                    }
                }, {
                    key: "_dealSphd",
                    value: function(t) {
                        return this.sphd > 0 && -1 != t.indexOf("sphd=1") && (t = t.replace(/sphd=1|sphd=0|&sphd=1|&sphd=0/g, ""),
                        1 == this.sphd && (t += "&sphd=1")),
                        t
                    }
                }, {
                    key: "_getGearInfo",
                    value: function(t, e) {
                        for (var i = -1 === e ? t.defaultBitRate : e, s = 0; s < t.vStreamGearInfo.length; s++) {
                            var a = t.vStreamGearInfo[s];
                            if (i == a.iBitRate)
                                return a
                        }
                        return null
                    }
                }, {
                    key: "_getLineInfo",
                    value: function(t) {
                        for (var e = 0; e < t.vMediaStreamInfo.length; e++) {
                            var i = t.vMediaStreamInfo[e];
                            if (t.chooseLine == i.iLineIndex)
                                return i
                        }
                        return null
                    }
                }, {
                    key: "realStartPlay",
                    value: function(t) {
                        t = this._dealSphd(t);
                        var e = p.default[this.startPlayInfo.type] || p.default.flv;
                        e === p.default.mp4 ? this.playMp4(t) : g.default.isSupported() && !this.startPlayInfo.bLive ? this.playSdk(t, e) : this.playHls(t)
                    }
                }, {
                    key: "playHls",
                    value: function(t) {
                        -1 != t.indexOf("http://") && (t = t.replace("http://", "https://")),
                        this.player = new f.default(this,this.playerVideo),
                        this.player.roomId = this.startPlayInfo.roomId,
                        this.sphd > 0 && -1 != t.indexOf("sphd=1") && (t = t.replace(/sphd=1|sphd=0|&sphd=1|&sphd=0/g, ""),
                        1 == this.sphd && (t += "&sphd=1")),
                        this.stat.setComDim("stream_url", t),
                        this.player.startPlay({
                            url: t,
                            playTimeout: this.startPlayInfo.playTimeout,
                            uistartTs: this.uistartTs,
                            startTimeStamp: this.startPlayInfo.startTimeStamp,
                            pid: this.startPlayInfo.pid,
                            bLive: this.startPlayInfo.bLive,
                            oexp: this.startPlayInfo.oexp,
                            bitrate: this.currentRoomStream.iBitRate,
                            lineType: this.currentRoomStream.line,
                            place: this.startPlayInfo.place
                        }),
                        this.player.gameid = this.startPlayInfo.gameid,
                        this.player.roomId = this.startPlayInfo.roomId
                    }
                }, {
                    key: "playSdk",
                    value: function(t, e) {
                        if (g.default.isSupported()) {
                            console.log("this.startPlayInfo", this.startPlayInfo),
                            this.player = new _.default(this,this.config);
                            var i = {
                                video: this.playerVideo,
                                pid: this.startPlayInfo.pid,
                                myid: this.startPlayInfo.myid,
                                bLive: this.startPlayInfo.bLive,
                                lineType: this.currentRoomStream.line,
                                place: this.startPlayInfo.place,
                                roomId: this.startPlayInfo.roomId,
                                url: t,
                                bitrate: this.currentRoomStream.iBitRate,
                                isPureAudio: this.startPlayInfo.isPureAudio || !1,
                                needSeek: this.room.needSeek,
                                oexp: this.startPlayInfo.oexp,
                                originalBitrate: this.currentRoomStream.isSrc ? 0 : 1,
                                enableLowLatency: this.startPlayInfo.enableLowLatency,
                                mediaType: e,
                                startTimeStamp: this.startPlayInfo.startTimeStamp,
                                uistartTs: this.uistartTs,
                                startType: this.start_type,
                                stream_from: this.stream_from,
                                seekTime: this.startPlayInfo.seekTime,
                                vr: this.startPlayInfo.vr,
                                cdnName: this.startPlayInfo.cdnName,
                                h5Root: this.startPlayInfo.h5Root
                            };
                            this.startPlayInfo.bLive && (i = (0,
                            s.default)(this.playInfo, i)),
                            this.player.startPlay(i),
                            this.player.roomId = this.startPlayInfo.roomId || 0,
                            this.player.gameid = this.startPlayInfo.gameid
                        } else
                            v.default.warn("WapPlayer.playSdk not supported!", null !== window.HYPlayer)
                    }
                }, {
                    key: "onStopVideo",
                    value: function() {
                        v.default.log("WapPlayer.onStopVideo"),
                        this.trigger(d.default.VIDEO_STOP, {})
                    }
                }, {
                    key: "onNoDataReceived",
                    value: function() {
                        this.trigger(d.default.NO_DATA_RECEIVED, {})
                    }
                }, {
                    key: "onLinkTimeout",
                    value: function() {
                        this.trigger(d.default.LINK_TIMEOUT, {})
                    }
                }, {
                    key: "onVideoFrameLoaded",
                    value: function() {
                        this.trigger(d.default.VIDEO_FRAME_LOADED, {})
                    }
                }, {
                    key: "onLoadDataTimeout",
                    value: function() {
                        this.trigger(d.default.LOAD_DATA_TIMEOUT, {})
                    }
                }, {
                    key: "onLinkUnAvailable",
                    value: function() {
                        this.trigger(d.default.LINK_UNAVAILABLE, {})
                    }
                }, {
                    key: "onPlayDownLinkInfo",
                    value: function(t) {
                        this.trigger(d.default.PLAY_DOWNLINK_INFO, t)
                    }
                }, {
                    key: "onClose",
                    value: function() {
                        this.trigger(d.default.VIDEO_CLOSE)
                    }
                }, {
                    key: "onPlayFrameBuffer",
                    value: function(t) {
                        this.trigger(d.default.VIDEO_FRAME_JITTERBUFFER, {
                            frameStorage: t.frameStorage,
                            jitterBuffer: t.jitterBuffer,
                            playdelay: t.playdelay
                        })
                    }
                }, {
                    key: "onMetaData",
                    value: function(t) {
                        this.trigger(d.default.METADATA, t)
                    }
                }, {
                    key: "onSwitchDone",
                    value: function() {
                        this.trigger(d.default.SWITCH_DONE)
                    }
                }, {
                    key: "onUpdateIntersity",
                    value: function(t) {
                        this.trigger(d.default.UPDATE_INTERSITY, t)
                    }
                }, {
                    key: "onPlayStatus",
                    value: function() {}
                }, {
                    key: "_stop",
                    value: function() {
                        (0,
                        h.default)(e.prototype.__proto__ || (0,
                        r.default)(e.prototype), "_stop", this).call(this)
                    }
                }]),
                e
            }(c.default);
            e.default = k
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = k(i(28))
              , a = k(i(10))
              , r = k(i(2))
              , n = k(i(3))
              , o = k(i(22))
              , u = k(i(23))
              , h = k(i(75))
              , l = k(i(111))
              , c = k(i(49))
              , d = k(i(12))
              , f = k(i(216))
              , p = k(i(217))
              , m = k(i(218))
              , y = k(i(219))
              , v = k(i(74))
              , _ = k(i(76))
              , g = k(i(114))
              , S = k(i(39))
              , T = k(i(115))
              , P = k(i(21));
            function k(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var E = 0
              , I = function(t) {
                function e(t) {
                    (0,
                    r.default)(this, e);
                    var i = (0,
                    o.default)(this, (e.__proto__ || (0,
                    a.default)(e)).call(this));
                    return i.id = E++,
                    d.default.log("BasePlayer.constructor(" + i.id + ")", 2411271811, navigator && navigator.userAgent),
                    i.params = t,
                    i.abTestConfig = null,
                    i.fbCtrl = new T.default,
                    i.stat = new l.default,
                    i.room = new f.default(i),
                    i.liveInfo = new p.default,
                    i.Events = c.default,
                    i.initIns(),
                    i.config = null,
                    i.nimoConfig = null,
                    i.player = null,
                    i.playerVideo = null,
                    i.startPlayInfo = null,
                    i.vjsOptions = null,
                    i.streamList = null,
                    i.broadcastBitrate = 0,
                    i.currentRoomStream = {},
                    i.stream_from = 0,
                    i.start_type = 0,
                    i.bUserStoped = !1,
                    i.uistartTs = performance ? performance.timing.fetchStart : 0,
                    i.clickroomts = 0,
                    i.startTimeStamp = 0,
                    i.tryCnt = 3,
                    i.qualityBitrate = {
                        0: 0,
                        6: 6e3,
                        2: 2500,
                        3: 1e3,
                        4: 500,
                        5: 250
                    },
                    i.emitVideoPlayerEventBind = i.emitVideoPlayerEvent.bind(i),
                    i.VideoEvents = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"],
                    i.streamGearInfo = [],
                    i.hasAutoBitrate = !1,
                    i.isAutoBitrate = !1,
                    i.setFetchTime(),
                    i.room._checkConfig(),
                    1 == Number(h.default._showH5Player) && (window.openNimoPlayer = i),
                    i.isMosaic = !1,
                    i.volume = 1,
                    i.isMuted = !1,
                    i.perMosaic = 0,
                    i.isPlayBack = !1,
                    i
                }
                return (0,
                u.default)(e, t),
                (0,
                n.default)(e, [{
                    key: "isCanTry",
                    value: function() {
                        return this.tryCnt--,
                        this.tryCnt >= 0
                    }
                }, {
                    key: "initIns",
                    value: function() {}
                }, {
                    key: "reset",
                    value: function() {
                        this.player && this.player.dispose(),
                        this.player = null
                    }
                }, {
                    key: "autoFeedback",
                    value: function(t) {}
                }, {
                    key: "clearVideoChildnote",
                    value: function() {
                        if (d.default.log("BasePlayer(" + this.id + ").clearVideoChildnote has playerVideo", null !== this.playerVideo),
                        this.playerVideo && (this.delH5EventListeners(this.playerVideo),
                        this.playerVideo = null),
                        this.startPlayInfo && this.startPlayInfo.id) {
                            var t = document.getElementById(this.startPlayInfo.id);
                            if (d.default.log("BasePlayer(" + this.id + ").clearVideoChildnote has playerContainer", null !== t, t && t.childNodes.length),
                            t)
                                for (var e = t.childNodes, i = 0; i < e.length; i++)
                                    t.removeChild(e[i])
                        }
                    }
                }, {
                    key: "createVideo",
                    value: function() {
                        this.clearVideoChildnote();
                        var t = document.getElementById(this.startPlayInfo.id);
                        return !!t && (d.default.log("BasePlayer(" + this.id + ").createVideo createVideo", t.childNodes.length),
                        this.startPlayInfo.clickroomts > 0 && d.default.log("BasePlayer(" + this.id + ").createVideo createVideo ts", performance.now() - this.startPlayInfo.clickroomts),
                        this.clickroomts = this.startPlayInfo.clickroomts > 0 ? (new Date).getTime() - (performance.now() - this.startPlayInfo.clickroomts) : this.uistartTs,
                        this.uistartTs = this.clickroomts,
                        this.playerVideo = document.createElement("video"),
                        this.addH5EventListeners(this.playerVideo),
                        m.default.setVideoAttributeOptions(this.playerVideo, this.vjsOptions || {}),
                        this.checkAutoPlay(),
                        !0)
                    }
                }, {
                    key: "checkAutoPlay",
                    value: function() {
                        var t = this;
                        if (this.playerVideo && this.vjsOptions && this.vjsOptions.autoplay) {
                            d.default.log("BasePlayer(" + this.id + ").checkAutoPlay");
                            var e = this.playerVideo.play();
                            void 0 !== e && e.then((function(e) {
                                d.default.log("BasePlayer(" + t.id + ").checkAutoPlay auto play")
                            }
                            )).catch((function(e) {
                                d.default.log("BasePlayer(" + t.id + ").checkAutoPlay play err " + e),
                                t.trigger(c.default.AUTO_PLAY_ERR)
                            }
                            ))
                        }
                    }
                }, {
                    key: "addH5EventListeners",
                    value: function(t) {
                        for (var e = 0; e < this.VideoEvents.length; e++)
                            t.addEventListener(this.VideoEvents[e], this.emitVideoPlayerEventBind)
                    }
                }, {
                    key: "delH5EventListeners",
                    value: function(t) {
                        for (var e = 0; e < this.VideoEvents.length; e++)
                            t.removeEventListener(this.VideoEvents[e], this.emitVideoPlayerEventBind)
                    }
                }, {
                    key: "emitVideoPlayerEvent",
                    value: function(t) {
                        t && t.type ? ("timeupdate" != t.type && "progress" != t.type && "durationchange" != t.type && d.default.log("BasePlayer(" + this.id + ").emitVideoPlayerEvent type=" + t.type),
                        this.trigger(t.type, t)) : d.default.log("BasePlayer(" + this.id + ").emitVideoPlayerEvent error"),
                        "loadedmetadata" == t.type && this.isMuted && this.player && this.player.setMuted && this.player.setMuted(this.isMuted),
                        "loadstart" == t.type && -1 != navigator.userAgent.toLocaleLowerCase().indexOf("mac") && this.play()
                    }
                }, {
                    key: "setFetchTime",
                    value: function() {
                        h.default && performance && (h.default.uifetch && h.default.uifetch >= performance.timing.fetchStart ? this.uistartTs = 0 : this.setLocalVideoStarted(!1),
                        h.default.uifetch = performance.timing.fetchStart)
                    }
                }, {
                    key: "setLocalVideoStarted",
                    value: function(t) {
                        h.default && (h.default.videoStarted = t ? 1 : 0)
                    }
                }, {
                    key: "setHYPlayerConfig",
                    value: function(t) {
                        this.player && this.player.setPlayerConfig(t)
                    }
                }, {
                    key: "updateInfo",
                    value: function(t) {
                        this.startPlayInfo.gameid = t.gameid || 0,
                        this.room.gameid = t.gameid || 0,
                        this.room.pid = t.pid || 0,
                        this.room.myid = t.myid || 0
                    }
                }, {
                    key: "setConfig",
                    value: function(t) {
                        d.default.log("BasePlayer(" + this.id + ").setConfig config=", t),
                        this.config = t,
                        this.fbCtrl.setConfig(t.nimoConfig),
                        this.config && this.player && this.setHYPlayerConfig(this.config),
                        t.nimoConfig && this._checkP2PConfig(t.nimoConfig)
                    }
                }, {
                    key: "_checkP2PConfig",
                    value: function(t) {}
                }, {
                    key: "reportBusiStream",
                    value: function(t, e) {}
                }, {
                    key: "_hasP2p",
                    value: function() {
                        return !1
                    }
                }, {
                    key: "reportNoStream",
                    value: function(t) {
                        d.default.log("BasePlayer(" + this.id + ").reportNoStream from=" + t);
                        var e = [this.stat.createAct(g.default.STREAM_ERROR, {
                            value: [t]
                        })];
                        _.default.onNimoDataMetric2(e, this.startPlayInfo.pid, 0, "", 0, this.startPlayInfo.place, this.startPlayInfo.roomId, this.startPlayInfo.gameid, this.startPlayInfo.oexp, this.stream_from)
                    }
                }, {
                    key: "reportSdkStream",
                    value: function(t, e) {
                        d.default.log("WebPlayer(" + this.id + ").reportSdkStream", t, e);
                        var i = 1 === t && this._hasP2p()
                          , s = [this.stat.createAct(g.default.ROOM_SDK_STREAM, {
                            value: [t, i ? 1 : 0],
                            str: [e]
                        })];
                        d.default.log("WebPlayer(" + this.id + ").reportSdkStream.DATA_METRIC2", s),
                        _.default.onNimoDataMetric2(s, this.startPlayInfo.pid, 0, "", 0, this.startPlayInfo.place, this.startPlayInfo.roomId, this.startPlayInfo.gameid, "", this.stream_from)
                    }
                }, {
                    key: "quitRoom",
                    value: function(t) {
                        this.room.quit(t)
                    }
                }, {
                    key: "fleshVideo",
                    value: function(t) {
                        if (d.default.log("HyOpenPlayer.fleshVideo bUserStoped=" + this.bUserStoped),
                        this.bUserStoped = !1,
                        t && "playback" == t.type && !t.bLive)
                            return d.default.log("HyOpenPlayer.fleshVideo info.type=" + t.type + ", info.time=" + t.time + ", info.bLive=" + t.bLive),
                            t.time && (this.startPlayInfo.seekTime = t.time),
                            void this.startPlay(this.startPlayInfo, this.vjsOptions);
                        this.room.roomId && this.streamList && this.streamList.length > 0 ? this.playStreamInfo(this.streamList, this.currentRoomStream.hasOwnProperty("iBitRate") ? this.currentRoomStream.iBitRate : -1) : this.startPlayInfo && this.startPlay(this.startPlayInfo, this.vjsOptions)
                    }
                }, {
                    key: "switchLine",
                    value: function(t) {
                        if (d.default.log("BasePlaer.switchLine", t),
                        this.streamList && this.streamList.length > 0) {
                            var e = this.streamList[0];
                            if (e.vMediaStreamInfo && e.vMediaStreamInfo.length > 0)
                                for (var i = 0; i < e.vMediaStreamInfo.length; i++)
                                    if (e.vMediaStreamInfo[i].iLineIndex === t)
                                        return e.chooseLine = t,
                                        this.currentRoomStream.isSwitchLine = !0,
                                        this.playStreamInfo(this.streamList, this.currentRoomStream ? this.currentRoomStream.iBitRate : -1),
                                        this.currentRoomStream.isSwitchLine = !1,
                                        !0
                        }
                        return !1
                    }
                }, {
                    key: "switchBitRate",
                    value: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ""
                          , e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1
                          , i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                        "auto" != t ? this.isAutoBitrate = !1 : (t = this.currentRoomStream.sDisplayName,
                        e = this.currentRoomStream.iBitRate,
                        this.isAutoBitrate = !0,
                        this.currentRoomStream.sBusiGearIndex = "auto"),
                        d.default.log("BasePlaer.switchBitrate", t, e, i),
                        this.room.needSeek = !!i,
                        this.bUserStoped = !1;
                        var s = -1;
                        if (this.streamList && this.streamList.length > 0 && this.streamList[0].vStreamGearInfo && this.streamList[0].vStreamGearInfo.length > 0) {
                            for (var a = 0; a < this.streamList[0].vStreamGearInfo.length; a++)
                                if (t == this.streamList[0].vStreamGearInfo[a].sDisplayName) {
                                    s = this.streamList[0].vStreamGearInfo[a].iBitRate,
                                    this.streamList[0].vStreamGearInfo[a].sDisplayName;
                                    break
                                }
                            if (-1 == s && -1 != e) {
                                d.default.log("HyOpenPlayer.switchBitRate no videoquality:" + t);
                                for (var r = 0; r < this.streamList[0].vStreamGearInfo.length; r++)
                                    if (e == this.streamList[0].vStreamGearInfo[r].iBitRate) {
                                        s = this.streamList[0].vStreamGearInfo[r].iBitRate,
                                        this.streamList[0].vStreamGearInfo[r].sDisplayName;
                                        break
                                    }
                            }
                        }
                        return -1 == s ? (d.default.log("HyOpenPlayer.switchBitRate switchBitRateError no stream videoquality=" + t + "  targetBitrate=" + e),
                        !1) : (this.tryCnt = 3,
                        this.playStreamInfo(this.streamList, s, !0),
                        !0)
                    }
                }, {
                    key: "startPlay",
                    value: function(t, e) {
                        this.isPlayBack = !1,
                        t && (_.default.anonymousuid = t.anonymousuid || 0,
                        _.default.myid = t.myid || 0,
                        P.default.anonymousuid = t.anonymousuid || 0),
                        d.default.log("BasePlayer(" + this.id + ").startPlay", (0,
                        s.default)(t), e ? (0,
                        s.default)(e) : ""),
                        this.startPlayInfo = t,
                        this.vjsOptions = e,
                        this.fbCtrl.setRoomid(t.pid, t.roomId),
                        this.sphd = 0,
                        t.sphd && (this.sphd = t.sphd),
                        this.liveInfo.setParams(t.pid, t.gearIndexList || []),
                        this.bUserStoped = !1,
                        t.bLive && Number(t.roomId) > 0 ? ("auto" == t.sBusiGearIndex && (this.isAutoBitrate = !0),
                        this.resetPlay(),
                        this.start_type = 2,
                        this.playRoomInfo(t)) : (this.start_type = 1,
                        this.startPlayVideo(t));
                        var i = 0;
                        t.bLive ? i = 1 : "playback" == t.type ? (i = 2,
                        this.isPlayBack = !0) : i = 3,
                        this.stat.setComDim("live_type", i)
                    }
                }, {
                    key: "onLoginMedia",
                    value: function() {
                        d.default.log("BasePlayer(" + this.id + ").onLoginMedia cookie=" + P.default.sCookie);
                        var t = [this.stat.createAct(g.default.LOGIN_MEDIA, {
                            value: [],
                            str: [P.default.sCookie]
                        })];
                        _.default.onNimoDataMetric2(t, this.startPlayInfo.pid, this.currentRoomStream.iBitRate || 0, "", this.currentRoomStream.line || 0, this.startPlayInfo.place, this.startPlayInfo.roomId, this.startPlayInfo.gameid, this.startPlayInfo.oexp, this.stream_from)
                    }
                }, {
                    key: "onBlackScreen",
                    value: function() {
                        var t = !this.player || !this.player.playing
                          , e = null;
                        this.player && this.player.getRecvInfo && (e = this.player.getRecvInfo());
                        var i = [t ? 1 : 0, this.room.hasStream ? 1 : 0];
                        e && (i = i.concat(e));
                        var s = [this.stat.createAct(g.default.BLACK_SCREEN, {
                            value: i,
                            str: [this.room.busiState, this.room.httpState, this.room.signalState]
                        })];
                        d.default.log("BasePlayer(" + this.id + ").onBlackScreen " + t, s),
                        _.default.onNimoDataMetric2(s, this.startPlayInfo.pid, this.currentRoomStream.iBitRate || 0, "", this.currentRoomStream.line || 0, this.startPlayInfo.place, this.startPlayInfo.roomId, this.startPlayInfo.gameid, this.startPlayInfo.oexp, this.stream_from)
                    }
                }, {
                    key: "resetPlay",
                    value: function() {
                        d.default.log("BasePlayer(" + this.id + ").resetPlay"),
                        this.currentRoomStream = {},
                        this.reset()
                    }
                }, {
                    key: "playRoomInfo",
                    value: function(t) {
                        h.default._use_stream && (t.useStream = 1 === Number(h.default._use_stream)),
                        this.room.update(t);
                        var e = t.yspwlStreamPkg
                          , i = t.useStream || !1;
                        if (e) {
                            var s = this.liveInfo.setLiveRoomBinData(e);
                            s ? (this.room.onGetStreamByBusi(s),
                            this.room.join(-1, !1),
                            this.reportBusiStream(!0, this._hasP2p())) : (this.reportBusiStream(!1, this._hasP2p()),
                            this.room.join(-1, !0))
                        } else
                            this.reportBusiStream(!1, this._hasP2p()),
                            i ? this.room.join(-1, !0) : this.backToBusi && this.backToBusi(1)
                    }
                }, {
                    key: "onUpdateStreamInfoFail",
                    value: function() {
                        d.default.warn("BasePlayer(" + this.id + ").onUpdateStreamInfoFail " + c.default.ROOM_NO_STREAM),
                        this.trigger(c.default.ROOM_NO_STREAM)
                    }
                }, {
                    key: "onUpdateStreamInfo",
                    value: function(t) {
                        if (!this.isPlayBack) {
                            var e = this.liveInfo.setLivingInfo(t.liveStreams, -1, Number(this.startPlayInfo.sBusiGearIndex) || -1, this.currentRoomStream);
                            if (this.streamList = e,
                            this.broadcastBitrate = t.broadcastBitrate,
                            e.length > 0) {
                                var i = e[0];
                                this.streamGearInfo = i.vStreamGearInfo,
                                this.needPlay(e) ? (this.room.setStreamState(5, t.from),
                                this.currentRoomStream.needPlay = !0,
                                this.tryCnt = 3,
                                1 === this.stream_from && this.reportDifStream && this.reportDifStream(1 !== t.from),
                                this.stream_from = t.from,
                                this.playStreamInfo(e)) : (this.room.setStreamState(4, t.from),
                                d.default.log("BasePlayer.onUpdateStreamInfo"),
                                this.mediaStreamUpdate(i.vMediaStreamInfo, i.vStreamGearInfo, this.currentRoomStream))
                            } else
                                d.default.warn("BasePlayer.onUpdateStreamInfo has no streams"),
                                this.room.setStreamState(5, t.from),
                                this.reportNoStream && this.reportNoStream(t.from),
                                this.trigger(c.default.ROOM_NO_STREAM)
                        }
                    }
                }, {
                    key: "mediaStreamUpdate",
                    value: function(t, e, i) {
                        this.hasAutoBitrate && this.isAutoBitrate && (this.currentRoomStream.sBusiGearIndex = "auto");
                        var s = {
                            streamInfo: t,
                            streamGearInfo: e,
                            currentRoomStream: i
                        };
                        d.default.log("BasePlayer.mediaStreamUpdate, data", s),
                        this.trigger(c.default.MEDIA_STREAM_UPDATE, s)
                    }
                }, {
                    key: "needPlay",
                    value: function(t) {
                        return !this.player
                    }
                }, {
                    key: "playStream",
                    value: function(t) {}
                }, {
                    key: "playStreamInfo",
                    value: function(t) {}
                }, {
                    key: "saveCurrentStream",
                    value: function(t, e, i, a) {
                        this.currentRoomStream.backsrc = this.getBacksrc(t),
                        this.currentRoomStream.sStreamName = e,
                        this.currentRoomStream.iBitRate = i,
                        this.currentRoomStream.isSrc = this.currentRoomStream.iWidth > 0 && this.currentRoomStream.iHeight > 0 && 0 === i,
                        this.currentRoomStream.line = a,
                        d.default.log("BasePlayer(" + this.id + ").saveCurrentStream", (0,
                        s.default)(this.currentRoomStream), this.currentRoomStream)
                    }
                }, {
                    key: "getParams",
                    value: function(t, e, i) {
                        var s = [];
                        return t.sAdditionalParam && s.push(t.sAdditionalParam),
                        e.sAdditionalParam && s.push(e.sAdditionalParam),
                        i > 0 && s.push("ratio=" + i),
                        s
                    }
                }, {
                    key: "setCurrentRoomStreamGearInfo",
                    value: function(t, e, i) {
                        var s = this.getStreamGearInfo(t, e);
                        s ? (this.currentRoomStream.sDisplayName = s.sDisplayName,
                        this.currentRoomStream.sBusiGearIndex = s.sBusiGearIndex,
                        this.currentRoomStream.iWidth = s.tResolution.iWidth,
                        this.currentRoomStream.iHeight = s.tResolution.iHeight) : (this.currentRoomStream.sDisplayName = "",
                        this.currentRoomStream.sBusiGearIndex = "")
                    }
                }, {
                    key: "getStreamGearInfo",
                    value: function(t, e) {
                        for (var i = 0; i < t.vStreamGearInfo.length; i++)
                            if (Number(e) === Number(t.vStreamGearInfo[i].iBitRate))
                                return t.vStreamGearInfo[i];
                        return null
                    }
                }, {
                    key: "getBacksrc",
                    value: function(t) {
                        var e = (t = t.replace("//", "")).split("/");
                        return t.endsWith("/") && e.pop(),
                        e.length > 1 ? e.pop() : ""
                    }
                }, {
                    key: "validUrl",
                    value: function(t) {
                        return t + (t.endsWith("/") ? "" : "/")
                    }
                }, {
                    key: "startPlayVideo",
                    value: function(t) {
                        this.currentRoomStream.iBitRate = this.qualityBitrate[t.videoquality] || 0,
                        this.currentRoomStream.line = t.line,
                        this.startPlayUrl(t.url)
                    }
                }, {
                    key: "startPlayUrl",
                    value: function(t) {
                        t && (this.stat.setComDim("stream_url", t),
                        S.default.once(this.onBlackScreen, this, 1e4),
                        t = window && window.location && -1 !== window.location.protocol.indexOf("https") ? t.replace("http://", "https://") : t.replace("https://", "http://"),
                        this._stop(),
                        this.createVideo() && this.realStartPlay(t))
                    }
                }, {
                    key: "realStartPlay",
                    value: function(t) {}
                }, {
                    key: "playMp4",
                    value: function(t) {
                        this.stat.setComDim("stream_url", t),
                        this.player = new y.default(this,this.playerVideo),
                        this.player.roomId = this.startPlayInfo.roomId,
                        this.player.gameid = this.startPlayInfo.gameid,
                        this.player.startPlay({
                            url: t,
                            uistartTs: this.uistartTs,
                            startTimeStamp: this.startPlayInfo.startTimeStamp,
                            pid: this.startPlayInfo.pid,
                            oexp: this.startPlayInfo.oexp,
                            bitrate: this.currentRoomStream.iBitRate,
                            lineType: this.currentRoomStream.line,
                            stream_from: this.stream_from,
                            place: this.startPlayInfo.place
                        })
                    }
                }, {
                    key: "onPlayVideo",
                    value: function(t) {
                        d.default.log("BasePlayer.onPlayVideo", (0,
                        s.default)(t)),
                        this.tryCnt = 3,
                        this.startPlayInfo.startTimeStamp = 0,
                        this.setLocalVideoStarted(!0),
                        this.trigger(c.default.VIDEO_PLAY, {
                            video: t.video,
                            loadTime: t && t.loadTime ? t.loadTime : 0,
                            connectTime: t && t.connectTime ? t.connectTime : 0,
                            recvDataTime: t && t.recvDataTime ? t.recvDataTime : 0,
                            canvas: t.canvas,
                            videoCodec: t.videoCodec
                        });
                        var e = document.getElementById(this.startPlayInfo.id);
                        e && (e.innerHTML = "",
                        "h265" == t.videoCodec ? e.appendChild(t.canvas) : e.appendChild(this.playerVideo)),
                        t && t.loadTime && t.loadTime > 1e3 && this.fbCtrl.feedback(T.default.PLAY_VIDEO, this.getLog()),
                        this.isMosaic && this.perMosaic > 0 && this.player && this.player.setBackDropFilter && this.player.setBackDropFilter(!0, this.perMosaic, this.startPlayInfo.id)
                    }
                }, {
                    key: "onPlayerError",
                    value: function(t) {
                        this.trigger(c.default.VIDEO_ERROR, {
                            type: t
                        })
                    }
                }, {
                    key: "onPlayEnded",
                    value: function() {
                        d.default.log("BasePlayer.onPlayEnded"),
                        this.trigger(c.default.VIDEO_ENDED),
                        this.trigger(c.default.VIDEO_STOP)
                    }
                }, {
                    key: "onPlayTime",
                    value: function(t, e, i) {
                        this.trigger(c.default.PLAY_TIME, {
                            currentTime: t,
                            buffered: i,
                            duration: e
                        })
                    }
                }, {
                    key: "onP2PReport",
                    value: function(t, e) {}
                }, {
                    key: "onSeiInfo",
                    value: function(t, e) {
                        this.trigger(c.default.SEI_INFO, e)
                    }
                }, {
                    key: "autoBitrateChanged",
                    value: function(t, e) {
                        var i = e.curBitrate;
                        i === this.broadcastBitrate ? this.currentRoomStream.iBitRate = 0 : this.currentRoomStream.iBitRate = i,
                        this.trigger(c.default.AUTO_BITRATE_CHANGED, e)
                    }
                }, {
                    key: "onBrowserPause",
                    value: function() {
                        d.default.log("BasePlayer.onBrowserPause", this.startPlayInfo && this.startPlayInfo.bLive),
                        this.playerVideo && this.startPlayInfo && this.startPlayInfo.bLive && this.delH5EventListeners(this.playerVideo),
                        this.trigger(c.default.BROWSER_PAUSE, {})
                    }
                }, {
                    key: "seek",
                    value: function(t, e) {
                        d.default.log("BasePlayer.seek time=" + t, "waitTime", e),
                        this.player && this.player.setCurrentTime(t, e)
                    }
                }, {
                    key: "updateLiveVodUrl",
                    value: function(t) {
                        d.default.log("BasePlayer.updateLiveVodUrl url=" + t),
                        this.player && this.player.updateLiveVodUrl(t)
                    }
                }, {
                    key: "setVolume",
                    value: function(t) {
                        d.default.log("BasePlayer.setVolume volume=" + t),
                        this.volume = t,
                        this.player && this.player.setVolume(t)
                    }
                }, {
                    key: "getVolume",
                    value: function() {
                        return this.volume
                    }
                }, {
                    key: "replayVideo",
                    value: function() {
                        this.startPlay(this.startPlayInfo, this.vjsOptions)
                    }
                }, {
                    key: "play",
                    value: function() {
                        d.default.log("BasePlayer.play"),
                        this.player && this.player.play()
                    }
                }, {
                    key: "pause",
                    value: function() {
                        d.default.log("BasePlayer.pause"),
                        this.player && this.player.pause()
                    }
                }, {
                    key: "setMuted",
                    value: function(t) {
                        d.default.log("BasePlayer.setMuted", t),
                        this.isMuted = t,
                        this.player && this.player.setMuted && this.player.setMuted(t)
                    }
                }, {
                    key: "getMuted",
                    value: function() {
                        return this.isMuted
                    }
                }, {
                    key: "setBackDropFilter",
                    value: function(t, e, i) {
                        this.isMosaic = t,
                        this.perMosaic = e,
                        d.default.log("BasePlayer.setBackDropFilter", t, e, i),
                        this.player && this.player.setBackDropFilter && this.player.setBackDropFilter(t, e, i)
                    }
                }, {
                    key: "getCdnSip",
                    value: function() {
                        return this.player && this.player.getCdnSip && this.player.getCdnSip()
                    }
                }, {
                    key: "getDurationTime",
                    value: function() {
                        return this.player && this.player.getDurationTime()
                    }
                }, {
                    key: "stop",
                    value: function() {
                        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                        d.default.log("BasePlayer(" + this.id + ").stop", t),
                        this.bUserStoped = t,
                        this.isAutoBitrate = !1,
                        this._stop()
                    }
                }, {
                    key: "_stop",
                    value: function() {
                        d.default.log("BasePlayer(" + this.id + ")._stop"),
                        S.default.remove(this.onBlackScreen, this),
                        this.playerVideo && this.delH5EventListeners(this.playerVideo),
                        this.player && (this.player.stop(),
                        this.player = null)
                    }
                }, {
                    key: "resume",
                    value: function() {
                        this.bUserStoped = !1,
                        this.playStreamInfo(this.streamList, this.currentRoomStream.iBitRate || -1)
                    }
                }, {
                    key: "getEl",
                    value: function() {
                        return this.playerVideo
                    }
                }, {
                    key: "getLog",
                    value: function() {
                        return ""
                    }
                }, {
                    key: "destroy",
                    value: function() {
                        d.default.log("HyOpenPlayer.destroy"),
                        this.destroyed = !0,
                        S.default.remove(this.onBlackScreen, this),
                        this.player && (this.player.dispose(),
                        this.player = null),
                        this.currentRoomStream = {},
                        this.room.quit(),
                        this.clear(),
                        this.clearVideoChildnote()
                    }
                }, {
                    key: "setAbTestConfig",
                    value: function(t) {
                        d.default.log("HyOpenPlayer.setAbTestConfig abConfig", t),
                        this.abTestConfig = t
                    }
                }, {
                    key: "onNeedUpdateM3u8Bind",
                    value: function(t, e) {
                        this.trigger(c.default.NEED_UPDATE_M3U8, e)
                    }
                }, {
                    key: "onPlaybackM3u8Updated",
                    value: function(t, e) {
                        this.trigger(c.default.PLAYBACK_M3U8_UPDATED, e)
                    }
                }, {
                    key: "getCurrentDts",
                    value: function() {
                        return this.player && this.player.getCurrentDts ? this.player.getCurrentDts() : 0
                    }
                }]),
                e
            }(v.default);
            e.default = I
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = d(i(10))
              , a = d(i(2))
              , r = d(i(3))
              , n = d(i(22))
              , o = d(i(110))
              , u = d(i(23))
              , h = i(17)
              , l = d(i(21))
              , c = d(i(12));
            function d(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var f = function(t) {
                function e() {
                    return (0,
                    a.default)(this, e),
                    (0,
                    n.default)(this, (e.__proto__ || (0,
                    s.default)(e)).apply(this, arguments))
                }
                return (0,
                u.default)(e, t),
                (0,
                r.default)(e, [{
                    key: "_onLoginSuc",
                    value: function() {
                        this._player && this._player.onLoginMedia && this._player.onLoginMedia(),
                        (0,
                        o.default)(e.prototype.__proto__ || (0,
                        s.default)(e.prototype), "_onLoginSuc", this).call(this)
                    }
                }, {
                    key: "quit",
                    value: function(t) {
                        c.default.log("RoomA.quit " + t + " sCookie=" + l.default.sCookie + " login=" + l.default.isLogin),
                        (0,
                        o.default)(e.prototype.__proto__ || (0,
                        s.default)(e.prototype), "quit", this).call(this, t)
                    }
                }]),
                e
            }(h.Room);
            e.default = f
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = i(17);
            e.default = s.LivingInfo
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s, a = (s = i(2)) && s.__esModule ? s : {
                default: s
            }, r = function t() {
                (0,
                a.default)(this, t)
            };
            r.setVideoAttributeOptions = function(t, e) {
                for (var i in void 0 !== e.preload && r.setAttribute(t, "preload", e.preload),
                e) {
                    var s = e[i];
                    r.setAttribute(t, i, s)
                }
                for (var a = ["loop", "muted", "playsinline", "autoplay", "controls"], n = 0; n < a.length; n++) {
                    var o = a[n]
                      , u = e[o];
                    void 0 !== u && (u || r.removeAttribute(t, o),
                    t[o] = u)
                }
            }
            ,
            r.setAttribute = function(t, e, i) {
                t.setAttribute(e, i)
            }
            ,
            r.removeAttribute = function(t, e) {
                t.removeAttribute(e)
            }
            ,
            e.default = r
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = u(i(10))
              , a = u(i(2))
              , r = u(i(3))
              , n = u(i(22))
              , o = u(i(23));
            function u(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var h = function(t) {
                function e() {
                    return (0,
                    a.default)(this, e),
                    (0,
                    n.default)(this, (e.__proto__ || (0,
                    s.default)(e)).apply(this, arguments))
                }
                return (0,
                o.default)(e, t),
                (0,
                r.default)(e, [{
                    key: "_initStat",
                    value: function() {
                        this._stat.setComDim("p2p", 3),
                        this._stat.setComDim("stream_type", 6)
                    }
                }]),
                e
            }(u(i(112)).default);
            e.default = h
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = r(i(2))
              , a = r(i(3));
            function r(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var n = function() {
                function t() {
                    (0,
                    s.default)(this, t),
                    this.srcTs = 0,
                    this.loadstartTs = 0,
                    this.loadedmetadataTs = 0,
                    this.loadeddataTs = 0
                }
                return (0,
                a.default)(t, [{
                    key: "reset",
                    value: function() {
                        this.srcTs = 0,
                        this.loadstartTs = 0,
                        this.loadedmetadataTs = 0,
                        this.loadeddataTs = 0
                    }
                }]),
                t
            }();
            e.default = n
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = u(i(2))
              , a = u(i(3))
              , r = u(i(40))
              , n = u(i(39))
              , o = u(i(12));
            function u(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var h = function() {
                function t() {
                    (0,
                    s.default)(this, t),
                    this.video = null,
                    this._startWaitingTs = 0,
                    this._badQualityCnt = 0,
                    this._badQualityTime = 0,
                    this._badQuality = !1,
                    this._paused = !1,
                    this.onWaitingBind = this.onWaiting.bind(this),
                    this.onPlayingBind = this.onPlaying.bind(this),
                    this.onPauseBind = this.onPause.bind(this)
                }
                return (0,
                a.default)(t, [{
                    key: "reset20",
                    value: function() {
                        this._badQuality && (this._startWaitingTs = r.default.now()),
                        this._badQuality = !1,
                        this.resetBadQuality()
                    }
                }, {
                    key: "reset",
                    value: function() {
                        this.delEventListener(this.video),
                        this.resetBadQuality(),
                        this.resetStat(),
                        this._paused = !1,
                        this.video = null
                    }
                }, {
                    key: "resetBadQuality",
                    value: function() {
                        this._badQualityCnt = 0,
                        this._badQualityTime = 0
                    }
                }, {
                    key: "resetStat",
                    value: function() {
                        this._startWaitingTs = 0,
                        this._badQuality = !1
                    }
                }, {
                    key: "start",
                    value: function(t) {
                        this.reset(),
                        this.addEventListener(t),
                        this.video = t,
                        n.default.add(this.onCheckStat, this, 50)
                    }
                }, {
                    key: "stop",
                    value: function() {
                        this.reset(),
                        n.default.remove(this.onCheckStat, this)
                    }
                }, {
                    key: "addEventListener",
                    value: function(t) {
                        t && (t.addEventListener("waiting", this.onWaitingBind),
                        t.addEventListener("playing", this.onPlayingBind),
                        t.addEventListener("pause", this.onPauseBind))
                    }
                }, {
                    key: "delEventListener",
                    value: function(t) {
                        t && (t.removeEventListener("waiting", this.onWaitingBind),
                        t.removeEventListener("playing", this.onPlayingBind),
                        t.removeEventListener("onPause", this.onPauseBind))
                    }
                }, {
                    key: "onCheckStat",
                    value: function(t, e) {
                        !this._paused && this._startWaitingTs > 0 && t - this._startWaitingTs > 200 && (this._badQuality || (this._badQuality = !0,
                        this._badQualityCnt++))
                    }
                }, {
                    key: "onWaiting",
                    value: function(t) {
                        0 === this._startWaitingTs && (this._startWaitingTs = r.default.now())
                    }
                }, {
                    key: "onPlaying",
                    value: function(t) {
                        this.checkBadQuality(),
                        this.resetStat(),
                        this._paused = !1
                    }
                }, {
                    key: "onPause",
                    value: function(t) {
                        this.checkBadQuality(),
                        this.resetStat(),
                        this._paused = !0
                    }
                }, {
                    key: "checkBadQuality",
                    value: function() {
                        if (this._badQuality && this._startWaitingTs > 0) {
                            var t = r.default.now() - this._startWaitingTs;
                            o.default.log("PauseStat.onPlaying badQualityTime=" + t),
                            this._badQualityTime += t
                        }
                    }
                }, {
                    key: "paused",
                    get: function() {
                        return this._badQualityCnt > 0
                    }
                }]),
                t
            }();
            e.default = h
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.default = {
                getBrand: function(t) {
                    return this.isIphone(t) ? "iphone" : this.isHuawei(t) ? "huawei" : this.isOppo(t) ? "oppo" : this.isVivo(t) ? "vivo" : this.isXiaomi(t) ? "xiaomi" : this.isSamsung(t) ? "samsung" : this.isUc(t) ? "uc" : "default"
                },
                isIphone: function(t) {
                    return t && (t = t.toLowerCase()),
                    t && "iphone" == t.match(/iphone/i)
                },
                isHuawei: function(t) {
                    return t && (t = t.toLowerCase()),
                    t && ("huawei" == t.match(/huawei/i) || "honor" == t.match(/honor/i))
                },
                isOppo: function(t) {
                    return t && (t = t.toLowerCase()),
                    t && ("oppo" == t.match(/oppo/i) || "pacm00" == t.match(/pacm00/i))
                },
                isVivo: function(t) {
                    return t && (t = t.toLowerCase()),
                    t && "vivo" == t.match(/vivo/i)
                },
                isXiaomi: function(t) {
                    return t && (t = t.toLowerCase()),
                    t && ("mi " == t.match(/mi\s/i) || "mix " == t.match(/mix\s/i) || "redmi" == t.match(/redmi/i))
                },
                isSamsung: function(t) {
                    return t && (t = t.toLowerCase()),
                    t && "sm-" == t.match(/sm-/i)
                },
                isUc: function(t) {
                    return t && (t = t.toLowerCase()),
                    t && "ucbrowser" == t.match(/ucbrowser/i)
                },
                isWeChat: function(t) {
                    return t && (t = t.toLowerCase()),
                    /micromessenger/.test(t)
                },
                getPlatform: function(t) {
                    var e = "ipad" == t.match(/ipad/i)
                      , i = "iphone os" == t.match(/iphone os/i)
                      , s = "midp" == t.match(/midp/i)
                      , a = "rv:1.2.3.4" == t.match(/rv:1.2.3.4/i)
                      , r = "ucweb" == t.match(/ucweb/i)
                      , n = "android" == t.match(/android/i)
                      , o = "windows ce" == t.match(/windows ce/i)
                      , u = "windows mobile" == t.match(/windows mobile/i);
                    return i || s || a || r || n || o || u || e ? e ? "pad" : "phone" : "pc"
                }
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = n(i(2))
              , a = n(i(3))
              , r = n(i(50));
            function n(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var o = function() {
                function t() {
                    (0,
                    s.default)(this, t)
                }
                return (0,
                a.default)(t, [{
                    key: "detectOS",
                    value: function() {
                        var t = navigator.userAgent
                          , e = "Win32" == navigator.platform || "Windows" == navigator.platform
                          , i = "Mac68K" == navigator.platform || "MacPPC" == navigator.platform || "Macintosh" == navigator.platform || "MacIntel" == navigator.platform;
                        if (i)
                            return "Mac";
                        if ("X11" == navigator.platform && !e && !i)
                            return "Unix";
                        if (String(navigator.platform).indexOf("Linux") > -1)
                            return "Linux";
                        if (e) {
                            if (t.indexOf("Windows NT 5.0") > -1 || t.indexOf("Windows 2000") > -1)
                                return "Win2000";
                            if (t.indexOf("Windows NT 5.1") > -1 || t.indexOf("Windows XP") > -1)
                                return "WinXP";
                            if (t.indexOf("Windows NT 5.2") > -1 || t.indexOf("Windows 2003") > -1)
                                return "Win2003";
                            if (t.indexOf("Windows NT 6.0") > -1 || t.indexOf("Windows Vista") > -1)
                                return "WinVista";
                            if (t.indexOf("Windows NT 6.1") > -1 || t.indexOf("Windows 7") > -1)
                                return "Win7";
                            if (t.indexOf("Windows NT 10") > -1 || t.indexOf("Windows 10") > -1)
                                return "Win10"
                        }
                        return "other"
                    }
                }, {
                    key: "feedBack",
                    value: function(t, e, i) {
                        this.getFbId(t, e, r.default[2], i, this.postLog.bind(this))
                    }
                }, {
                    key: "getFbId",
                    value: function(t, e, i, s, a) {
                        var r = 18e11 + parseInt(1e11 * Math.random());
                        if (window.XMLHttpRequest) {
                            var n = new XMLHttpRequest
                              , o = new FormData;
                            o.append("fbType", i),
                            o.append("fbDetails", s || i),
                            o.append("uid", r),
                            o.append("gid", this.getCookie("guid")),
                            o.append("device", this.detectOS()),
                            o.append("appVersion", 2411271811),
                            o.append("deviceType", 1),
                            o.append("anchorId", t),
                            o.append("ssid", 0),
                            o.append("appId", 4e3),
                            n.open("post", "//ffilelogapp.nimo.tv/addFeedBack", !1),
                            n.onload = function(t) {
                                var i = JSON.parse(t.target.responseText)
                                  , s = i.fbId;
                                1 == i.result ? (a(s, e),
                                console.info("获取fbid成功")) : console.info("获取fbid失败")
                            }
                            ,
                            n.send(o)
                        }
                    }
                }, {
                    key: "getCookie",
                    value: function(t) {
                        for (var e = t + "=", i = document.cookie.split(";"), s = 0, a = i.length; s < a; s++) {
                            var r = i[s].trim();
                            if (0 == r.indexOf(e))
                                return r.substr(e.length)
                        }
                        return ""
                    }
                }, {
                    key: "gblen",
                    value: function(t) {
                        for (var e = 0, i = t.length, s = 0; s < i; s++) {
                            var a = t.charCodeAt(s);
                            a >= 1 && a <= 126 || 65376 <= a && a <= 65439 ? e++ : e += 2
                        }
                        return e
                    }
                }, {
                    key: "postLog",
                    value: function(t, e) {
                        var i = this.gblen(e);
                        if (window.XMLHttpRequest) {
                            var s = new XMLHttpRequest
                              , a = new FormData;
                            a.append("feedbackId", t),
                            a.append("log", e),
                            a.append("fileSize", i),
                            s.open("post", "//ffilelogupload.nimo.tv/uploadStringLog", !1),
                            s.onreadystatechange = function() {
                                if (console.log(s.readyState),
                                4 == s.readyState && 200 == s.status) {
                                    var t = s.responseText;
                                    console.log(t)
                                }
                            }
                            ,
                            s.onload = function(t) {}
                            ,
                            s.send(a)
                        }
                    }
                }]),
                t
            }();
            e.default = o
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = u(i(10))
              , a = u(i(2))
              , r = u(i(3))
              , n = u(i(22))
              , o = u(i(23));
            function u(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var h = function(t) {
                function e() {
                    return (0,
                    a.default)(this, e),
                    (0,
                    n.default)(this, (e.__proto__ || (0,
                    s.default)(e)).apply(this, arguments))
                }
                return (0,
                o.default)(e, t),
                (0,
                r.default)(e, [{
                    key: "_initStat",
                    value: function() {
                        this._stat.setComDim("p2p", 4),
                        this._stat.setComDim("stream_type", 3)
                    }
                }]),
                e
            }(u(i(112)).default);
            e.default = h
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = f(i(28))
              , a = f(i(2))
              , r = f(i(3))
              , n = f(i(76))
              , o = f(i(41))
              , u = f(i(21))
              , h = f(i(12))
              , l = f(i(116))
              , c = f(i(113))
              , d = (f(i(40)),
            f(i(75)));
            function f(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var p = 0
              , m = 1
              , y = function() {
                function t(e, i) {
                    (0,
                    a.default)(this, t),
                    this.id = p++,
                    h.default.log("HysdkPlayer.constructor"),
                    this.handler = e,
                    this.playerConfig = i,
                    this.playing = !1,
                    this.onPlayVideoBind = this.onPlayVideo.bind(this),
                    this.onStopVideoBind = this.onStopVideo.bind(this),
                    this.onM3u8PlayEndedBind = this.onM3u8PlayEnded.bind(this),
                    this.onSeekVideoBind = this.onSeekVideo.bind(this),
                    this.onAnchorStopBind = this.onAnchorStop.bind(this),
                    this.onPlayStatusBind = this.onPlayStatus.bind(this),
                    this.onPlayTimeStatusBind = this.onPlayTimeStatus.bind(this),
                    this.onPlayDataMeteric2Bind = this.onPlayDataMeteric2.bind(this),
                    this.onPlayDownLinkInfoBind = this.onPlayDownLinkInfo.bind(this),
                    this.onLinkUavailableBind = this.onLinkUavailable.bind(this),
                    this.onLinkTimeoutBind = this.onLinkTimeout.bind(this),
                    this.onLoadTimeoutBind = this.onLoadTimeout.bind(this),
                    this.onPlayerErrorBind = this.onPlayerError.bind(this),
                    this.onNoDataReceivedBind = this.onNoDataReceived.bind(this),
                    this.onCloseBind = this.onClose.bind(this),
                    this.onReplayVideoBind = this.onReplayVideo.bind(this),
                    this.onRecvVideoFramesBind = this.onRecvVideoFrames.bind(this),
                    this.onUpdateFrameBufferBind = this.onUpdateFrameBuffer.bind(this),
                    this.onMetaDataBind = this.onMetaData.bind(this),
                    this.onSwitchDoneBind = this.onSwitchDone.bind(this),
                    this.onUpdateIntersityBind = this.onUpdateIntersity.bind(this),
                    this.onVideoPauseBind = this.onVideoPause.bind(this),
                    this.onVideoStartBind = this.onVideoStart.bind(this),
                    this.onVideoStartLoadBind = this.onVideoStartLoad.bind(this),
                    this.onSetSignalBind = this.onSetSignal.bind(this),
                    this.onPause5SecBind = this.onPause5SecError.bind(this),
                    this.onNeedUpdateM3u8Bind = this.onNeedUpdateM3u8.bind(this),
                    this.onPlaybackM3u8UpdatedBind = this.onPlaybackM3u8Updated.bind(this),
                    this.onP2PReportBind = this.onP2PReport.bind(this),
                    this.onSeiInfoBind = this.onSeiInfo.bind(this),
                    this.autoBitrateChangedBind = this.autoBitrateChanged.bind(this),
                    this.onBrowserPauseBind = this.onBrowserPause.bind(this),
                    this.roomId = 0,
                    this.gameid = 0,
                    this.videoInfo = null,
                    this.pause5SecRetryTime = 0,
                    this.lastRoomId = 0
                }
                return (0,
                r.default)(t, [{
                    key: "setTafHandler",
                    value: function() {
                        var t = o.default.getSignalSdk();
                        t ? this.hyPlayer.setTafHandler && this.hyPlayer.setTafHandler(t) : o.default.on(o.default.SIGNAL_INIT, this.onSetSignalBind)
                    }
                }, {
                    key: "getMeidaType",
                    value: function(t) {
                        var e = "";
                        switch (t) {
                        case l.default.flv:
                            e = HYPlayer.FLV;
                            break;
                        case l.default.hls:
                            e = HYPlayer.HLS;
                            break;
                        case l.default.playback:
                            e = HYPlayer.PLAYBACK;
                            break;
                        case l.default.p2p:
                            e = HYPlayer.P2PFLV;
                            break;
                        default:
                            e = HYPlayer.FLV
                        }
                        return e
                    }
                }, {
                    key: "startPlay",
                    value: function(t, e) {
                        this.videoInfo = t,
                        this.sdkver = t.sdkver,
                        this.lineType = t.lineType,
                        this.videoSrc = t.url,
                        this.bitrate = t.bitrate,
                        this.originalBitrate = t.originalBitrate || 0,
                        this.iBitRate = t.iBitRate || 0,
                        this.curBitrate = t.curBitrate || 0,
                        this.enableLowLatency = t.enableLowLatency,
                        this.mediaType = t.mediaType,
                        this.pidpresenterUid = t.pid,
                        this.myid = t.myid,
                        this.anonymousuid = this.myid ? 0 : t.anonymousuid || c.default.getAnonymousUid(),
                        this.roomId = t.roomId,
                        this.needSeek = t.needSeek,
                        this.el_ = t.video,
                        this.startTimeStamp = t.startTimeStamp,
                        this.isPureAudio = !!t.isPureAudio,
                        this.isPureVideo = !!t.isPureVideo,
                        this.uistartTs = t.uistartTs,
                        this.bLive = t.bLive,
                        this.startType = t.startType,
                        this.place = t.place,
                        this.noNeedSendVideoLoadTime = t.noNeedSendVideoLoadTime,
                        this.seekTime = t.seekTime,
                        this.cdnName = t.cdnName,
                        this.h5Root = t.h5Root,
                        this.sStreamName = t.sStreamName,
                        this.sAdditionalParam = t.sAdditionalParam,
                        this.lastRoomId !== this.roomId && (this.lastRoomId = this.roomId,
                        this.tryHist = []),
                        d.default._forceWasmWebgl = 1,
                        this.hyPlayer || (this.hyPlayer = new HYPlayer,
                        this.hyPlayer.attachMediaElement(this.el_),
                        this.hyPlayer.on(HYPlayer.Events.VIDEO_PLAY, this.onPlayVideoBind),
                        this.hyPlayer.on(HYPlayer.Events.VIDEO_STOP, this.onStopVideoBind),
                        this.hyPlayer.on(HYPlayer.Events.VIDEO_SEEK, this.onSeekVideoBind),
                        this.hyPlayer.on(HYPlayer.Events.ANCHOR_STOP, this.onAnchorStopBind),
                        this.hyPlayer.on(HYPlayer.Events.PLAY_STATUS, this.onPlayStatusBind),
                        this.hyPlayer.on(HYPlayer.Events.PLAY_TIME_STATUS, this.onPlayTimeStatusBind),
                        this.hyPlayer.on(HYPlayer.Events.DATA_METRIC2, this.onPlayDataMeteric2Bind),
                        this.hyPlayer.on(HYPlayer.Events.PLAY_DOWNLINK_INFO, this.onPlayDownLinkInfoBind),
                        this.hyPlayer.on(HYPlayer.Events.FLV_URL_UNAVAILABLE, this.onLinkUavailableBind),
                        this.hyPlayer.on(HYPlayer.Events.FLV_URL_LOAD_TIMEOUT, this.onLinkTimeoutBind),
                        this.hyPlayer.on(HYPlayer.Events.HLS_URL_UNAVAILABLE, this.onLinkUavailableBind),
                        this.hyPlayer.on(HYPlayer.Events.HLS_URL_LOAD_TIMEOUT, this.onLinkTimeoutBind),
                        this.hyPlayer.on(HYPlayer.Events.HLS_MAINFEST_LOAD_TIMEOUT, this.onLoadTimeoutBind),
                        this.hyPlayer.on(HYPlayer.Events.H5_PLAYER_ERROR, this.onPlayerErrorBind),
                        this.hyPlayer.on(HYPlayer.Events.NO_DATA_RECEIVED, this.onNoDataReceivedBind),
                        this.hyPlayer.on(HYPlayer.Events.VIDEO_LINK_CLOSE, this.onCloseBind),
                        this.hyPlayer.on(HYPlayer.Events.REPLAY_VIDEO, this.onReplayVideoBind),
                        this.hyPlayer.on(HYPlayer.Events.RECV_VIDEO_FRAME, this.onRecvVideoFramesBind),
                        this.hyPlayer.on(HYPlayer.Events.PLAY_FRAME_BUFFER, this.onUpdateFrameBufferBind),
                        this.hyPlayer.on(HYPlayer.Events.METADATA, this.onMetaDataBind),
                        this.hyPlayer.on(HYPlayer.Events.SWITCH_DONE, this.onSwitchDoneBind),
                        this.hyPlayer.on(HYPlayer.Events.UPDATE_INTERSITY, this.onUpdateIntersityBind),
                        this.hyPlayer.on(HYPlayer.Events.PAUSE_5SEC_ERROR, this.onPause5SecBind),
                        this.hyPlayer.on(HYPlayer.Events.NEED_UPDATE_M3U8, this.onNeedUpdateM3u8Bind),
                        this.hyPlayer.on(HYPlayer.Events.PLAYBACK_M3U8_UPDATED, this.onPlaybackM3u8UpdatedBind),
                        this.hyPlayer.on("M3U8_PLAY_ENDED", this.onM3u8PlayEndedBind),
                        this.hyPlayer.on(HYPlayer.Events.VIDEO_ENDED, this.onM3u8PlayEndedBind),
                        this.hyPlayer.on(HYPlayer.Events.P2P_REPORT, this.onP2PReportBind),
                        this.hyPlayer.on(HYPlayer.Events.SEI_INFO, this.onSeiInfoBind),
                        this.hyPlayer.on(HYPlayer.Events.AUTO_BITRATE_CHANGED, this.autoBitrateChangedBind),
                        this.hyPlayer.on(HYPlayer.Events.BROWSER_PAUSE, this.onBrowserPauseBind),
                        this.el_.addEventListener("waiting", this.onVideoPauseBind),
                        this.el_.addEventListener("playing", this.onVideoStartBind),
                        this.el_.addEventListener("loadstart", this.onVideoStartLoadBind),
                        this.hyPlayer.setConfig("rtPeerSrc", 0),
                        this.hyPlayer.setConfig("crossClientPer", "all|all:0"),
                        this.hyPlayer.setConfig("rtPeerMax", 0),
                        this.hyPlayer.setConfig("rtPeerUgMin", 1e3),
                        this.playerConfig && this.hyPlayer.setNimoConfig(this.playerConfig)),
                        this.handler.abTestConfig && (h.default.log("HysdkPlayer.startPlay setAbTestConfig"),
                        this.hyPlayer.setAbTestConfig(this.handler.abTestConfig)),
                        t.isP2PSupport && this.hyPlayer.initWorker && this.hyPlayer.initWorker(),
                        this.sdkPlay(this.videoSrc, this.mediaType, {
                            isSwitchBitrate: e
                        })
                    }
                }, {
                    key: "sdkPlay",
                    value: function(t, e) {
                        var i = this
                          , a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        this.playing = !1;
                        var r = this.getMeidaType(e)
                          , n = this.h5Root;
                        n || (n = location.origin + location.pathname);
                        var o = [];
                        this.handler.streamGearInfo.forEach((function(t) {
                            var e = t.tResolution || {}
                              , s = e.iWidth > 0 && e.iHeight > 0 && 0 === t.iBitRate;
                            "auto" !== t.sDisplayName && o.push({
                                bitrate: s ? i.handler.broadcastBitrate : t.iBitRate,
                                iBitRate: t.iBitRate,
                                iCodecType: t.iCodecType,
                                iHEVCBitRate: t.iHEVCBitRate,
                                iIsHEVCSupport: t.iIsHEVCSupport
                            })
                        }
                        ));
                        var l = this.handler.hasAutoBitrate && this.handler.isAutoBitrate
                          , d = {
                            sdkver: this.sdkver,
                            type: r,
                            isLive: this.bLive,
                            appid: u.default.appId,
                            uid: Number(this.myid || this.anonymousuid),
                            presenterUid: this.pidpresenterUid,
                            roomId: this.roomId,
                            lineType: this.lineType,
                            liveType: this.bLive ? 1 : 3,
                            startType: this.startType,
                            url: t,
                            sGuid: u.default.deviceId,
                            iBitRate: this.iBitRate,
                            curBitrate: this.curBitrate,
                            originalBitrate: this.originalBitrate,
                            enableLowLatency: this.enableLowLatency,
                            startTimeStamp: this.startTimeStamp,
                            uistartTs: this.uistartTs,
                            isPureAudio: this.isPureAudio,
                            isPureVideo: this.isPureVideo,
                            cdnName: this.cdnName,
                            h5Root: n,
                            p2pLibName: "pcore-v30.js",
                            sStreamName: this.sStreamName,
                            sAdditionalParam: this.sAdditionalParam,
                            isAuto: l,
                            bitrateList: o,
                            hasAutoBitrate: this.handler.hasAutoBitrate,
                            nimoTid: u.default.getMediaUserId()
                        };
                        if (a.isSwitchBitrate && (d.pullStreamFrom = m),
                        this.bLive) {
                            d.iIsP2PSupport = this.videoInfo.isP2PSupport || 0,
                            d.sFlvAntiCode = this.videoInfo.sFlvAntiCode || "",
                            d.sFlvUrl = c.default.removeUrlEndSlash(this.videoInfo.sFlvUrl || ""),
                            d.sFlvUrlSuffix = this.videoInfo.sFlvSuffix || "",
                            d.sHlsAntiCode = this.videoInfo.sHlsAntiCode || "",
                            d.sHlsUrl = c.default.removeUrlEndSlash(this.videoInfo.sHlsUrl || ""),
                            d.sHlsUrlSuffix = this.videoInfo.sHlsSuffix || "",
                            d.sP2pAntiCode = this.videoInfo.sP2pAntiCode || "",
                            d.sP2pUrl = c.default.removeUrlEndSlash(this.videoInfo.sP2pUrl || ""),
                            d.sP2pUrlSuffix = this.videoInfo.sP2pSuffix || "",
                            d.iIsHEVCSupport = this.videoInfo.iIsHEVCSupport,
                            d.iHEVCBitRate = this.videoInfo.iHEVCBitRate,
                            d.iCodecType = this.videoInfo.iCodecType;
                            var f = this.handler._hasP2p();
                            this.hyPlayer.setConfig(100, f),
                            this.hyPlayer.setConfig(101, f && !!d.iIsP2PSupport)
                        }
                        this.bLive || (d.seekTime = this.seekTime),
                        h.default.log("HysdkPlayer(" + this.id + ").sdkPlay type=" + d.type + ", info=", (0,
                        s.default)(d)),
                        this.setTafHandler(),
                        this.videoSrc = t,
                        this.videoInfo && this.videoInfo.oexp && this.hyPlayer.setOexp && this.hyPlayer.setOexp(this.videoInfo.oexp),
                        this.hyPlayer.start(d)
                    }
                }, {
                    key: "onSetSignal",
                    value: function() {
                        this.hyPlayer && this.hyPlayer.setTafHandler(o.default.getSignalSdk())
                    }
                }, {
                    key: "onP2PReport",
                    value: function(t, e) {
                        this.handler && this.handler.onP2PReport(t, e)
                    }
                }, {
                    key: "onSeiInfo",
                    value: function(t, e) {
                        this.handler && this.handler.onSeiInfo(t, e)
                    }
                }, {
                    key: "autoBitrateChanged",
                    value: function(t, e) {
                        this.handler && this.handler.autoBitrateChanged(t, e),
                        e && e.curBitrate && (this.bitrate = e.curBitrate)
                    }
                }, {
                    key: "onPlayVideo",
                    value: function(t, e) {
                        this.playing = !0,
                        this.tryHist = [],
                        this.handler && this.handler.onPlayVideo(e)
                    }
                }, {
                    key: "onStopVideo",
                    value: function(t, e) {
                        this.handler && this.handler.onStopVideo(e)
                    }
                }, {
                    key: "onM3u8PlayEnded",
                    value: function(t) {
                        this.handler && this.handler.onPlayEnded && this.handler.onPlayEnded(t)
                    }
                }, {
                    key: "onSeekVideo",
                    value: function() {}
                }, {
                    key: "onAnchorStop",
                    value: function() {}
                }, {
                    key: "onPlayerError",
                    value: function(t, e) {
                        this.handler && this.handler.onPlayerError(e ? e.code : "unknow")
                    }
                }, {
                    key: "onPause5SecError",
                    value: function(t, e) {
                        this.retryStart()
                    }
                }, {
                    key: "onNoDataReceived",
                    value: function(t) {
                        this.handler && this.handler.onNoDataReceived && this.handler.onNoDataReceived()
                    }
                }, {
                    key: "onNeedUpdateM3u8",
                    value: function(t, e) {
                        this.handler && this.handler.onNeedUpdateM3u8Bind && this.handler.onNeedUpdateM3u8Bind(t, e)
                    }
                }, {
                    key: "onPlaybackM3u8Updated",
                    value: function(t, e) {
                        this.handler && this.handler.onPlaybackM3u8Updated && this.handler.onPlaybackM3u8Updated(t, e)
                    }
                }, {
                    key: "onPlayStatus",
                    value: function() {}
                }, {
                    key: "onPlayDownLinkInfo",
                    value: function(t, e) {
                        this.handler && this.handler.onPlayDownLinkInfo(e)
                    }
                }, {
                    key: "retryStart",
                    value: function() {
                        var t = Date.now();
                        t - this.pause5SecRetryTime < 2e3 || (h.default.log("HysdkPlayer.retryStart videoSrc = " + this.videoSrc + " , type=" + this.mediaType),
                        this.sdkPlay(this.videoSrc, this.mediaType),
                        this.pause5SecRetryTime = t)
                    }
                }, {
                    key: "getRecvInfo",
                    value: function() {
                        return this.hyPlayer && this.hyPlayer.getRecvInfo ? this.hyPlayer.getRecvInfo() : null
                    }
                }, {
                    key: "getCurrentDts",
                    value: function() {
                        return this.hyPlayer && this.hyPlayer.getCurrentDts ? this.hyPlayer.getCurrentDts() : 0
                    }
                }, {
                    key: "onPlayDataMeteric2",
                    value: function(t, e) {
                        n.default.onNimoDataMetric2(e, this.pidpresenterUid, this.bitrate, this.videoSrc, this.lineType, this.place, this.roomId, this.gameid, "", this.videoInfo.stream_from)
                    }
                }, {
                    key: "onPlayTimeStatus",
                    value: function(t, e) {
                        this.handler && this.handler.onPlayTime(Math.floor(e.current), Math.floor(e.total), 0)
                    }
                }, {
                    key: "onLinkUavailable",
                    value: function() {
                        this.handler && this.handler.onLinkUnAvailable()
                    }
                }, {
                    key: "onLoadTimeout",
                    value: function() {
                        this.handler && this.handler.onLoadDataTimeout()
                    }
                }, {
                    key: "onLinkTimeout",
                    value: function() {
                        this.handler && this.handler.onLinkTimeout()
                    }
                }, {
                    key: "onClose",
                    value: function() {
                        this.handler && this.handler.onClose()
                    }
                }, {
                    key: "onReplayVideo",
                    value: function() {
                        this.handler && this.handler.replayVideo()
                    }
                }, {
                    key: "onUpdateFrameBuffer",
                    value: function(t, e) {
                        this.handler && this.handler.onPlayFrameBuffer(e)
                    }
                }, {
                    key: "onMetaData",
                    value: function(t, e) {
                        this.handler && this.handler.onMetaData && this.handler.onMetaData(e)
                    }
                }, {
                    key: "onSwitchDone",
                    value: function(t, e) {
                        this.handler && this.handler.onSwitchDone && this.handler.onSwitchDone()
                    }
                }, {
                    key: "onUpdateIntersity",
                    value: function(t, e) {
                        this.handler && this.handler.onUpdateIntersity && this.handler.onUpdateIntersity(e)
                    }
                }, {
                    key: "onRecvVideoFrames",
                    value: function() {
                        this.handler && this.handler.onVideoFrameLoaded()
                    }
                }, {
                    key: "onVideoPause",
                    value: function(t) {}
                }, {
                    key: "onVideoStart",
                    value: function(t) {}
                }, {
                    key: "onVideoStartLoad",
                    value: function() {}
                }, {
                    key: "onBrowserPause",
                    value: function() {
                        this.bLive ? this.hyPlayer.stop() : this.hyPlayer.pause(),
                        this.handler && this.handler.onBrowserPause && this.handler.onBrowserPause()
                    }
                }, {
                    key: "removeHyPlayerEventListeners",
                    value: function() {
                        this.hyPlayer && (this.hyPlayer.off(HYPlayer.Events.VIDEO_PLAY, this.onPlayVideoBind),
                        this.hyPlayer.off(HYPlayer.Events.VIDEO_STOP, this.onStopVideoBind),
                        this.hyPlayer.off(HYPlayer.Events.VIDEO_SEEK, this.onSeekVideoBind),
                        this.hyPlayer.off(HYPlayer.Events.ANCHOR_STOP, this.onAnchorStopBind),
                        this.hyPlayer.off(HYPlayer.Events.PLAY_STATUS, this.onPlayStatusBind),
                        this.hyPlayer.off(HYPlayer.Events.PLAY_TIME_STATUS, this.onPlayTimeStatusBind),
                        this.hyPlayer.off(HYPlayer.Events.DATA_METRIC2, this.onPlayDataMeteric2Bind),
                        this.hyPlayer.off(HYPlayer.Events.PLAY_DOWNLINK_INFO, this.onPlayDownLinkInfoBind),
                        this.hyPlayer.off(HYPlayer.Events.FLV_URL_UNAVAILABLE, this.onLinkUavailableBind),
                        this.hyPlayer.off(HYPlayer.Events.FLV_URL_LOAD_TIMEOUT, this.onLinkTimeoutBind),
                        this.hyPlayer.off(HYPlayer.Events.HLS_URL_UNAVAILABLE, this.onLinkUavailableBind),
                        this.hyPlayer.off(HYPlayer.Events.HLS_URL_LOAD_TIMEOUT, this.onLinkTimeoutBind),
                        this.hyPlayer.off(HYPlayer.Events.HLS_MAINFEST_LOAD_TIMEOUT, this.onLoadTimeoutBind),
                        this.hyPlayer.off(HYPlayer.Events.H5_PLAYER_ERROR, this.onPlayerErrorBind),
                        this.hyPlayer.off(HYPlayer.Events.NO_DATA_RECEIVED, this.onNoDataReceivedBind),
                        this.hyPlayer.off(HYPlayer.Events.VIDEO_LINK_CLOSE, this.onCloseBind),
                        this.hyPlayer.off(HYPlayer.Events.REPLAY_VIDEO, this.onReplayVideoBind),
                        this.hyPlayer.off(HYPlayer.Events.RECV_VIDEO_FRAME, this.onRecvVideoFramesBind),
                        this.hyPlayer.off(HYPlayer.Events.PLAY_FRAME_BUFFER, this.onUpdateFrameBufferBind),
                        this.hyPlayer.off(HYPlayer.Events.METADATA, this.onMetaDataBind),
                        this.hyPlayer.off(HYPlayer.Events.SWITCH_DONE, this.onSwitchDoneBind),
                        this.hyPlayer.off(HYPlayer.Events.UPDATE_INTERSITY, this.onUpdateIntersityBind),
                        this.hyPlayer.off(HYPlayer.Events.PAUSE_5SEC_ERROR, this.onPause5SecBind),
                        this.hyPlayer.off(HYPlayer.Events.NEED_UPDATE_M3U8, this.onNeedUpdateM3u8Bind),
                        this.hyPlayer.off(HYPlayer.Events.PLAYBACK_M3U8_UPDATED, this.onPlaybackM3u8UpdatedBind),
                        this.hyPlayer.off(HYPlayer.Events.M3U8_PLAY_ENDED, this.onM3u8PlayEndedBind),
                        this.hyPlayer.off(HYPlayer.Events.VIDEO_ENDED, this.onM3u8PlayEndedBind),
                        this.hyPlayer.off(HYPlayer.Events.SEI_INFO, this.onSeiInfoBind),
                        this.hyPlayer.off(HYPlayer.Events.BROWSER_PAUSE, this.onBrowserPauseBind),
                        this.hyPlayer.stop(),
                        this.hyPlayer = null)
                    }
                }, {
                    key: "removeElEventListeners",
                    value: function() {
                        this.el_ && (this.el_.removeEventListener("waiting", this.onVideoPauseBind),
                        this.el_.removeEventListener("playing", this.onVideoStartBind),
                        this.el_.removeEventListener("loadstart", this.onVideoStartLoadBind))
                    }
                }, {
                    key: "reset",
                    value: function() {
                        this.handler = null,
                        this.removeHyPlayerEventListeners(),
                        this.removeElEventListeners()
                    }
                }, {
                    key: "play",
                    value: function() {
                        this.hyPlayer && this.hyPlayer.play()
                    }
                }, {
                    key: "pause",
                    value: function() {
                        this.hyPlayer && this.hyPlayer.pause()
                    }
                }, {
                    key: "setMuted",
                    value: function(t) {
                        this.hyPlayer && this.hyPlayer.setMuted && this.hyPlayer.setMuted(t)
                    }
                }, {
                    key: "setBackDropFilter",
                    value: function(t, e, i) {
                        this.hyPlayer && this.hyPlayer.setBackDropFilter && this.hyPlayer.setBackDropFilter(t, e, i)
                    }
                }, {
                    key: "stop",
                    value: function() {
                        this.reset()
                    }
                }, {
                    key: "setCurrentTime",
                    value: function(t) {
                        this.hyPlayer && this.hyPlayer.seek(t)
                    }
                }, {
                    key: "updateLiveVodUrl",
                    value: function(t) {
                        this.hyPlayer && this.hyPlayer.updateLiveVodUrl(t)
                    }
                }, {
                    key: "getPlayStats",
                    value: function() {
                        return this.hyPlayer && this.hyPlayer.getPlayStats ? this.hyPlayer.getPlayStats() : null
                    }
                }, {
                    key: "getCurrentTime",
                    value: function() {
                        return this.hyPlayer ? this.hyPlayer.getCurrentTime() : this.el_ ? this.el_.currentTime : 0
                    }
                }, {
                    key: "getDurationTime",
                    value: function() {
                        return this.hyPlayer ? this.hyPlayer.getDurationTime() : this.el_ ? this.el_.duration : 0
                    }
                }, {
                    key: "setVolume",
                    value: function(t) {
                        this.hyPlayer && this.hyPlayer.setVolume(t)
                    }
                }, {
                    key: "getLog",
                    value: function() {
                        return this.hyPlayer ? this.hyPlayer.getLog() : ""
                    }
                }, {
                    key: "setPlayerConfig",
                    value: function(t) {
                        this.playerConfig = t,
                        this.hyPlayer && this.hyPlayer.setNimoConfig(this.playerConfig, !0)
                    }
                }, {
                    key: "sendDanmuMetric",
                    value: function(t, e, i) {}
                }, {
                    key: "dispose",
                    value: function() {
                        this.stop()
                    }
                }, {
                    key: "switchLevel",
                    value: function(t) {
                        this.hyPlayer && this.hyPlayer.switchLevel(t)
                    }
                }, {
                    key: "getCdnSip",
                    value: function() {
                        if (this.hyPlayer && this.hyPlayer.getCdnSip)
                            return this.hyPlayer.getCdnSip()
                    }
                }, {
                    key: "isPlaying",
                    get: function() {
                        return this.hyPlayer && this.hyPlayer.player && this.hyPlayer.player.isPlaying
                    }
                }]),
                t
            }();
            e.default = y
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = i(17);
            e.default = s.StreamUrl
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s = m(i(92))
              , a = m(i(228))
              , r = m(i(99))
              , n = m(i(2))
              , o = m(i(3))
              , u = m(i(229))
              , h = m(i(40))
              , l = m(i(109))
              , c = m(i(21))
              , d = m(i(41))
              , f = m(i(39))
              , p = m(i(230));
            function m(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            var y = function() {
                function t() {
                    (0,
                    n.default)(this, t),
                    this.uid = Number((Date.now() % 1e10 * 1e3 + (1e3 * Math.random() | 0)) % 4294967295),
                    this._wsTime = "",
                    this._fm = "",
                    this._params = [],
                    this._sAnticode = "",
                    this._sStreamName = "",
                    this._invalidTime = r.default,
                    this._nextRefreshTime = r.default,
                    this._req = new l.default.GetAntiCodeForStreamReq
                }
                return (0,
                o.default)(t, [{
                    key: "stop",
                    value: function() {
                        f.default.remove(this.onCheckTimer, this)
                    }
                }, {
                    key: "init",
                    value: function(t, e) {
                        this._sStreamName !== t && (this._sStreamName = t,
                        this._req && (this._req.sStreamName = t),
                        this.parseAnticode(e)),
                        f.default.add(this.onCheckTimer, this, 1e3)
                    }
                }, {
                    key: "parseAnticode",
                    value: function(t) {
                        var e = this;
                        this._fm = "",
                        this._wsTime = "",
                        this._params = [],
                        this._sAnticode = t,
                        t.split("&").forEach((function(t) {
                            var i = t.split("=")
                              , s = (0,
                            a.default)(i, 2)
                              , r = s[0]
                              , n = s[1];
                            if ("fm" === r)
                                n = decodeURI(n),
                                n = unescape(n),
                                n = atob(n),
                                e._fm = n;
                            else if ("wsTime" === r) {
                                e._wsTime = n;
                                var o = 1e3 * parseInt(n, 16) + 3e5;
                                e._invalidTime = h.default.now() + (o - Date.now()),
                                e._nextRefreshTime = e._invalidTime - 3e4
                            } else
                                "wsSecret" !== r && e._params.push(t)
                        }
                        ))
                    }
                }, {
                    key: "isInvalid",
                    value: function(t) {
                        return t > this._invalidTime
                    }
                }, {
                    key: "getAnticode",
                    value: function() {
                        if ("" === this._fm)
                            return this._sAnticode;
                        var t = this.uid + Date.now()
                          , e = this._fm.replace("$0", this.uid).replace("$1", this._sStreamName).replace("$2", t + "").replace("$3", this._wsTime)
                          , i = "wsSecret=" + (0,
                        u.default)(e) + "&wsTime=" + this._wsTime + "&seqid=" + t;
                        return this._params.length > 0 && (i += "&" + this._params.join("&")),
                        i + "&u=" + this.uid + "&t=110&sv=2411271811"
                    }
                }, {
                    key: "onCheckTimer",
                    value: function(t, e) {
                        t >= this._nextRefreshTime && this.getToken()
                    }
                }, {
                    key: "valid",
                    value: function() {
                        var t = this;
                        return new s.default((function(e) {
                            t.isInvalid(h.default.now()) ? t.getToken().then(e) : e()
                        }
                        ))
                    }
                }, {
                    key: "getToken",
                    value: function() {
                        var t = this;
                        return new s.default((function(e) {
                            t._nextRefreshTime = r.default,
                            t._req.tId = c.default.getMediaUserId(),
                            d.default.sendWup(p.default.MEDIAUISEA, "getAntiCodeForStream", t._req, (function(i) {
                                i.sStreamName === t._sStreamName && t.parseAnticode(i.sAntiCode),
                                e()
                            }
                            ))
                        }
                        ))
                    }
                }]),
                t
            }();
            e.default = y
        }
        , function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = r(i(100))
              , a = r(i(48));
            function r(t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }
            e.default = function(t, e) {
                if (Array.isArray(t))
                    return t;
                if ((0,
                s.default)(Object(t)))
                    return function(t, e) {
                        var i = []
                          , s = !0
                          , r = !1
                          , n = void 0;
                        try {
                            for (var o, u = (0,
                            a.default)(t); !(s = (o = u.next()).done) && (i.push(o.value),
                            !e || i.length !== e); s = !0)
                                ;
                        } catch (t) {
                            r = !0,
                            n = t
                        } finally {
                            try {
                                !s && u.return && u.return()
                            } finally {
                                if (r)
                                    throw n
                            }
                        }
                        return i
                    }(t, e);
                throw new TypeError("Invalid attempt to destructure non-iterable instance")
            }
        }
        , function(t, e, i) {
            "use strict";
            function s(t, e) {
                var i = (65535 & t) + (65535 & e);
                return (t >> 16) + (e >> 16) + (i >> 16) << 16 | 65535 & i
            }
            function a(t, e, i, a, r, n) {
                return s((o = s(s(e, t), s(a, n))) << (u = r) | o >>> 32 - u, i);
                var o, u
            }
            function r(t, e, i, s, r, n, o) {
                return a(e & i | ~e & s, t, e, r, n, o)
            }
            function n(t, e, i, s, r, n, o) {
                return a(e & s | i & ~s, t, e, r, n, o)
            }
            function o(t, e, i, s, r, n, o) {
                return a(e ^ i ^ s, t, e, r, n, o)
            }
            function u(t, e, i, s, r, n, o) {
                return a(i ^ (e | ~s), t, e, r, n, o)
            }
            function h(t, e) {
                var i, a, h, l, c;
                t[e >> 5] |= 128 << e % 32,
                t[14 + (e + 64 >>> 9 << 4)] = e;
                var d = 1732584193
                  , f = -271733879
                  , p = -1732584194
                  , m = 271733878;
                for (i = 0; i < t.length; i += 16)
                    a = d,
                    h = f,
                    l = p,
                    c = m,
                    d = r(d, f, p, m, t[i], 7, -680876936),
                    m = r(m, d, f, p, t[i + 1], 12, -389564586),
                    p = r(p, m, d, f, t[i + 2], 17, 606105819),
                    f = r(f, p, m, d, t[i + 3], 22, -1044525330),
                    d = r(d, f, p, m, t[i + 4], 7, -176418897),
                    m = r(m, d, f, p, t[i + 5], 12, 1200080426),
                    p = r(p, m, d, f, t[i + 6], 17, -1473231341),
                    f = r(f, p, m, d, t[i + 7], 22, -45705983),
                    d = r(d, f, p, m, t[i + 8], 7, 1770035416),
                    m = r(m, d, f, p, t[i + 9], 12, -1958414417),
                    p = r(p, m, d, f, t[i + 10], 17, -42063),
                    f = r(f, p, m, d, t[i + 11], 22, -1990404162),
                    d = r(d, f, p, m, t[i + 12], 7, 1804603682),
                    m = r(m, d, f, p, t[i + 13], 12, -40341101),
                    p = r(p, m, d, f, t[i + 14], 17, -1502002290),
                    d = n(d, f = r(f, p, m, d, t[i + 15], 22, 1236535329), p, m, t[i + 1], 5, -165796510),
                    m = n(m, d, f, p, t[i + 6], 9, -1069501632),
                    p = n(p, m, d, f, t[i + 11], 14, 643717713),
                    f = n(f, p, m, d, t[i], 20, -373897302),
                    d = n(d, f, p, m, t[i + 5], 5, -701558691),
                    m = n(m, d, f, p, t[i + 10], 9, 38016083),
                    p = n(p, m, d, f, t[i + 15], 14, -660478335),
                    f = n(f, p, m, d, t[i + 4], 20, -405537848),
                    d = n(d, f, p, m, t[i + 9], 5, 568446438),
                    m = n(m, d, f, p, t[i + 14], 9, -1019803690),
                    p = n(p, m, d, f, t[i + 3], 14, -187363961),
                    f = n(f, p, m, d, t[i + 8], 20, 1163531501),
                    d = n(d, f, p, m, t[i + 13], 5, -1444681467),
                    m = n(m, d, f, p, t[i + 2], 9, -51403784),
                    p = n(p, m, d, f, t[i + 7], 14, 1735328473),
                    d = o(d, f = n(f, p, m, d, t[i + 12], 20, -1926607734), p, m, t[i + 5], 4, -378558),
                    m = o(m, d, f, p, t[i + 8], 11, -2022574463),
                    p = o(p, m, d, f, t[i + 11], 16, 1839030562),
                    f = o(f, p, m, d, t[i + 14], 23, -35309556),
                    d = o(d, f, p, m, t[i + 1], 4, -1530992060),
                    m = o(m, d, f, p, t[i + 4], 11, 1272893353),
                    p = o(p, m, d, f, t[i + 7], 16, -155497632),
                    f = o(f, p, m, d, t[i + 10], 23, -1094730640),
                    d = o(d, f, p, m, t[i + 13], 4, 681279174),
                    m = o(m, d, f, p, t[i], 11, -358537222),
                    p = o(p, m, d, f, t[i + 3], 16, -722521979),
                    f = o(f, p, m, d, t[i + 6], 23, 76029189),
                    d = o(d, f, p, m, t[i + 9], 4, -640364487),
                    m = o(m, d, f, p, t[i + 12], 11, -421815835),
                    p = o(p, m, d, f, t[i + 15], 16, 530742520),
                    d = u(d, f = o(f, p, m, d, t[i + 2], 23, -995338651), p, m, t[i], 6, -198630844),
                    m = u(m, d, f, p, t[i + 7], 10, 1126891415),
                    p = u(p, m, d, f, t[i + 14], 15, -1416354905),
                    f = u(f, p, m, d, t[i + 5], 21, -57434055),
                    d = u(d, f, p, m, t[i + 12], 6, 1700485571),
                    m = u(m, d, f, p, t[i + 3], 10, -1894986606),
                    p = u(p, m, d, f, t[i + 10], 15, -1051523),
                    f = u(f, p, m, d, t[i + 1], 21, -2054922799),
                    d = u(d, f, p, m, t[i + 8], 6, 1873313359),
                    m = u(m, d, f, p, t[i + 15], 10, -30611744),
                    p = u(p, m, d, f, t[i + 6], 15, -1560198380),
                    f = u(f, p, m, d, t[i + 13], 21, 1309151649),
                    d = u(d, f, p, m, t[i + 4], 6, -145523070),
                    m = u(m, d, f, p, t[i + 11], 10, -1120210379),
                    p = u(p, m, d, f, t[i + 2], 15, 718787259),
                    f = u(f, p, m, d, t[i + 9], 21, -343485551),
                    d = s(d, a),
                    f = s(f, h),
                    p = s(p, l),
                    m = s(m, c);
                return [d, f, p, m]
            }
            function l(t) {
                var e, i = "", s = 32 * t.length;
                for (e = 0; e < s; e += 8)
                    i += String.fromCharCode(t[e >> 5] >>> e % 32 & 255);
                return i
            }
            function c(t) {
                var e, i = [];
                for (i[(t.length >> 2) - 1] = void 0,
                e = 0; e < i.length; e += 1)
                    i[e] = 0;
                var s = 8 * t.length;
                for (e = 0; e < s; e += 8)
                    i[e >> 5] |= (255 & t.charCodeAt(e / 8)) << e % 32;
                return i
            }
            function d(t) {
                var e, i, s = "";
                for (i = 0; i < t.length; i += 1)
                    e = t.charCodeAt(i),
                    s += "0123456789abcdef".charAt(e >>> 4 & 15) + "0123456789abcdef".charAt(15 & e);
                return s
            }
            function f(t) {
                return unescape(encodeURIComponent(t))
            }
            function p(t) {
                return function(t) {
                    return l(h(c(t), 8 * t.length))
                }(f(t))
            }
            function m(t, e) {
                return function(t, e) {
                    var i, s, a = c(t), r = [], n = [];
                    for (r[15] = n[15] = void 0,
                    a.length > 16 && (a = h(a, 8 * t.length)),
                    i = 0; i < 16; i += 1)
                        r[i] = 909522486 ^ a[i],
                        n[i] = 1549556828 ^ a[i];
                    return s = h(r.concat(c(e)), 512 + 8 * e.length),
                    l(h(n.concat(s), 640))
                }(f(t), f(e))
            }
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.default = function(t, e, i) {
                return e ? i ? m(e, t) : d(m(e, t)) : i ? p(t) : d(p(t))
            }
        }
        , function(t, e, i) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var s, a = (s = i(2)) && s.__esModule ? s : {
                default: s
            }, r = function t() {
                (0,
                a.default)(this, t)
            };
            r.MEDIAUISEA = "mediauisea",
            r.GET_MEDIA_CONFIG = "getMediaConfig",
            r.GET_INFO_FROM_VGM = "getInfoFromVGM",
            r.CHECK_ID_BY_STR = "checkIdByStr",
            r.LOGIN_VERIFY = "loginVerify",
            r.REFRESH_COOKIE = "refreshCookie",
            r.JOIN_GROUP = "joinGroup",
            r.QUIT_GROUP = "quitGroup",
            r.GET_STREAM_INFO_BY_ROOM = "getStreamInfoByRoom",
            r.GET_STREAM_INFO_BY_STREAMNAME = "getStreamInfoByStreamName",
            r.GET_STREAM_INFO_BY_ROOM_FAKE = "getStreamInfoByRoomFake",
            e.default = r
        }
        ]).default
    }
}]);
